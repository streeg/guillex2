

#### beginning ####

------------------------Semantic analysis---------------------
Type: 'int' on line: 1, column: 1
Id: 'main' at line: 1, column: 5
'(' at line: 1, column: 9
')' at line: 1, column: 10
'{' on line: 2, column: 1
Type: 'int' on line: 4, column: 3
ListType: 'list' on line: 4, column: 7
Id: 'x' at line: 4, column: 12
';' at line: 4, column: 13
Type: 'int' on line: 5, column: 3
Id: 'i' at line: 5, column: 7
';' at line: 5, column: 8
Type: 'int' on line: 6, column: 3
Id: 'n' at line: 6, column: 7
';' at line: 6, column: 8
Type: 'int' on line: 7, column: 3
Id: 'elem' at line: 7, column: 7
';' at line: 7, column: 11
Keyword [FOR]: 'for' at line: 8, column: 3
'(' at line: 8, column: 7
Id: 'i' at line: 8, column: 8
'=' at line: 8, column: 10
Integer: '0' at line: 8, column: 12
';' at line: 8, column: 13
Semantic Error
Var i from type int receiving invalid type, line 8, column 14

Id: 'i' at line: 8, column: 15
OP [SMALLER THAN]: '<' at line: 8, column: 17
Id: 'n' at line: 8, column: 19
';' at line: 8, column: 20
Id: 'i' at line: 8, column: 22
'=' at line: 8, column: 24
Id: 'i' at line: 8, column: 26
'+' at line: 8, column: 28
Integer: '1' at line: 8, column: 30
')' at line: 8, column: 31
Semantic Error
Var i from type int receiving invalid type, line 8, column 32

'{' on line: 9, column: 3
Keyword [WRITELN]: 'writeln' at line: 10, column: 5
'(' at line: 10, column: 12
Id: 'n' at line: 10, column: 13
')' at line: 10, column: 14
';' at line: 10, column: 15
Keyword [READ]: 'read' at line: 11, column: 5
'(' at line: 11, column: 9
Id: 'elem' at line: 11, column: 10
')' at line: 11, column: 14
';' at line: 11, column: 15
Keyword [WRITE]: 'write' at line: 12, column: 5
'(' at line: 12, column: 10
String: "oi" on line: 12, column: 11
')' at line: 12, column: 15
';' at line: 12, column: 16
'}' at line: 13, column: 3
Keyword [RETURN]: 'return' at line: 14, column: 3
Integer: '0' at line: 14, column: 10
';' at line: 14, column: 11
'}' at line: 15, column: 1
Semantic Error
function main with wrong return, line 15, column 2



#### EOF ####



------------------------------------------------------symbols------------------------------------------------



|         Value         |         Symbol type             |         Return type           |         Scope       |     Parameters      |

|   main                |    func                         |      int                     |         0            |         0          |
|   x                   |    var                          |      list                    |         0            |         0          |
|   i                   |    var                          |      int                     |         0            |         0          |
|   n                   |    var                          |      int                     |         0            |         0          |
|   elem                |    var                          |      int                     |         0            |         0          |


--------------------------------tree--------------------------------


declaration
-->   funcDeclaration

--->   TYPE ID PARENL PARENR compoundStmt

---->   int

----->   main

------>   stmtList primitiveStmt

------->   stmtList primitiveStmt

-------->   stmtList primitiveStmt

--------->   stmtList primitiveStmt

---------->   stmtList primitiveStmt

----------->   primitiveStmt

------------>   varDeclaration

------------->   simpleVarDeclaration

-------------->   TYPE ID

--------------->   int

---------------->   list

----------------->   x

------------>   varDeclaration

------------->   simpleVarDeclaration

-------------->   TYPE ID

--------------->   int

---------------->   i

----------->   varDeclaration

------------>   simpleVarDeclaration

------------->   TYPE ID

-------------->   int

--------------->   n

---------->   varDeclaration

----------->   simpleVarDeclaration

------------>   TYPE ID

------------->   int

-------------->   elem

--------->   iterStmt

---------->   FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

----------->   for

------------>   ID ASSIGN expression
>   0

------------->   i

-------------->   =

--------------->   simpleExp

---------------->   binLogicalExp

----------------->   relationalExp

------------------>   sumExp

------------------->   mulExp

-------------------->   factor

--------------------->   constOp

---------------------->   0

------------->   binLogicalExp

-------------->   relationalExp

--------------->   relationalExp relationalOp sumExp

---------------->   sumExp
>   0

----------------->   mulExp
>   0

------------------>   factor
>   0

------------------->   ID
>   0

--------------------
----------------->   SMALLER

------------------>   <

------------------>   mulExp
>   0

------------------->   factor
>   0

-------------------->   ID
>   0

---------------------
-------------->   ID ASSIGN expression
>   0

--------------->   i

---------------->   =

----------------->   simpleExp

------------------>   binLogicalExp

------------------->   relationalExp
>   relationalExp

-------------------->   sumExp
>   sumExp

--------------------->   sumExp sumOp mulExp
>   sumExp sumOp mulExp

---------------------->   mulExp
>   0

----------------------->   factor
>   0

------------------------>   ID
>   0

-------------------------
----------------------->   ADD

------------------------>   +

------------------------>   factor

------------------------->   constOp

-------------------------->   1

--------------->   compoundStmt

---------------->   compoundStmt

----------------->   stmtList primitiveStmt

------------------>   stmtList primitiveStmt

------------------->   primitiveStmt

-------------------->   outOp

--------------------->   WRITELN PARENL outConst PARENR SEMIC

---------------------->   writeln

----------------------->   simpleExp

------------------------>   binLogicalExp

------------------------->   relationalExp
>   0

-------------------------->   sumExp
>   0

--------------------------->   mulExp
>   0

---------------------------->   factor
>   0

----------------------------->   ID
>   0

------------------------------
-------------------->   inOp

--------------------->   READ PARENL ID PARENR SEMIC

---------------------->   read

----------------------->   elem

------------------->   outOp

-------------------->   WRITE PARENL outConst PARENR SEMIC

--------------------->   write

---------------------->   STRING

----------------------->   "oi"

-------->   returnStmt

--------->   RETURN expression SEMIC

---------->   return

----------->   simpleExp

------------>   binLogicalExp

------------->   relationalExp

-------------->   sumExp

--------------->   mulExp

---------------->   factor

----------------->   constOp

------------------>   0


 There is 3 warnings in the file

