Grammar

    0 $accept: program $end

    1 program: declarationList

    2 declarationList: declarationList declaration
    3                | declaration
    4                | error

    5 declaration: varDeclaration
    6            | funcDeclaration

    7 varDeclaration: simpleVarDeclaration SEMIC

    8 $@1: %empty

    9 $@2: %empty

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC

   11 $@3: %empty

   12 $@4: %empty

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC

   14 $@5: %empty

   15 $@6: %empty

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC

   17 $@7: %empty

   18 $@8: %empty

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC

   20 simpleVarDeclaration: TYPE ID
   21                     | TYPE LISTTYPE ID

   22 params: params param
   23       | param

   24 param: simpleVarDeclaration

   25 compoundStmt: STFUNC stmtList ENDFUNC

   26 stmtList: stmtList primitiveStmt
   27         | primitiveStmt

   28 primitiveStmt: exprStmt
   29              | compoundStmt
   30              | condStmt
   31              | iterStmt
   32              | returnStmt
   33              | inOp
   34              | outOp
   35              | varDeclaration

   36 exprStmt: expression SEMIC

   37 condStmt: IF PARENL simpleExp PARENR primitiveStmt
   38         | IF PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   40         | FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

   41 returnStmt: RETURN expression SEMIC

   42 listExp: appendOps
   43        | returnListOps
   44        | destroyHeadOps
   45        | mapFilterOps

   46 appendOps: ID APPEND ID

   47 returnListOps: returnListOp ID

   48 returnListOp: HEADLIST
   49             | TAILLIST

   50 destroyHeadOps: DESTROYHEAD ID

   51 mapFilterOps: ID MAP ID
   52             | ID FILTER ID

   53 expression: assignExp
   54           | simpleExp
   55           | listExp

   56 assignExp: ID ASSIGN expression

   57 simpleExp: binLogicalExp

   58 constOp: INTEGER
   59        | DECIMAL
   60        | NIL

   61 inOp: READ PARENL ID PARENR SEMIC

   62 outOp: WRITE PARENL outConst PARENR SEMIC
   63      | WRITELN PARENL outConst PARENR SEMIC

   64 outConst: STRING
   65         | simpleExp
   66         | listExp

   67 binLogicalExp: binLogicalExp binLogicalOp relationalOp
   68              | relationalExp

   69 binLogicalOp: OR
   70             | AND

   71 relationalExp: relationalExp relationalOp sumExp
   72              | sumExp

   73 relationalOp: SMALLER
   74             | GREATER
   75             | SMALLEQ
   76             | GREATEQ
   77             | EQUALS
   78             | DIFFERENT

   79 sumExp: sumExp sumOp mulExp
   80       | mulExp

   81 sumOp: ADD
   82      | SUB

   83 mulExp: mulExp mulOp factor
   84       | factor
   85       | sumOp factor

   86 mulOp: MULT
   87      | DIV

   88 factor: ID
   89       | fCall
   90       | PARENL simpleExp PARENR
   91       | constOp

   92 fCall: ID PARENL callParams PARENR
   93      | ID PARENL PARENR

   94 callParams: callParams COMMA simpleExp
   95           | simpleExp


Terminals, with rules where they appear

    $end (0) 0
    error <treeNode> (256) 4
    ID <str> (258) 10 13 16 19 20 21 46 47 50 51 52 56 61 88 92 93
    TYPE <str> (259) 10 13 16 19 20 21
    LISTTYPE <str> (260) 16 19 21
    STRING <str> (261) 64
    NIL <str> (262) 60
    INTEGER <integer> (263) 58
    DECIMAL <dec> (264) 59
    ADD <str> (265) 81
    SUB <str> (266) 82
    MULT <str> (267) 86
    DIV <str> (268) 87
    OR <str> (269) 69
    AND <str> (270) 70
    SMALLER <str> (271) 73
    GREATER <str> (272) 74
    SMALLEQ <str> (273) 75
    GREATEQ <str> (274) 76
    EQUALS <str> (275) 77
    DIFFERENT <str> (276) 78
    APPEND <str> (277) 46
    HEADLIST <str> (278) 48
    TAILLIST <str> (279) 49
    DESTROYHEAD <str> (280) 50
    FILTER <str> (281) 52
    ASSIGN <str> (282) 56
    MAP <str> (283) 51
    ELSE <str> (284) 38
    THEN <str> (285)
    IF <str> (286) 37 38
    FOR <str> (287) 39 40
    READ <str> (288) 61
    WRITE <str> (289) 62
    WRITELN <str> (290) 63
    RETURN <str> (291) 41
    SEMIC <str> (292) 7 36 39 40 41 61 62 63
    COMMA <str> (293) 94
    STFUNC <str> (294) 10 13 16 19 25
    ENDFUNC <str> (295) 10 13 16 19 25
    PARENL <str> (296) 10 13 16 19 37 38 39 40 61 62 63 90 92 93
    PARENR <str> (297) 10 13 16 19 37 38 39 40 61 62 63 90 92 93


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <treeNode> (44)
        on left: 1
        on right: 0
    declarationList <treeNode> (45)
        on left: 2 3 4
        on right: 1 2
    declaration <treeNode> (46)
        on left: 5 6
        on right: 2 3
    varDeclaration <treeNode> (47)
        on left: 7
        on right: 5 35
    funcDeclaration <treeNode> (48)
        on left: 10 13 16 19
        on right: 6
    $@1 (49)
        on left: 8
        on right: 10
    $@2 (50)
        on left: 9
        on right: 10
    $@3 (51)
        on left: 11
        on right: 13
    $@4 (52)
        on left: 12
        on right: 13
    $@5 (53)
        on left: 14
        on right: 16
    $@6 (54)
        on left: 15
        on right: 16
    $@7 (55)
        on left: 17
        on right: 19
    $@8 (56)
        on left: 18
        on right: 19
    simpleVarDeclaration <treeNode> (57)
        on left: 20 21
        on right: 7 24
    params <treeNode> (58)
        on left: 22 23
        on right: 10 16 22
    param <treeNode> (59)
        on left: 24
        on right: 22 23
    compoundStmt <treeNode> (60)
        on left: 25
        on right: 29
    stmtList <treeNode> (61)
        on left: 26 27
        on right: 10 13 16 19 25 26
    primitiveStmt <treeNode> (62)
        on left: 28 29 30 31 32 33 34 35
        on right: 26 27 37 38 39 40
    exprStmt <treeNode> (63)
        on left: 36
        on right: 28
    condStmt <treeNode> (64)
        on left: 37 38
        on right: 30
    iterStmt <treeNode> (65)
        on left: 39 40
        on right: 31
    returnStmt <treeNode> (66)
        on left: 41
        on right: 32
    listExp <treeNode> (67)
        on left: 42 43 44 45
        on right: 55 66
    appendOps <treeNode> (68)
        on left: 46
        on right: 42
    returnListOps <treeNode> (69)
        on left: 47
        on right: 43
    returnListOp <treeNode> (70)
        on left: 48 49
        on right: 47
    destroyHeadOps <treeNode> (71)
        on left: 50
        on right: 44
    mapFilterOps <treeNode> (72)
        on left: 51 52
        on right: 45
    expression <treeNode> (73)
        on left: 53 54 55
        on right: 36 41 56
    assignExp <treeNode> (74)
        on left: 56
        on right: 39 40 53
    simpleExp <treeNode> (75)
        on left: 57
        on right: 37 38 39 40 54 65 90 94 95
    constOp <treeNode> (76)
        on left: 58 59 60
        on right: 91
    inOp <treeNode> (77)
        on left: 61
        on right: 33
    outOp <treeNode> (78)
        on left: 62 63
        on right: 34
    outConst <treeNode> (79)
        on left: 64 65 66
        on right: 62 63
    binLogicalExp <treeNode> (80)
        on left: 67 68
        on right: 57 67
    binLogicalOp <treeNode> (81)
        on left: 69 70
        on right: 67
    relationalExp <treeNode> (82)
        on left: 71 72
        on right: 68 71
    relationalOp <treeNode> (83)
        on left: 73 74 75 76 77 78
        on right: 67 71
    sumExp <treeNode> (84)
        on left: 79 80
        on right: 71 72 79
    sumOp <treeNode> (85)
        on left: 81 82
        on right: 79 85
    mulExp <treeNode> (86)
        on left: 83 84 85
        on right: 79 80 83
    mulOp <treeNode> (87)
        on left: 86 87
        on right: 83
    factor <treeNode> (88)
        on left: 88 89 90 91
        on right: 83 84 85
    fCall <treeNode> (89)
        on left: 92 93
        on right: 89
    callParams <treeNode> (90)
        on left: 94 95
        on right: 92 94


State 0

    0 $accept: • program $end

    error  shift, and go to state 1
    TYPE   shift, and go to state 2

    program               go to state 3
    declarationList       go to state 4
    declaration           go to state 5
    varDeclaration        go to state 6
    funcDeclaration       go to state 7
    simpleVarDeclaration  go to state 8


State 1

    4 declarationList: error •

    $end  reduce using rule 4 (declarationList)
    TYPE  reduce using rule 4 (declarationList)


State 2

   10 funcDeclaration: TYPE • ID PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC
   13                | TYPE • ID PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC
   16                | TYPE • LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE • LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC
   20 simpleVarDeclaration: TYPE • ID
   21                     | TYPE • LISTTYPE ID

    ID        shift, and go to state 9
    LISTTYPE  shift, and go to state 10


State 3

    0 $accept: program • $end

    $end  shift, and go to state 11


State 4

    1 program: declarationList •
    2 declarationList: declarationList • declaration

    TYPE  shift, and go to state 2

    $end  reduce using rule 1 (program)

    declaration           go to state 12
    varDeclaration        go to state 6
    funcDeclaration       go to state 7
    simpleVarDeclaration  go to state 8


State 5

    3 declarationList: declaration •

    $end  reduce using rule 3 (declarationList)
    TYPE  reduce using rule 3 (declarationList)


State 6

    5 declaration: varDeclaration •

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 7

    6 declaration: funcDeclaration •

    $end  reduce using rule 6 (declaration)
    TYPE  reduce using rule 6 (declaration)


State 8

    7 varDeclaration: simpleVarDeclaration • SEMIC

    SEMIC  shift, and go to state 13


State 9

   10 funcDeclaration: TYPE ID • PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC
   13                | TYPE ID • PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC
   20 simpleVarDeclaration: TYPE ID •

    PARENL  shift, and go to state 14

    SEMIC  reduce using rule 20 (simpleVarDeclaration)


State 10

   16 funcDeclaration: TYPE LISTTYPE • ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE LISTTYPE • ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC
   21 simpleVarDeclaration: TYPE LISTTYPE • ID

    ID  shift, and go to state 15


State 11

    0 $accept: program $end •

    $default  accept


State 12

    2 declarationList: declarationList declaration •

    $end  reduce using rule 2 (declarationList)
    TYPE  reduce using rule 2 (declarationList)


State 13

    7 varDeclaration: simpleVarDeclaration SEMIC •

    $end  reduce using rule 7 (varDeclaration)
    TYPE  reduce using rule 7 (varDeclaration)


State 14

   10 funcDeclaration: TYPE ID PARENL • $@1 params PARENR STFUNC $@2 stmtList ENDFUNC
   13                | TYPE ID PARENL • $@3 PARENR STFUNC $@4 stmtList ENDFUNC

    TYPE    reduce using rule 8 ($@1)
    PARENR  reduce using rule 11 ($@3)

    $@1  go to state 16
    $@3  go to state 17


State 15

   16 funcDeclaration: TYPE LISTTYPE ID • PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE LISTTYPE ID • PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC
   21 simpleVarDeclaration: TYPE LISTTYPE ID •

    PARENL  shift, and go to state 18

    SEMIC  reduce using rule 21 (simpleVarDeclaration)


State 16

   10 funcDeclaration: TYPE ID PARENL $@1 • params PARENR STFUNC $@2 stmtList ENDFUNC

    TYPE  shift, and go to state 19

    simpleVarDeclaration  go to state 20
    params                go to state 21
    param                 go to state 22


State 17

   13 funcDeclaration: TYPE ID PARENL $@3 • PARENR STFUNC $@4 stmtList ENDFUNC

    PARENR  shift, and go to state 23


State 18

   16 funcDeclaration: TYPE LISTTYPE ID PARENL • $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE LISTTYPE ID PARENL • $@7 PARENR STFUNC $@8 stmtList ENDFUNC

    TYPE    reduce using rule 14 ($@5)
    PARENR  reduce using rule 17 ($@7)

    $@5  go to state 24
    $@7  go to state 25


State 19

   20 simpleVarDeclaration: TYPE • ID
   21                     | TYPE • LISTTYPE ID

    ID        shift, and go to state 26
    LISTTYPE  shift, and go to state 27


State 20

   24 param: simpleVarDeclaration •

    TYPE    reduce using rule 24 (param)
    PARENR  reduce using rule 24 (param)


State 21

   10 funcDeclaration: TYPE ID PARENL $@1 params • PARENR STFUNC $@2 stmtList ENDFUNC
   22 params: params • param

    TYPE    shift, and go to state 19
    PARENR  shift, and go to state 28

    simpleVarDeclaration  go to state 20
    param                 go to state 29


State 22

   23 params: param •

    TYPE    reduce using rule 23 (params)
    PARENR  reduce using rule 23 (params)


State 23

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR • STFUNC $@4 stmtList ENDFUNC

    STFUNC  shift, and go to state 30


State 24

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 • params PARENR STFUNC $@6 stmtList ENDFUNC

    TYPE  shift, and go to state 19

    simpleVarDeclaration  go to state 20
    params                go to state 31
    param                 go to state 22


State 25

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 • PARENR STFUNC $@8 stmtList ENDFUNC

    PARENR  shift, and go to state 32


State 26

   20 simpleVarDeclaration: TYPE ID •

    TYPE    reduce using rule 20 (simpleVarDeclaration)
    PARENR  reduce using rule 20 (simpleVarDeclaration)


State 27

   21 simpleVarDeclaration: TYPE LISTTYPE • ID

    ID  shift, and go to state 33


State 28

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR • STFUNC $@2 stmtList ENDFUNC

    STFUNC  shift, and go to state 34


State 29

   22 params: params param •

    TYPE    reduce using rule 22 (params)
    PARENR  reduce using rule 22 (params)


State 30

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC • $@4 stmtList ENDFUNC

    ID           reduce using rule 12 ($@4)
    TYPE         reduce using rule 12 ($@4)
    NIL          reduce using rule 12 ($@4)
    INTEGER      reduce using rule 12 ($@4)
    DECIMAL      reduce using rule 12 ($@4)
    ADD          reduce using rule 12 ($@4)
    SUB          reduce using rule 12 ($@4)
    HEADLIST     reduce using rule 12 ($@4)
    TAILLIST     reduce using rule 12 ($@4)
    DESTROYHEAD  reduce using rule 12 ($@4)
    IF           reduce using rule 12 ($@4)
    FOR          reduce using rule 12 ($@4)
    READ         reduce using rule 12 ($@4)
    WRITE        reduce using rule 12 ($@4)
    WRITELN      reduce using rule 12 ($@4)
    RETURN       reduce using rule 12 ($@4)
    STFUNC       reduce using rule 12 ($@4)
    PARENL       reduce using rule 12 ($@4)

    $@4  go to state 35


State 31

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params • PARENR STFUNC $@6 stmtList ENDFUNC
   22 params: params • param

    TYPE    shift, and go to state 19
    PARENR  shift, and go to state 36

    simpleVarDeclaration  go to state 20
    param                 go to state 29


State 32

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR • STFUNC $@8 stmtList ENDFUNC

    STFUNC  shift, and go to state 37


State 33

   21 simpleVarDeclaration: TYPE LISTTYPE ID •

    TYPE    reduce using rule 21 (simpleVarDeclaration)
    PARENR  reduce using rule 21 (simpleVarDeclaration)


State 34

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC • $@2 stmtList ENDFUNC

    ID           reduce using rule 9 ($@2)
    TYPE         reduce using rule 9 ($@2)
    NIL          reduce using rule 9 ($@2)
    INTEGER      reduce using rule 9 ($@2)
    DECIMAL      reduce using rule 9 ($@2)
    ADD          reduce using rule 9 ($@2)
    SUB          reduce using rule 9 ($@2)
    HEADLIST     reduce using rule 9 ($@2)
    TAILLIST     reduce using rule 9 ($@2)
    DESTROYHEAD  reduce using rule 9 ($@2)
    IF           reduce using rule 9 ($@2)
    FOR          reduce using rule 9 ($@2)
    READ         reduce using rule 9 ($@2)
    WRITE        reduce using rule 9 ($@2)
    WRITELN      reduce using rule 9 ($@2)
    RETURN       reduce using rule 9 ($@2)
    STFUNC       reduce using rule 9 ($@2)
    PARENL       reduce using rule 9 ($@2)

    $@2  go to state 38


State 35

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 • stmtList ENDFUNC

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    stmtList              go to state 58
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 36

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR • STFUNC $@6 stmtList ENDFUNC

    STFUNC  shift, and go to state 83


State 37

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC • $@8 stmtList ENDFUNC

    ID           reduce using rule 18 ($@8)
    TYPE         reduce using rule 18 ($@8)
    NIL          reduce using rule 18 ($@8)
    INTEGER      reduce using rule 18 ($@8)
    DECIMAL      reduce using rule 18 ($@8)
    ADD          reduce using rule 18 ($@8)
    SUB          reduce using rule 18 ($@8)
    HEADLIST     reduce using rule 18 ($@8)
    TAILLIST     reduce using rule 18 ($@8)
    DESTROYHEAD  reduce using rule 18 ($@8)
    IF           reduce using rule 18 ($@8)
    FOR          reduce using rule 18 ($@8)
    READ         reduce using rule 18 ($@8)
    WRITE        reduce using rule 18 ($@8)
    WRITELN      reduce using rule 18 ($@8)
    RETURN       reduce using rule 18 ($@8)
    STFUNC       reduce using rule 18 ($@8)
    PARENL       reduce using rule 18 ($@8)

    $@8  go to state 84


State 38

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 • stmtList ENDFUNC

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    stmtList              go to state 85
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 39

   46 appendOps: ID • APPEND ID
   51 mapFilterOps: ID • MAP ID
   52             | ID • FILTER ID
   56 assignExp: ID • ASSIGN expression
   88 factor: ID •
   92 fCall: ID • PARENL callParams PARENR
   93      | ID • PARENL PARENR

    APPEND  shift, and go to state 86
    FILTER  shift, and go to state 87
    ASSIGN  shift, and go to state 88
    MAP     shift, and go to state 89
    PARENL  shift, and go to state 90

    ADD        reduce using rule 88 (factor)
    SUB        reduce using rule 88 (factor)
    MULT       reduce using rule 88 (factor)
    DIV        reduce using rule 88 (factor)
    OR         reduce using rule 88 (factor)
    AND        reduce using rule 88 (factor)
    SMALLER    reduce using rule 88 (factor)
    GREATER    reduce using rule 88 (factor)
    SMALLEQ    reduce using rule 88 (factor)
    GREATEQ    reduce using rule 88 (factor)
    EQUALS     reduce using rule 88 (factor)
    DIFFERENT  reduce using rule 88 (factor)
    SEMIC      reduce using rule 88 (factor)


State 40

   60 constOp: NIL •

    ADD        reduce using rule 60 (constOp)
    SUB        reduce using rule 60 (constOp)
    MULT       reduce using rule 60 (constOp)
    DIV        reduce using rule 60 (constOp)
    OR         reduce using rule 60 (constOp)
    AND        reduce using rule 60 (constOp)
    SMALLER    reduce using rule 60 (constOp)
    GREATER    reduce using rule 60 (constOp)
    SMALLEQ    reduce using rule 60 (constOp)
    GREATEQ    reduce using rule 60 (constOp)
    EQUALS     reduce using rule 60 (constOp)
    DIFFERENT  reduce using rule 60 (constOp)
    SEMIC      reduce using rule 60 (constOp)


State 41

   58 constOp: INTEGER •

    ADD        reduce using rule 58 (constOp)
    SUB        reduce using rule 58 (constOp)
    MULT       reduce using rule 58 (constOp)
    DIV        reduce using rule 58 (constOp)
    OR         reduce using rule 58 (constOp)
    AND        reduce using rule 58 (constOp)
    SMALLER    reduce using rule 58 (constOp)
    GREATER    reduce using rule 58 (constOp)
    SMALLEQ    reduce using rule 58 (constOp)
    GREATEQ    reduce using rule 58 (constOp)
    EQUALS     reduce using rule 58 (constOp)
    DIFFERENT  reduce using rule 58 (constOp)
    SEMIC      reduce using rule 58 (constOp)


State 42

   59 constOp: DECIMAL •

    ADD        reduce using rule 59 (constOp)
    SUB        reduce using rule 59 (constOp)
    MULT       reduce using rule 59 (constOp)
    DIV        reduce using rule 59 (constOp)
    OR         reduce using rule 59 (constOp)
    AND        reduce using rule 59 (constOp)
    SMALLER    reduce using rule 59 (constOp)
    GREATER    reduce using rule 59 (constOp)
    SMALLEQ    reduce using rule 59 (constOp)
    GREATEQ    reduce using rule 59 (constOp)
    EQUALS     reduce using rule 59 (constOp)
    DIFFERENT  reduce using rule 59 (constOp)
    SEMIC      reduce using rule 59 (constOp)


State 43

   81 sumOp: ADD •

    ID       reduce using rule 81 (sumOp)
    NIL      reduce using rule 81 (sumOp)
    INTEGER  reduce using rule 81 (sumOp)
    DECIMAL  reduce using rule 81 (sumOp)
    PARENL   reduce using rule 81 (sumOp)


State 44

   82 sumOp: SUB •

    ID       reduce using rule 82 (sumOp)
    NIL      reduce using rule 82 (sumOp)
    INTEGER  reduce using rule 82 (sumOp)
    DECIMAL  reduce using rule 82 (sumOp)
    PARENL   reduce using rule 82 (sumOp)


State 45

   48 returnListOp: HEADLIST •

    ID  reduce using rule 48 (returnListOp)


State 46

   49 returnListOp: TAILLIST •

    ID  reduce using rule 49 (returnListOp)


State 47

   50 destroyHeadOps: DESTROYHEAD • ID

    ID  shift, and go to state 91


State 48

   37 condStmt: IF • PARENL simpleExp PARENR primitiveStmt
   38         | IF • PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt

    PARENL  shift, and go to state 92


State 49

   39 iterStmt: FOR • PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   40         | FOR • PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    PARENL  shift, and go to state 93


State 50

   61 inOp: READ • PARENL ID PARENR SEMIC

    PARENL  shift, and go to state 94


State 51

   62 outOp: WRITE • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 95


State 52

   63 outOp: WRITELN • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 96


State 53

   41 returnStmt: RETURN • expression SEMIC

    ID           shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    PARENL       shift, and go to state 55

    listExp         go to state 64
    appendOps       go to state 65
    returnListOps   go to state 66
    returnListOp    go to state 67
    destroyHeadOps  go to state 68
    mapFilterOps    go to state 69
    expression      go to state 97
    assignExp       go to state 71
    simpleExp       go to state 72
    constOp         go to state 73
    binLogicalExp   go to state 76
    relationalExp   go to state 77
    sumExp          go to state 78
    sumOp           go to state 79
    mulExp          go to state 80
    factor          go to state 81
    fCall           go to state 82


State 54

   25 compoundStmt: STFUNC • stmtList ENDFUNC

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    stmtList              go to state 98
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 55

   90 factor: PARENL • simpleExp PARENR

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 182

    simpleExp      go to state 100
    constOp        go to state 183
    binLogicalExp  go to state 184
    relationalExp  go to state 185
    sumExp         go to state 186
    sumOp          go to state 187
    mulExp         go to state 188
    factor         go to state 189
    fCall          go to state 190


State 56

   35 primitiveStmt: varDeclaration •

    ID           reduce using rule 35 (primitiveStmt)
    TYPE         reduce using rule 35 (primitiveStmt)
    NIL          reduce using rule 35 (primitiveStmt)
    INTEGER      reduce using rule 35 (primitiveStmt)
    DECIMAL      reduce using rule 35 (primitiveStmt)
    ADD          reduce using rule 35 (primitiveStmt)
    SUB          reduce using rule 35 (primitiveStmt)
    HEADLIST     reduce using rule 35 (primitiveStmt)
    TAILLIST     reduce using rule 35 (primitiveStmt)
    DESTROYHEAD  reduce using rule 35 (primitiveStmt)
    IF           reduce using rule 35 (primitiveStmt)
    FOR          reduce using rule 35 (primitiveStmt)
    READ         reduce using rule 35 (primitiveStmt)
    WRITE        reduce using rule 35 (primitiveStmt)
    WRITELN      reduce using rule 35 (primitiveStmt)
    RETURN       reduce using rule 35 (primitiveStmt)
    STFUNC       reduce using rule 35 (primitiveStmt)
    ENDFUNC      reduce using rule 35 (primitiveStmt)
    PARENL       reduce using rule 35 (primitiveStmt)


State 57

   29 primitiveStmt: compoundStmt •

    ID           reduce using rule 29 (primitiveStmt)
    TYPE         reduce using rule 29 (primitiveStmt)
    NIL          reduce using rule 29 (primitiveStmt)
    INTEGER      reduce using rule 29 (primitiveStmt)
    DECIMAL      reduce using rule 29 (primitiveStmt)
    ADD          reduce using rule 29 (primitiveStmt)
    SUB          reduce using rule 29 (primitiveStmt)
    HEADLIST     reduce using rule 29 (primitiveStmt)
    TAILLIST     reduce using rule 29 (primitiveStmt)
    DESTROYHEAD  reduce using rule 29 (primitiveStmt)
    IF           reduce using rule 29 (primitiveStmt)
    FOR          reduce using rule 29 (primitiveStmt)
    READ         reduce using rule 29 (primitiveStmt)
    WRITE        reduce using rule 29 (primitiveStmt)
    WRITELN      reduce using rule 29 (primitiveStmt)
    RETURN       reduce using rule 29 (primitiveStmt)
    STFUNC       reduce using rule 29 (primitiveStmt)
    ENDFUNC      reduce using rule 29 (primitiveStmt)
    PARENL       reduce using rule 29 (primitiveStmt)


State 58

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 stmtList • ENDFUNC
   26 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 101
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 102
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 59

   27 stmtList: primitiveStmt •

    ID           reduce using rule 27 (stmtList)
    TYPE         reduce using rule 27 (stmtList)
    NIL          reduce using rule 27 (stmtList)
    INTEGER      reduce using rule 27 (stmtList)
    DECIMAL      reduce using rule 27 (stmtList)
    ADD          reduce using rule 27 (stmtList)
    SUB          reduce using rule 27 (stmtList)
    HEADLIST     reduce using rule 27 (stmtList)
    TAILLIST     reduce using rule 27 (stmtList)
    DESTROYHEAD  reduce using rule 27 (stmtList)
    IF           reduce using rule 27 (stmtList)
    FOR          reduce using rule 27 (stmtList)
    READ         reduce using rule 27 (stmtList)
    WRITE        reduce using rule 27 (stmtList)
    WRITELN      reduce using rule 27 (stmtList)
    RETURN       reduce using rule 27 (stmtList)
    STFUNC       reduce using rule 27 (stmtList)
    ENDFUNC      reduce using rule 27 (stmtList)
    PARENL       reduce using rule 27 (stmtList)


State 60

   28 primitiveStmt: exprStmt •

    ID           reduce using rule 28 (primitiveStmt)
    TYPE         reduce using rule 28 (primitiveStmt)
    NIL          reduce using rule 28 (primitiveStmt)
    INTEGER      reduce using rule 28 (primitiveStmt)
    DECIMAL      reduce using rule 28 (primitiveStmt)
    ADD          reduce using rule 28 (primitiveStmt)
    SUB          reduce using rule 28 (primitiveStmt)
    HEADLIST     reduce using rule 28 (primitiveStmt)
    TAILLIST     reduce using rule 28 (primitiveStmt)
    DESTROYHEAD  reduce using rule 28 (primitiveStmt)
    IF           reduce using rule 28 (primitiveStmt)
    FOR          reduce using rule 28 (primitiveStmt)
    READ         reduce using rule 28 (primitiveStmt)
    WRITE        reduce using rule 28 (primitiveStmt)
    WRITELN      reduce using rule 28 (primitiveStmt)
    RETURN       reduce using rule 28 (primitiveStmt)
    STFUNC       reduce using rule 28 (primitiveStmt)
    ENDFUNC      reduce using rule 28 (primitiveStmt)
    PARENL       reduce using rule 28 (primitiveStmt)


State 61

   30 primitiveStmt: condStmt •

    ID           reduce using rule 30 (primitiveStmt)
    TYPE         reduce using rule 30 (primitiveStmt)
    NIL          reduce using rule 30 (primitiveStmt)
    INTEGER      reduce using rule 30 (primitiveStmt)
    DECIMAL      reduce using rule 30 (primitiveStmt)
    ADD          reduce using rule 30 (primitiveStmt)
    SUB          reduce using rule 30 (primitiveStmt)
    HEADLIST     reduce using rule 30 (primitiveStmt)
    TAILLIST     reduce using rule 30 (primitiveStmt)
    DESTROYHEAD  reduce using rule 30 (primitiveStmt)
    IF           reduce using rule 30 (primitiveStmt)
    FOR          reduce using rule 30 (primitiveStmt)
    READ         reduce using rule 30 (primitiveStmt)
    WRITE        reduce using rule 30 (primitiveStmt)
    WRITELN      reduce using rule 30 (primitiveStmt)
    RETURN       reduce using rule 30 (primitiveStmt)
    STFUNC       reduce using rule 30 (primitiveStmt)
    ENDFUNC      reduce using rule 30 (primitiveStmt)
    PARENL       reduce using rule 30 (primitiveStmt)


State 62

   31 primitiveStmt: iterStmt •

    ID           reduce using rule 31 (primitiveStmt)
    TYPE         reduce using rule 31 (primitiveStmt)
    NIL          reduce using rule 31 (primitiveStmt)
    INTEGER      reduce using rule 31 (primitiveStmt)
    DECIMAL      reduce using rule 31 (primitiveStmt)
    ADD          reduce using rule 31 (primitiveStmt)
    SUB          reduce using rule 31 (primitiveStmt)
    HEADLIST     reduce using rule 31 (primitiveStmt)
    TAILLIST     reduce using rule 31 (primitiveStmt)
    DESTROYHEAD  reduce using rule 31 (primitiveStmt)
    IF           reduce using rule 31 (primitiveStmt)
    FOR          reduce using rule 31 (primitiveStmt)
    READ         reduce using rule 31 (primitiveStmt)
    WRITE        reduce using rule 31 (primitiveStmt)
    WRITELN      reduce using rule 31 (primitiveStmt)
    RETURN       reduce using rule 31 (primitiveStmt)
    STFUNC       reduce using rule 31 (primitiveStmt)
    ENDFUNC      reduce using rule 31 (primitiveStmt)
    PARENL       reduce using rule 31 (primitiveStmt)


State 63

   32 primitiveStmt: returnStmt •

    ID           reduce using rule 32 (primitiveStmt)
    TYPE         reduce using rule 32 (primitiveStmt)
    NIL          reduce using rule 32 (primitiveStmt)
    INTEGER      reduce using rule 32 (primitiveStmt)
    DECIMAL      reduce using rule 32 (primitiveStmt)
    ADD          reduce using rule 32 (primitiveStmt)
    SUB          reduce using rule 32 (primitiveStmt)
    HEADLIST     reduce using rule 32 (primitiveStmt)
    TAILLIST     reduce using rule 32 (primitiveStmt)
    DESTROYHEAD  reduce using rule 32 (primitiveStmt)
    IF           reduce using rule 32 (primitiveStmt)
    FOR          reduce using rule 32 (primitiveStmt)
    READ         reduce using rule 32 (primitiveStmt)
    WRITE        reduce using rule 32 (primitiveStmt)
    WRITELN      reduce using rule 32 (primitiveStmt)
    RETURN       reduce using rule 32 (primitiveStmt)
    STFUNC       reduce using rule 32 (primitiveStmt)
    ENDFUNC      reduce using rule 32 (primitiveStmt)
    PARENL       reduce using rule 32 (primitiveStmt)


State 64

   55 expression: listExp •

    SEMIC  reduce using rule 55 (expression)


State 65

   42 listExp: appendOps •

    SEMIC  reduce using rule 42 (listExp)


State 66

   43 listExp: returnListOps •

    SEMIC  reduce using rule 43 (listExp)


State 67

   47 returnListOps: returnListOp • ID

    ID  shift, and go to state 103


State 68

   44 listExp: destroyHeadOps •

    SEMIC  reduce using rule 44 (listExp)


State 69

   45 listExp: mapFilterOps •

    SEMIC  reduce using rule 45 (listExp)


State 70

   36 exprStmt: expression • SEMIC

    SEMIC  shift, and go to state 104


State 71

   53 expression: assignExp •

    SEMIC  reduce using rule 53 (expression)


State 72

   54 expression: simpleExp •

    SEMIC  reduce using rule 54 (expression)


State 73

   91 factor: constOp •

    ADD        reduce using rule 91 (factor)
    SUB        reduce using rule 91 (factor)
    MULT       reduce using rule 91 (factor)
    DIV        reduce using rule 91 (factor)
    OR         reduce using rule 91 (factor)
    AND        reduce using rule 91 (factor)
    SMALLER    reduce using rule 91 (factor)
    GREATER    reduce using rule 91 (factor)
    SMALLEQ    reduce using rule 91 (factor)
    GREATEQ    reduce using rule 91 (factor)
    EQUALS     reduce using rule 91 (factor)
    DIFFERENT  reduce using rule 91 (factor)
    SEMIC      reduce using rule 91 (factor)


State 74

   33 primitiveStmt: inOp •

    ID           reduce using rule 33 (primitiveStmt)
    TYPE         reduce using rule 33 (primitiveStmt)
    NIL          reduce using rule 33 (primitiveStmt)
    INTEGER      reduce using rule 33 (primitiveStmt)
    DECIMAL      reduce using rule 33 (primitiveStmt)
    ADD          reduce using rule 33 (primitiveStmt)
    SUB          reduce using rule 33 (primitiveStmt)
    HEADLIST     reduce using rule 33 (primitiveStmt)
    TAILLIST     reduce using rule 33 (primitiveStmt)
    DESTROYHEAD  reduce using rule 33 (primitiveStmt)
    IF           reduce using rule 33 (primitiveStmt)
    FOR          reduce using rule 33 (primitiveStmt)
    READ         reduce using rule 33 (primitiveStmt)
    WRITE        reduce using rule 33 (primitiveStmt)
    WRITELN      reduce using rule 33 (primitiveStmt)
    RETURN       reduce using rule 33 (primitiveStmt)
    STFUNC       reduce using rule 33 (primitiveStmt)
    ENDFUNC      reduce using rule 33 (primitiveStmt)
    PARENL       reduce using rule 33 (primitiveStmt)


State 75

   34 primitiveStmt: outOp •

    ID           reduce using rule 34 (primitiveStmt)
    TYPE         reduce using rule 34 (primitiveStmt)
    NIL          reduce using rule 34 (primitiveStmt)
    INTEGER      reduce using rule 34 (primitiveStmt)
    DECIMAL      reduce using rule 34 (primitiveStmt)
    ADD          reduce using rule 34 (primitiveStmt)
    SUB          reduce using rule 34 (primitiveStmt)
    HEADLIST     reduce using rule 34 (primitiveStmt)
    TAILLIST     reduce using rule 34 (primitiveStmt)
    DESTROYHEAD  reduce using rule 34 (primitiveStmt)
    IF           reduce using rule 34 (primitiveStmt)
    FOR          reduce using rule 34 (primitiveStmt)
    READ         reduce using rule 34 (primitiveStmt)
    WRITE        reduce using rule 34 (primitiveStmt)
    WRITELN      reduce using rule 34 (primitiveStmt)
    RETURN       reduce using rule 34 (primitiveStmt)
    STFUNC       reduce using rule 34 (primitiveStmt)
    ENDFUNC      reduce using rule 34 (primitiveStmt)
    PARENL       reduce using rule 34 (primitiveStmt)


State 76

   57 simpleExp: binLogicalExp •
   67 binLogicalExp: binLogicalExp • binLogicalOp relationalOp

    OR   shift, and go to state 105
    AND  shift, and go to state 106

    SEMIC  reduce using rule 57 (simpleExp)

    binLogicalOp  go to state 107


State 77

   68 binLogicalExp: relationalExp •
   71 relationalExp: relationalExp • relationalOp sumExp

    SMALLER    shift, and go to state 108
    GREATER    shift, and go to state 109
    SMALLEQ    shift, and go to state 110
    GREATEQ    shift, and go to state 111
    EQUALS     shift, and go to state 112
    DIFFERENT  shift, and go to state 113

    OR     reduce using rule 68 (binLogicalExp)
    AND    reduce using rule 68 (binLogicalExp)
    SEMIC  reduce using rule 68 (binLogicalExp)

    relationalOp  go to state 114


State 78

   72 relationalExp: sumExp •
   79 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 191
    SUB  shift, and go to state 192

    OR         reduce using rule 72 (relationalExp)
    AND        reduce using rule 72 (relationalExp)
    SMALLER    reduce using rule 72 (relationalExp)
    GREATER    reduce using rule 72 (relationalExp)
    SMALLEQ    reduce using rule 72 (relationalExp)
    GREATEQ    reduce using rule 72 (relationalExp)
    EQUALS     reduce using rule 72 (relationalExp)
    DIFFERENT  reduce using rule 72 (relationalExp)
    SEMIC      reduce using rule 72 (relationalExp)

    sumOp  go to state 115


State 79

   85 mulExp: sumOp • factor

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    PARENL   shift, and go to state 55

    constOp  go to state 73
    factor   go to state 116
    fCall    go to state 82


State 80

   80 sumExp: mulExp •
   83 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 117
    DIV   shift, and go to state 118

    ADD        reduce using rule 80 (sumExp)
    SUB        reduce using rule 80 (sumExp)
    OR         reduce using rule 80 (sumExp)
    AND        reduce using rule 80 (sumExp)
    SMALLER    reduce using rule 80 (sumExp)
    GREATER    reduce using rule 80 (sumExp)
    SMALLEQ    reduce using rule 80 (sumExp)
    GREATEQ    reduce using rule 80 (sumExp)
    EQUALS     reduce using rule 80 (sumExp)
    DIFFERENT  reduce using rule 80 (sumExp)
    SEMIC      reduce using rule 80 (sumExp)

    mulOp  go to state 119


State 81

   84 mulExp: factor •

    ADD        reduce using rule 84 (mulExp)
    SUB        reduce using rule 84 (mulExp)
    MULT       reduce using rule 84 (mulExp)
    DIV        reduce using rule 84 (mulExp)
    OR         reduce using rule 84 (mulExp)
    AND        reduce using rule 84 (mulExp)
    SMALLER    reduce using rule 84 (mulExp)
    GREATER    reduce using rule 84 (mulExp)
    SMALLEQ    reduce using rule 84 (mulExp)
    GREATEQ    reduce using rule 84 (mulExp)
    EQUALS     reduce using rule 84 (mulExp)
    DIFFERENT  reduce using rule 84 (mulExp)
    SEMIC      reduce using rule 84 (mulExp)


State 82

   89 factor: fCall •

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    SEMIC      reduce using rule 89 (factor)


State 83

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC • $@6 stmtList ENDFUNC

    ID           reduce using rule 15 ($@6)
    TYPE         reduce using rule 15 ($@6)
    NIL          reduce using rule 15 ($@6)
    INTEGER      reduce using rule 15 ($@6)
    DECIMAL      reduce using rule 15 ($@6)
    ADD          reduce using rule 15 ($@6)
    SUB          reduce using rule 15 ($@6)
    HEADLIST     reduce using rule 15 ($@6)
    TAILLIST     reduce using rule 15 ($@6)
    DESTROYHEAD  reduce using rule 15 ($@6)
    IF           reduce using rule 15 ($@6)
    FOR          reduce using rule 15 ($@6)
    READ         reduce using rule 15 ($@6)
    WRITE        reduce using rule 15 ($@6)
    WRITELN      reduce using rule 15 ($@6)
    RETURN       reduce using rule 15 ($@6)
    STFUNC       reduce using rule 15 ($@6)
    PARENL       reduce using rule 15 ($@6)

    $@6  go to state 120


State 84

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 • stmtList ENDFUNC

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    stmtList              go to state 121
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 85

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 stmtList • ENDFUNC
   26 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 122
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 102
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 86

   46 appendOps: ID APPEND • ID

    ID  shift, and go to state 123


State 87

   52 mapFilterOps: ID FILTER • ID

    ID  shift, and go to state 124


State 88

   56 assignExp: ID ASSIGN • expression

    ID           shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    PARENL       shift, and go to state 55

    listExp         go to state 64
    appendOps       go to state 65
    returnListOps   go to state 66
    returnListOp    go to state 67
    destroyHeadOps  go to state 68
    mapFilterOps    go to state 69
    expression      go to state 125
    assignExp       go to state 71
    simpleExp       go to state 72
    constOp         go to state 73
    binLogicalExp   go to state 76
    relationalExp   go to state 77
    sumExp          go to state 78
    sumOp           go to state 79
    mulExp          go to state 80
    factor          go to state 81
    fCall           go to state 82


State 89

   51 mapFilterOps: ID MAP • ID

    ID  shift, and go to state 126


State 90

   92 fCall: ID PARENL • callParams PARENR
   93      | ID PARENL • PARENR

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 198
    PARENR   shift, and go to state 127

    simpleExp      go to state 128
    constOp        go to state 199
    binLogicalExp  go to state 200
    relationalExp  go to state 201
    sumExp         go to state 202
    sumOp          go to state 203
    mulExp         go to state 204
    factor         go to state 205
    fCall          go to state 206
    callParams     go to state 129


State 91

   50 destroyHeadOps: DESTROYHEAD ID •

    SEMIC  reduce using rule 50 (destroyHeadOps)


State 92

   37 condStmt: IF PARENL • simpleExp PARENR primitiveStmt
   38         | IF PARENL • simpleExp PARENR primitiveStmt ELSE primitiveStmt

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 182

    simpleExp      go to state 130
    constOp        go to state 183
    binLogicalExp  go to state 184
    relationalExp  go to state 185
    sumExp         go to state 186
    sumOp          go to state 187
    mulExp         go to state 188
    factor         go to state 189
    fCall          go to state 190


State 93

   39 iterStmt: FOR PARENL • assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   40         | FOR PARENL • simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 131
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    assignExp      go to state 132
    simpleExp      go to state 133
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 94

   61 inOp: READ PARENL • ID PARENR SEMIC

    ID  shift, and go to state 134


State 95

   62 outOp: WRITE PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 135
    STRING       shift, and go to state 136
    NIL          shift, and go to state 179
    INTEGER      shift, and go to state 180
    DECIMAL      shift, and go to state 181
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 207
    PARENL       shift, and go to state 182

    listExp         go to state 137
    appendOps       go to state 208
    returnListOps   go to state 209
    returnListOp    go to state 210
    destroyHeadOps  go to state 211
    mapFilterOps    go to state 212
    simpleExp       go to state 138
    constOp         go to state 183
    outConst        go to state 139
    binLogicalExp   go to state 184
    relationalExp   go to state 185
    sumExp          go to state 186
    sumOp           go to state 187
    mulExp          go to state 188
    factor          go to state 189
    fCall           go to state 190


State 96

   63 outOp: WRITELN PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 135
    STRING       shift, and go to state 136
    NIL          shift, and go to state 179
    INTEGER      shift, and go to state 180
    DECIMAL      shift, and go to state 181
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 207
    PARENL       shift, and go to state 182

    listExp         go to state 137
    appendOps       go to state 208
    returnListOps   go to state 209
    returnListOp    go to state 210
    destroyHeadOps  go to state 211
    mapFilterOps    go to state 212
    simpleExp       go to state 138
    constOp         go to state 183
    outConst        go to state 140
    binLogicalExp   go to state 184
    relationalExp   go to state 185
    sumExp          go to state 186
    sumOp           go to state 187
    mulExp          go to state 188
    factor          go to state 189
    fCall           go to state 190


State 97

   41 returnStmt: RETURN expression • SEMIC

    SEMIC  shift, and go to state 141


State 98

   25 compoundStmt: STFUNC stmtList • ENDFUNC
   26 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 142
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 102
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 99

   88 factor: ID •
   92 fCall: ID • PARENL callParams PARENR
   93      | ID • PARENL PARENR

    PARENL  shift, and go to state 213

    ADD        reduce using rule 88 (factor)
    SUB        reduce using rule 88 (factor)
    MULT       reduce using rule 88 (factor)
    DIV        reduce using rule 88 (factor)
    OR         reduce using rule 88 (factor)
    AND        reduce using rule 88 (factor)
    SMALLER    reduce using rule 88 (factor)
    GREATER    reduce using rule 88 (factor)
    SMALLEQ    reduce using rule 88 (factor)
    GREATEQ    reduce using rule 88 (factor)
    EQUALS     reduce using rule 88 (factor)
    DIFFERENT  reduce using rule 88 (factor)
    PARENR     reduce using rule 88 (factor)


State 100

   90 factor: PARENL simpleExp • PARENR

    PARENR  shift, and go to state 143


State 101

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC •

    $end  reduce using rule 13 (funcDeclaration)
    TYPE  reduce using rule 13 (funcDeclaration)


State 102

   26 stmtList: stmtList primitiveStmt •

    ID           reduce using rule 26 (stmtList)
    TYPE         reduce using rule 26 (stmtList)
    NIL          reduce using rule 26 (stmtList)
    INTEGER      reduce using rule 26 (stmtList)
    DECIMAL      reduce using rule 26 (stmtList)
    ADD          reduce using rule 26 (stmtList)
    SUB          reduce using rule 26 (stmtList)
    HEADLIST     reduce using rule 26 (stmtList)
    TAILLIST     reduce using rule 26 (stmtList)
    DESTROYHEAD  reduce using rule 26 (stmtList)
    IF           reduce using rule 26 (stmtList)
    FOR          reduce using rule 26 (stmtList)
    READ         reduce using rule 26 (stmtList)
    WRITE        reduce using rule 26 (stmtList)
    WRITELN      reduce using rule 26 (stmtList)
    RETURN       reduce using rule 26 (stmtList)
    STFUNC       reduce using rule 26 (stmtList)
    ENDFUNC      reduce using rule 26 (stmtList)
    PARENL       reduce using rule 26 (stmtList)


State 103

   47 returnListOps: returnListOp ID •

    SEMIC  reduce using rule 47 (returnListOps)


State 104

   36 exprStmt: expression SEMIC •

    ID           reduce using rule 36 (exprStmt)
    TYPE         reduce using rule 36 (exprStmt)
    NIL          reduce using rule 36 (exprStmt)
    INTEGER      reduce using rule 36 (exprStmt)
    DECIMAL      reduce using rule 36 (exprStmt)
    ADD          reduce using rule 36 (exprStmt)
    SUB          reduce using rule 36 (exprStmt)
    HEADLIST     reduce using rule 36 (exprStmt)
    TAILLIST     reduce using rule 36 (exprStmt)
    DESTROYHEAD  reduce using rule 36 (exprStmt)
    IF           reduce using rule 36 (exprStmt)
    FOR          reduce using rule 36 (exprStmt)
    READ         reduce using rule 36 (exprStmt)
    WRITE        reduce using rule 36 (exprStmt)
    WRITELN      reduce using rule 36 (exprStmt)
    RETURN       reduce using rule 36 (exprStmt)
    STFUNC       reduce using rule 36 (exprStmt)
    ENDFUNC      reduce using rule 36 (exprStmt)
    PARENL       reduce using rule 36 (exprStmt)


State 105

   69 binLogicalOp: OR •

    SMALLER    reduce using rule 69 (binLogicalOp)
    GREATER    reduce using rule 69 (binLogicalOp)
    SMALLEQ    reduce using rule 69 (binLogicalOp)
    GREATEQ    reduce using rule 69 (binLogicalOp)
    EQUALS     reduce using rule 69 (binLogicalOp)
    DIFFERENT  reduce using rule 69 (binLogicalOp)


State 106

   70 binLogicalOp: AND •

    SMALLER    reduce using rule 70 (binLogicalOp)
    GREATER    reduce using rule 70 (binLogicalOp)
    SMALLEQ    reduce using rule 70 (binLogicalOp)
    GREATEQ    reduce using rule 70 (binLogicalOp)
    EQUALS     reduce using rule 70 (binLogicalOp)
    DIFFERENT  reduce using rule 70 (binLogicalOp)


State 107

   67 binLogicalExp: binLogicalExp binLogicalOp • relationalOp

    SMALLER    shift, and go to state 214
    GREATER    shift, and go to state 215
    SMALLEQ    shift, and go to state 216
    GREATEQ    shift, and go to state 217
    EQUALS     shift, and go to state 218
    DIFFERENT  shift, and go to state 219

    relationalOp  go to state 144


State 108

   73 relationalOp: SMALLER •

    ID       reduce using rule 73 (relationalOp)
    NIL      reduce using rule 73 (relationalOp)
    INTEGER  reduce using rule 73 (relationalOp)
    DECIMAL  reduce using rule 73 (relationalOp)
    ADD      reduce using rule 73 (relationalOp)
    SUB      reduce using rule 73 (relationalOp)
    PARENL   reduce using rule 73 (relationalOp)


State 109

   74 relationalOp: GREATER •

    ID       reduce using rule 74 (relationalOp)
    NIL      reduce using rule 74 (relationalOp)
    INTEGER  reduce using rule 74 (relationalOp)
    DECIMAL  reduce using rule 74 (relationalOp)
    ADD      reduce using rule 74 (relationalOp)
    SUB      reduce using rule 74 (relationalOp)
    PARENL   reduce using rule 74 (relationalOp)


State 110

   75 relationalOp: SMALLEQ •

    ID       reduce using rule 75 (relationalOp)
    NIL      reduce using rule 75 (relationalOp)
    INTEGER  reduce using rule 75 (relationalOp)
    DECIMAL  reduce using rule 75 (relationalOp)
    ADD      reduce using rule 75 (relationalOp)
    SUB      reduce using rule 75 (relationalOp)
    PARENL   reduce using rule 75 (relationalOp)


State 111

   76 relationalOp: GREATEQ •

    ID       reduce using rule 76 (relationalOp)
    NIL      reduce using rule 76 (relationalOp)
    INTEGER  reduce using rule 76 (relationalOp)
    DECIMAL  reduce using rule 76 (relationalOp)
    ADD      reduce using rule 76 (relationalOp)
    SUB      reduce using rule 76 (relationalOp)
    PARENL   reduce using rule 76 (relationalOp)


State 112

   77 relationalOp: EQUALS •

    ID       reduce using rule 77 (relationalOp)
    NIL      reduce using rule 77 (relationalOp)
    INTEGER  reduce using rule 77 (relationalOp)
    DECIMAL  reduce using rule 77 (relationalOp)
    ADD      reduce using rule 77 (relationalOp)
    SUB      reduce using rule 77 (relationalOp)
    PARENL   reduce using rule 77 (relationalOp)


State 113

   78 relationalOp: DIFFERENT •

    ID       reduce using rule 78 (relationalOp)
    NIL      reduce using rule 78 (relationalOp)
    INTEGER  reduce using rule 78 (relationalOp)
    DECIMAL  reduce using rule 78 (relationalOp)
    ADD      reduce using rule 78 (relationalOp)
    SUB      reduce using rule 78 (relationalOp)
    PARENL   reduce using rule 78 (relationalOp)


State 114

   71 relationalExp: relationalExp relationalOp • sumExp

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    constOp  go to state 73
    sumExp   go to state 145
    sumOp    go to state 79
    mulExp   go to state 80
    factor   go to state 81
    fCall    go to state 82


State 115

   79 sumExp: sumExp sumOp • mulExp

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    constOp  go to state 73
    sumOp    go to state 79
    mulExp   go to state 146
    factor   go to state 81
    fCall    go to state 82


State 116

   85 mulExp: sumOp factor •

    ADD        reduce using rule 85 (mulExp)
    SUB        reduce using rule 85 (mulExp)
    MULT       reduce using rule 85 (mulExp)
    DIV        reduce using rule 85 (mulExp)
    OR         reduce using rule 85 (mulExp)
    AND        reduce using rule 85 (mulExp)
    SMALLER    reduce using rule 85 (mulExp)
    GREATER    reduce using rule 85 (mulExp)
    SMALLEQ    reduce using rule 85 (mulExp)
    GREATEQ    reduce using rule 85 (mulExp)
    EQUALS     reduce using rule 85 (mulExp)
    DIFFERENT  reduce using rule 85 (mulExp)
    SEMIC      reduce using rule 85 (mulExp)


State 117

   86 mulOp: MULT •

    ID       reduce using rule 86 (mulOp)
    NIL      reduce using rule 86 (mulOp)
    INTEGER  reduce using rule 86 (mulOp)
    DECIMAL  reduce using rule 86 (mulOp)
    PARENL   reduce using rule 86 (mulOp)


State 118

   87 mulOp: DIV •

    ID       reduce using rule 87 (mulOp)
    NIL      reduce using rule 87 (mulOp)
    INTEGER  reduce using rule 87 (mulOp)
    DECIMAL  reduce using rule 87 (mulOp)
    PARENL   reduce using rule 87 (mulOp)


State 119

   83 mulExp: mulExp mulOp • factor

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    PARENL   shift, and go to state 55

    constOp  go to state 73
    factor   go to state 147
    fCall    go to state 82


State 120

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 • stmtList ENDFUNC

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    stmtList              go to state 148
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 121

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList • ENDFUNC
   26 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 149
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 102
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 122

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC •

    $end  reduce using rule 10 (funcDeclaration)
    TYPE  reduce using rule 10 (funcDeclaration)


State 123

   46 appendOps: ID APPEND ID •

    SEMIC  reduce using rule 46 (appendOps)


State 124

   52 mapFilterOps: ID FILTER ID •

    SEMIC  reduce using rule 52 (mapFilterOps)


State 125

   56 assignExp: ID ASSIGN expression •

    SEMIC  reduce using rule 56 (assignExp)


State 126

   51 mapFilterOps: ID MAP ID •

    SEMIC  reduce using rule 51 (mapFilterOps)


State 127

   93 fCall: ID PARENL PARENR •

    ADD        reduce using rule 93 (fCall)
    SUB        reduce using rule 93 (fCall)
    MULT       reduce using rule 93 (fCall)
    DIV        reduce using rule 93 (fCall)
    OR         reduce using rule 93 (fCall)
    AND        reduce using rule 93 (fCall)
    SMALLER    reduce using rule 93 (fCall)
    GREATER    reduce using rule 93 (fCall)
    SMALLEQ    reduce using rule 93 (fCall)
    GREATEQ    reduce using rule 93 (fCall)
    EQUALS     reduce using rule 93 (fCall)
    DIFFERENT  reduce using rule 93 (fCall)
    SEMIC      reduce using rule 93 (fCall)


State 128

   95 callParams: simpleExp •

    COMMA   reduce using rule 95 (callParams)
    PARENR  reduce using rule 95 (callParams)


State 129

   92 fCall: ID PARENL callParams • PARENR
   94 callParams: callParams • COMMA simpleExp

    COMMA   shift, and go to state 150
    PARENR  shift, and go to state 151


State 130

   37 condStmt: IF PARENL simpleExp • PARENR primitiveStmt
   38         | IF PARENL simpleExp • PARENR primitiveStmt ELSE primitiveStmt

    PARENR  shift, and go to state 152


State 131

   56 assignExp: ID • ASSIGN expression
   88 factor: ID •
   92 fCall: ID • PARENL callParams PARENR
   93      | ID • PARENL PARENR

    ASSIGN  shift, and go to state 88
    PARENL  shift, and go to state 90

    ADD        reduce using rule 88 (factor)
    SUB        reduce using rule 88 (factor)
    MULT       reduce using rule 88 (factor)
    DIV        reduce using rule 88 (factor)
    OR         reduce using rule 88 (factor)
    AND        reduce using rule 88 (factor)
    SMALLER    reduce using rule 88 (factor)
    GREATER    reduce using rule 88 (factor)
    SMALLEQ    reduce using rule 88 (factor)
    GREATEQ    reduce using rule 88 (factor)
    EQUALS     reduce using rule 88 (factor)
    DIFFERENT  reduce using rule 88 (factor)
    SEMIC      reduce using rule 88 (factor)


State 132

   39 iterStmt: FOR PARENL assignExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 153


State 133

   40 iterStmt: FOR PARENL simpleExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 154


State 134

   61 inOp: READ PARENL ID • PARENR SEMIC

    PARENR  shift, and go to state 155


State 135

   46 appendOps: ID • APPEND ID
   51 mapFilterOps: ID • MAP ID
   52             | ID • FILTER ID
   88 factor: ID •
   92 fCall: ID • PARENL callParams PARENR
   93      | ID • PARENL PARENR

    APPEND  shift, and go to state 220
    FILTER  shift, and go to state 221
    MAP     shift, and go to state 222
    PARENL  shift, and go to state 213

    ADD        reduce using rule 88 (factor)
    SUB        reduce using rule 88 (factor)
    MULT       reduce using rule 88 (factor)
    DIV        reduce using rule 88 (factor)
    OR         reduce using rule 88 (factor)
    AND        reduce using rule 88 (factor)
    SMALLER    reduce using rule 88 (factor)
    GREATER    reduce using rule 88 (factor)
    SMALLEQ    reduce using rule 88 (factor)
    GREATEQ    reduce using rule 88 (factor)
    EQUALS     reduce using rule 88 (factor)
    DIFFERENT  reduce using rule 88 (factor)
    PARENR     reduce using rule 88 (factor)


State 136

   64 outConst: STRING •

    PARENR  reduce using rule 64 (outConst)


State 137

   66 outConst: listExp •

    PARENR  reduce using rule 66 (outConst)


State 138

   65 outConst: simpleExp •

    PARENR  reduce using rule 65 (outConst)


State 139

   62 outOp: WRITE PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 156


State 140

   63 outOp: WRITELN PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 157


State 141

   41 returnStmt: RETURN expression SEMIC •

    ID           reduce using rule 41 (returnStmt)
    TYPE         reduce using rule 41 (returnStmt)
    NIL          reduce using rule 41 (returnStmt)
    INTEGER      reduce using rule 41 (returnStmt)
    DECIMAL      reduce using rule 41 (returnStmt)
    ADD          reduce using rule 41 (returnStmt)
    SUB          reduce using rule 41 (returnStmt)
    HEADLIST     reduce using rule 41 (returnStmt)
    TAILLIST     reduce using rule 41 (returnStmt)
    DESTROYHEAD  reduce using rule 41 (returnStmt)
    IF           reduce using rule 41 (returnStmt)
    FOR          reduce using rule 41 (returnStmt)
    READ         reduce using rule 41 (returnStmt)
    WRITE        reduce using rule 41 (returnStmt)
    WRITELN      reduce using rule 41 (returnStmt)
    RETURN       reduce using rule 41 (returnStmt)
    STFUNC       reduce using rule 41 (returnStmt)
    ENDFUNC      reduce using rule 41 (returnStmt)
    PARENL       reduce using rule 41 (returnStmt)


State 142

   25 compoundStmt: STFUNC stmtList ENDFUNC •

    ID           reduce using rule 25 (compoundStmt)
    TYPE         reduce using rule 25 (compoundStmt)
    NIL          reduce using rule 25 (compoundStmt)
    INTEGER      reduce using rule 25 (compoundStmt)
    DECIMAL      reduce using rule 25 (compoundStmt)
    ADD          reduce using rule 25 (compoundStmt)
    SUB          reduce using rule 25 (compoundStmt)
    HEADLIST     reduce using rule 25 (compoundStmt)
    TAILLIST     reduce using rule 25 (compoundStmt)
    DESTROYHEAD  reduce using rule 25 (compoundStmt)
    IF           reduce using rule 25 (compoundStmt)
    FOR          reduce using rule 25 (compoundStmt)
    READ         reduce using rule 25 (compoundStmt)
    WRITE        reduce using rule 25 (compoundStmt)
    WRITELN      reduce using rule 25 (compoundStmt)
    RETURN       reduce using rule 25 (compoundStmt)
    STFUNC       reduce using rule 25 (compoundStmt)
    ENDFUNC      reduce using rule 25 (compoundStmt)
    PARENL       reduce using rule 25 (compoundStmt)


State 143

   90 factor: PARENL simpleExp PARENR •

    ADD        reduce using rule 90 (factor)
    SUB        reduce using rule 90 (factor)
    MULT       reduce using rule 90 (factor)
    DIV        reduce using rule 90 (factor)
    OR         reduce using rule 90 (factor)
    AND        reduce using rule 90 (factor)
    SMALLER    reduce using rule 90 (factor)
    GREATER    reduce using rule 90 (factor)
    SMALLEQ    reduce using rule 90 (factor)
    GREATEQ    reduce using rule 90 (factor)
    EQUALS     reduce using rule 90 (factor)
    DIFFERENT  reduce using rule 90 (factor)
    SEMIC      reduce using rule 90 (factor)


State 144

   67 binLogicalExp: binLogicalExp binLogicalOp relationalOp •

    OR     reduce using rule 67 (binLogicalExp)
    AND    reduce using rule 67 (binLogicalExp)
    SEMIC  reduce using rule 67 (binLogicalExp)


State 145

   71 relationalExp: relationalExp relationalOp sumExp •
   79 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 191
    SUB  shift, and go to state 192

    OR         reduce using rule 71 (relationalExp)
    AND        reduce using rule 71 (relationalExp)
    SMALLER    reduce using rule 71 (relationalExp)
    GREATER    reduce using rule 71 (relationalExp)
    SMALLEQ    reduce using rule 71 (relationalExp)
    GREATEQ    reduce using rule 71 (relationalExp)
    EQUALS     reduce using rule 71 (relationalExp)
    DIFFERENT  reduce using rule 71 (relationalExp)
    SEMIC      reduce using rule 71 (relationalExp)

    sumOp  go to state 115


State 146

   79 sumExp: sumExp sumOp mulExp •
   83 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 117
    DIV   shift, and go to state 118

    ADD        reduce using rule 79 (sumExp)
    SUB        reduce using rule 79 (sumExp)
    OR         reduce using rule 79 (sumExp)
    AND        reduce using rule 79 (sumExp)
    SMALLER    reduce using rule 79 (sumExp)
    GREATER    reduce using rule 79 (sumExp)
    SMALLEQ    reduce using rule 79 (sumExp)
    GREATEQ    reduce using rule 79 (sumExp)
    EQUALS     reduce using rule 79 (sumExp)
    DIFFERENT  reduce using rule 79 (sumExp)
    SEMIC      reduce using rule 79 (sumExp)

    mulOp  go to state 119


State 147

   83 mulExp: mulExp mulOp factor •

    ADD        reduce using rule 83 (mulExp)
    SUB        reduce using rule 83 (mulExp)
    MULT       reduce using rule 83 (mulExp)
    DIV        reduce using rule 83 (mulExp)
    OR         reduce using rule 83 (mulExp)
    AND        reduce using rule 83 (mulExp)
    SMALLER    reduce using rule 83 (mulExp)
    GREATER    reduce using rule 83 (mulExp)
    SMALLEQ    reduce using rule 83 (mulExp)
    GREATEQ    reduce using rule 83 (mulExp)
    EQUALS     reduce using rule 83 (mulExp)
    DIFFERENT  reduce using rule 83 (mulExp)
    SEMIC      reduce using rule 83 (mulExp)


State 148

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList • ENDFUNC
   26 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 158
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 102
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 149

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC •

    $end  reduce using rule 19 (funcDeclaration)
    TYPE  reduce using rule 19 (funcDeclaration)


State 150

   94 callParams: callParams COMMA • simpleExp

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 198

    simpleExp      go to state 159
    constOp        go to state 199
    binLogicalExp  go to state 200
    relationalExp  go to state 201
    sumExp         go to state 202
    sumOp          go to state 203
    mulExp         go to state 204
    factor         go to state 205
    fCall          go to state 206


State 151

   92 fCall: ID PARENL callParams PARENR •

    ADD        reduce using rule 92 (fCall)
    SUB        reduce using rule 92 (fCall)
    MULT       reduce using rule 92 (fCall)
    DIV        reduce using rule 92 (fCall)
    OR         reduce using rule 92 (fCall)
    AND        reduce using rule 92 (fCall)
    SMALLER    reduce using rule 92 (fCall)
    GREATER    reduce using rule 92 (fCall)
    SMALLEQ    reduce using rule 92 (fCall)
    GREATEQ    reduce using rule 92 (fCall)
    EQUALS     reduce using rule 92 (fCall)
    DIFFERENT  reduce using rule 92 (fCall)
    SEMIC      reduce using rule 92 (fCall)


State 152

   37 condStmt: IF PARENL simpleExp PARENR • primitiveStmt
   38         | IF PARENL simpleExp PARENR • primitiveStmt ELSE primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 223
    FOR          shift, and go to state 224
    READ         shift, and go to state 225
    WRITE        shift, and go to state 226
    WRITELN      shift, and go to state 227
    RETURN       shift, and go to state 228
    STFUNC       shift, and go to state 229
    PARENL       shift, and go to state 55

    varDeclaration        go to state 230
    simpleVarDeclaration  go to state 231
    compoundStmt          go to state 232
    primitiveStmt         go to state 160
    exprStmt              go to state 233
    condStmt              go to state 234
    iterStmt              go to state 235
    returnStmt            go to state 236
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 237
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 238
    outOp                 go to state 239
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 153

   39 iterStmt: FOR PARENL assignExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 161
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 154

   40 iterStmt: FOR PARENL simpleExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 162
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 155

   61 inOp: READ PARENL ID PARENR • SEMIC

    SEMIC  shift, and go to state 163


State 156

   62 outOp: WRITE PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 164


State 157

   63 outOp: WRITELN PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 165


State 158

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC •

    $end  reduce using rule 16 (funcDeclaration)
    TYPE  reduce using rule 16 (funcDeclaration)


State 159

   94 callParams: callParams COMMA simpleExp •

    COMMA   reduce using rule 94 (callParams)
    PARENR  reduce using rule 94 (callParams)


State 160

   37 condStmt: IF PARENL simpleExp PARENR primitiveStmt •
   38         | IF PARENL simpleExp PARENR primitiveStmt • ELSE primitiveStmt

    ELSE  shift, and go to state 166

    ID           reduce using rule 37 (condStmt)
    TYPE         reduce using rule 37 (condStmt)
    NIL          reduce using rule 37 (condStmt)
    INTEGER      reduce using rule 37 (condStmt)
    DECIMAL      reduce using rule 37 (condStmt)
    ADD          reduce using rule 37 (condStmt)
    SUB          reduce using rule 37 (condStmt)
    HEADLIST     reduce using rule 37 (condStmt)
    TAILLIST     reduce using rule 37 (condStmt)
    DESTROYHEAD  reduce using rule 37 (condStmt)
    IF           reduce using rule 37 (condStmt)
    FOR          reduce using rule 37 (condStmt)
    READ         reduce using rule 37 (condStmt)
    WRITE        reduce using rule 37 (condStmt)
    WRITELN      reduce using rule 37 (condStmt)
    RETURN       reduce using rule 37 (condStmt)
    STFUNC       reduce using rule 37 (condStmt)
    ENDFUNC      reduce using rule 37 (condStmt)
    PARENL       reduce using rule 37 (condStmt)


State 161

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 167


State 162

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 168


State 163

   61 inOp: READ PARENL ID PARENR SEMIC •

    ID           reduce using rule 61 (inOp)
    TYPE         reduce using rule 61 (inOp)
    NIL          reduce using rule 61 (inOp)
    INTEGER      reduce using rule 61 (inOp)
    DECIMAL      reduce using rule 61 (inOp)
    ADD          reduce using rule 61 (inOp)
    SUB          reduce using rule 61 (inOp)
    HEADLIST     reduce using rule 61 (inOp)
    TAILLIST     reduce using rule 61 (inOp)
    DESTROYHEAD  reduce using rule 61 (inOp)
    IF           reduce using rule 61 (inOp)
    FOR          reduce using rule 61 (inOp)
    READ         reduce using rule 61 (inOp)
    WRITE        reduce using rule 61 (inOp)
    WRITELN      reduce using rule 61 (inOp)
    RETURN       reduce using rule 61 (inOp)
    STFUNC       reduce using rule 61 (inOp)
    ENDFUNC      reduce using rule 61 (inOp)
    PARENL       reduce using rule 61 (inOp)


State 164

   62 outOp: WRITE PARENL outConst PARENR SEMIC •

    ID           reduce using rule 62 (outOp)
    TYPE         reduce using rule 62 (outOp)
    NIL          reduce using rule 62 (outOp)
    INTEGER      reduce using rule 62 (outOp)
    DECIMAL      reduce using rule 62 (outOp)
    ADD          reduce using rule 62 (outOp)
    SUB          reduce using rule 62 (outOp)
    HEADLIST     reduce using rule 62 (outOp)
    TAILLIST     reduce using rule 62 (outOp)
    DESTROYHEAD  reduce using rule 62 (outOp)
    IF           reduce using rule 62 (outOp)
    FOR          reduce using rule 62 (outOp)
    READ         reduce using rule 62 (outOp)
    WRITE        reduce using rule 62 (outOp)
    WRITELN      reduce using rule 62 (outOp)
    RETURN       reduce using rule 62 (outOp)
    STFUNC       reduce using rule 62 (outOp)
    ENDFUNC      reduce using rule 62 (outOp)
    PARENL       reduce using rule 62 (outOp)


State 165

   63 outOp: WRITELN PARENL outConst PARENR SEMIC •

    ID           reduce using rule 63 (outOp)
    TYPE         reduce using rule 63 (outOp)
    NIL          reduce using rule 63 (outOp)
    INTEGER      reduce using rule 63 (outOp)
    DECIMAL      reduce using rule 63 (outOp)
    ADD          reduce using rule 63 (outOp)
    SUB          reduce using rule 63 (outOp)
    HEADLIST     reduce using rule 63 (outOp)
    TAILLIST     reduce using rule 63 (outOp)
    DESTROYHEAD  reduce using rule 63 (outOp)
    IF           reduce using rule 63 (outOp)
    FOR          reduce using rule 63 (outOp)
    READ         reduce using rule 63 (outOp)
    WRITE        reduce using rule 63 (outOp)
    WRITELN      reduce using rule 63 (outOp)
    RETURN       reduce using rule 63 (outOp)
    STFUNC       reduce using rule 63 (outOp)
    ENDFUNC      reduce using rule 63 (outOp)
    PARENL       reduce using rule 63 (outOp)


State 166

   38 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 169
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 167

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 170

    assignExp  go to state 171


State 168

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 170

    assignExp  go to state 172


State 169

   38 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt •

    ID           reduce using rule 38 (condStmt)
    TYPE         reduce using rule 38 (condStmt)
    NIL          reduce using rule 38 (condStmt)
    INTEGER      reduce using rule 38 (condStmt)
    DECIMAL      reduce using rule 38 (condStmt)
    ADD          reduce using rule 38 (condStmt)
    SUB          reduce using rule 38 (condStmt)
    HEADLIST     reduce using rule 38 (condStmt)
    TAILLIST     reduce using rule 38 (condStmt)
    DESTROYHEAD  reduce using rule 38 (condStmt)
    IF           reduce using rule 38 (condStmt)
    FOR          reduce using rule 38 (condStmt)
    READ         reduce using rule 38 (condStmt)
    WRITE        reduce using rule 38 (condStmt)
    WRITELN      reduce using rule 38 (condStmt)
    RETURN       reduce using rule 38 (condStmt)
    STFUNC       reduce using rule 38 (condStmt)
    ENDFUNC      reduce using rule 38 (condStmt)
    PARENL       reduce using rule 38 (condStmt)


State 170

   56 assignExp: ID • ASSIGN expression

    ASSIGN  shift, and go to state 240


State 171

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 173


State 172

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 174


State 173

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 175
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 174

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 176
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 175

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 39 (iterStmt)
    TYPE         reduce using rule 39 (iterStmt)
    NIL          reduce using rule 39 (iterStmt)
    INTEGER      reduce using rule 39 (iterStmt)
    DECIMAL      reduce using rule 39 (iterStmt)
    ADD          reduce using rule 39 (iterStmt)
    SUB          reduce using rule 39 (iterStmt)
    HEADLIST     reduce using rule 39 (iterStmt)
    TAILLIST     reduce using rule 39 (iterStmt)
    DESTROYHEAD  reduce using rule 39 (iterStmt)
    IF           reduce using rule 39 (iterStmt)
    FOR          reduce using rule 39 (iterStmt)
    READ         reduce using rule 39 (iterStmt)
    WRITE        reduce using rule 39 (iterStmt)
    WRITELN      reduce using rule 39 (iterStmt)
    RETURN       reduce using rule 39 (iterStmt)
    STFUNC       reduce using rule 39 (iterStmt)
    ENDFUNC      reduce using rule 39 (iterStmt)
    PARENL       reduce using rule 39 (iterStmt)


State 176

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 40 (iterStmt)
    TYPE         reduce using rule 40 (iterStmt)
    NIL          reduce using rule 40 (iterStmt)
    INTEGER      reduce using rule 40 (iterStmt)
    DECIMAL      reduce using rule 40 (iterStmt)
    ADD          reduce using rule 40 (iterStmt)
    SUB          reduce using rule 40 (iterStmt)
    HEADLIST     reduce using rule 40 (iterStmt)
    TAILLIST     reduce using rule 40 (iterStmt)
    DESTROYHEAD  reduce using rule 40 (iterStmt)
    IF           reduce using rule 40 (iterStmt)
    FOR          reduce using rule 40 (iterStmt)
    READ         reduce using rule 40 (iterStmt)
    WRITE        reduce using rule 40 (iterStmt)
    WRITELN      reduce using rule 40 (iterStmt)
    RETURN       reduce using rule 40 (iterStmt)
    STFUNC       reduce using rule 40 (iterStmt)
    ENDFUNC      reduce using rule 40 (iterStmt)
    PARENL       reduce using rule 40 (iterStmt)


State 177

   20 simpleVarDeclaration: TYPE • ID
   21                     | TYPE • LISTTYPE ID

    ID        shift, and go to state 241
    LISTTYPE  shift, and go to state 242


State 178

    7 varDeclaration: simpleVarDeclaration • SEMIC

    SEMIC  shift, and go to state 243


State 179

   60 constOp: NIL •

    ADD        reduce using rule 60 (constOp)
    SUB        reduce using rule 60 (constOp)
    MULT       reduce using rule 60 (constOp)
    DIV        reduce using rule 60 (constOp)
    OR         reduce using rule 60 (constOp)
    AND        reduce using rule 60 (constOp)
    SMALLER    reduce using rule 60 (constOp)
    GREATER    reduce using rule 60 (constOp)
    SMALLEQ    reduce using rule 60 (constOp)
    GREATEQ    reduce using rule 60 (constOp)
    EQUALS     reduce using rule 60 (constOp)
    DIFFERENT  reduce using rule 60 (constOp)
    PARENR     reduce using rule 60 (constOp)


State 180

   58 constOp: INTEGER •

    ADD        reduce using rule 58 (constOp)
    SUB        reduce using rule 58 (constOp)
    MULT       reduce using rule 58 (constOp)
    DIV        reduce using rule 58 (constOp)
    OR         reduce using rule 58 (constOp)
    AND        reduce using rule 58 (constOp)
    SMALLER    reduce using rule 58 (constOp)
    GREATER    reduce using rule 58 (constOp)
    SMALLEQ    reduce using rule 58 (constOp)
    GREATEQ    reduce using rule 58 (constOp)
    EQUALS     reduce using rule 58 (constOp)
    DIFFERENT  reduce using rule 58 (constOp)
    PARENR     reduce using rule 58 (constOp)


State 181

   59 constOp: DECIMAL •

    ADD        reduce using rule 59 (constOp)
    SUB        reduce using rule 59 (constOp)
    MULT       reduce using rule 59 (constOp)
    DIV        reduce using rule 59 (constOp)
    OR         reduce using rule 59 (constOp)
    AND        reduce using rule 59 (constOp)
    SMALLER    reduce using rule 59 (constOp)
    GREATER    reduce using rule 59 (constOp)
    SMALLEQ    reduce using rule 59 (constOp)
    GREATEQ    reduce using rule 59 (constOp)
    EQUALS     reduce using rule 59 (constOp)
    DIFFERENT  reduce using rule 59 (constOp)
    PARENR     reduce using rule 59 (constOp)


State 182

   90 factor: PARENL • simpleExp PARENR

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 182

    simpleExp      go to state 244
    constOp        go to state 183
    binLogicalExp  go to state 184
    relationalExp  go to state 185
    sumExp         go to state 186
    sumOp          go to state 187
    mulExp         go to state 188
    factor         go to state 189
    fCall          go to state 190


State 183

   91 factor: constOp •

    ADD        reduce using rule 91 (factor)
    SUB        reduce using rule 91 (factor)
    MULT       reduce using rule 91 (factor)
    DIV        reduce using rule 91 (factor)
    OR         reduce using rule 91 (factor)
    AND        reduce using rule 91 (factor)
    SMALLER    reduce using rule 91 (factor)
    GREATER    reduce using rule 91 (factor)
    SMALLEQ    reduce using rule 91 (factor)
    GREATEQ    reduce using rule 91 (factor)
    EQUALS     reduce using rule 91 (factor)
    DIFFERENT  reduce using rule 91 (factor)
    PARENR     reduce using rule 91 (factor)


State 184

   57 simpleExp: binLogicalExp •
   67 binLogicalExp: binLogicalExp • binLogicalOp relationalOp

    OR   shift, and go to state 105
    AND  shift, and go to state 106

    PARENR  reduce using rule 57 (simpleExp)

    binLogicalOp  go to state 245


State 185

   68 binLogicalExp: relationalExp •
   71 relationalExp: relationalExp • relationalOp sumExp

    SMALLER    shift, and go to state 108
    GREATER    shift, and go to state 109
    SMALLEQ    shift, and go to state 110
    GREATEQ    shift, and go to state 111
    EQUALS     shift, and go to state 112
    DIFFERENT  shift, and go to state 113

    OR      reduce using rule 68 (binLogicalExp)
    AND     reduce using rule 68 (binLogicalExp)
    PARENR  reduce using rule 68 (binLogicalExp)

    relationalOp  go to state 246


State 186

   72 relationalExp: sumExp •
   79 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 191
    SUB  shift, and go to state 192

    OR         reduce using rule 72 (relationalExp)
    AND        reduce using rule 72 (relationalExp)
    SMALLER    reduce using rule 72 (relationalExp)
    GREATER    reduce using rule 72 (relationalExp)
    SMALLEQ    reduce using rule 72 (relationalExp)
    GREATEQ    reduce using rule 72 (relationalExp)
    EQUALS     reduce using rule 72 (relationalExp)
    DIFFERENT  reduce using rule 72 (relationalExp)
    PARENR     reduce using rule 72 (relationalExp)

    sumOp  go to state 247


State 187

   85 mulExp: sumOp • factor

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    PARENL   shift, and go to state 182

    constOp  go to state 183
    factor   go to state 248
    fCall    go to state 190


State 188

   80 sumExp: mulExp •
   83 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 117
    DIV   shift, and go to state 118

    ADD        reduce using rule 80 (sumExp)
    SUB        reduce using rule 80 (sumExp)
    OR         reduce using rule 80 (sumExp)
    AND        reduce using rule 80 (sumExp)
    SMALLER    reduce using rule 80 (sumExp)
    GREATER    reduce using rule 80 (sumExp)
    SMALLEQ    reduce using rule 80 (sumExp)
    GREATEQ    reduce using rule 80 (sumExp)
    EQUALS     reduce using rule 80 (sumExp)
    DIFFERENT  reduce using rule 80 (sumExp)
    PARENR     reduce using rule 80 (sumExp)

    mulOp  go to state 249


State 189

   84 mulExp: factor •

    ADD        reduce using rule 84 (mulExp)
    SUB        reduce using rule 84 (mulExp)
    MULT       reduce using rule 84 (mulExp)
    DIV        reduce using rule 84 (mulExp)
    OR         reduce using rule 84 (mulExp)
    AND        reduce using rule 84 (mulExp)
    SMALLER    reduce using rule 84 (mulExp)
    GREATER    reduce using rule 84 (mulExp)
    SMALLEQ    reduce using rule 84 (mulExp)
    GREATEQ    reduce using rule 84 (mulExp)
    EQUALS     reduce using rule 84 (mulExp)
    DIFFERENT  reduce using rule 84 (mulExp)
    PARENR     reduce using rule 84 (mulExp)


State 190

   89 factor: fCall •

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    PARENR     reduce using rule 89 (factor)


State 191

   81 sumOp: ADD •

    ID       reduce using rule 81 (sumOp)
    NIL      reduce using rule 81 (sumOp)
    INTEGER  reduce using rule 81 (sumOp)
    DECIMAL  reduce using rule 81 (sumOp)
    ADD      reduce using rule 81 (sumOp)
    SUB      reduce using rule 81 (sumOp)
    PARENL   reduce using rule 81 (sumOp)


State 192

   82 sumOp: SUB •

    ID       reduce using rule 82 (sumOp)
    NIL      reduce using rule 82 (sumOp)
    INTEGER  reduce using rule 82 (sumOp)
    DECIMAL  reduce using rule 82 (sumOp)
    ADD      reduce using rule 82 (sumOp)
    SUB      reduce using rule 82 (sumOp)
    PARENL   reduce using rule 82 (sumOp)


State 193

   88 factor: ID •
   92 fCall: ID • PARENL callParams PARENR
   93      | ID • PARENL PARENR

    PARENL  shift, and go to state 90

    ADD        reduce using rule 88 (factor)
    SUB        reduce using rule 88 (factor)
    MULT       reduce using rule 88 (factor)
    DIV        reduce using rule 88 (factor)
    OR         reduce using rule 88 (factor)
    AND        reduce using rule 88 (factor)
    SMALLER    reduce using rule 88 (factor)
    GREATER    reduce using rule 88 (factor)
    SMALLEQ    reduce using rule 88 (factor)
    GREATEQ    reduce using rule 88 (factor)
    EQUALS     reduce using rule 88 (factor)
    DIFFERENT  reduce using rule 88 (factor)
    SEMIC      reduce using rule 88 (factor)


State 194

   88 factor: ID •
   92 fCall: ID • PARENL callParams PARENR
   93      | ID • PARENL PARENR

    PARENL  shift, and go to state 250

    ADD        reduce using rule 88 (factor)
    SUB        reduce using rule 88 (factor)
    MULT       reduce using rule 88 (factor)
    DIV        reduce using rule 88 (factor)
    OR         reduce using rule 88 (factor)
    AND        reduce using rule 88 (factor)
    SMALLER    reduce using rule 88 (factor)
    GREATER    reduce using rule 88 (factor)
    SMALLEQ    reduce using rule 88 (factor)
    GREATEQ    reduce using rule 88 (factor)
    EQUALS     reduce using rule 88 (factor)
    DIFFERENT  reduce using rule 88 (factor)
    COMMA      reduce using rule 88 (factor)
    PARENR     reduce using rule 88 (factor)


State 195

   60 constOp: NIL •

    ADD        reduce using rule 60 (constOp)
    SUB        reduce using rule 60 (constOp)
    MULT       reduce using rule 60 (constOp)
    DIV        reduce using rule 60 (constOp)
    OR         reduce using rule 60 (constOp)
    AND        reduce using rule 60 (constOp)
    SMALLER    reduce using rule 60 (constOp)
    GREATER    reduce using rule 60 (constOp)
    SMALLEQ    reduce using rule 60 (constOp)
    GREATEQ    reduce using rule 60 (constOp)
    EQUALS     reduce using rule 60 (constOp)
    DIFFERENT  reduce using rule 60 (constOp)
    COMMA      reduce using rule 60 (constOp)
    PARENR     reduce using rule 60 (constOp)


State 196

   58 constOp: INTEGER •

    ADD        reduce using rule 58 (constOp)
    SUB        reduce using rule 58 (constOp)
    MULT       reduce using rule 58 (constOp)
    DIV        reduce using rule 58 (constOp)
    OR         reduce using rule 58 (constOp)
    AND        reduce using rule 58 (constOp)
    SMALLER    reduce using rule 58 (constOp)
    GREATER    reduce using rule 58 (constOp)
    SMALLEQ    reduce using rule 58 (constOp)
    GREATEQ    reduce using rule 58 (constOp)
    EQUALS     reduce using rule 58 (constOp)
    DIFFERENT  reduce using rule 58 (constOp)
    COMMA      reduce using rule 58 (constOp)
    PARENR     reduce using rule 58 (constOp)


State 197

   59 constOp: DECIMAL •

    ADD        reduce using rule 59 (constOp)
    SUB        reduce using rule 59 (constOp)
    MULT       reduce using rule 59 (constOp)
    DIV        reduce using rule 59 (constOp)
    OR         reduce using rule 59 (constOp)
    AND        reduce using rule 59 (constOp)
    SMALLER    reduce using rule 59 (constOp)
    GREATER    reduce using rule 59 (constOp)
    SMALLEQ    reduce using rule 59 (constOp)
    GREATEQ    reduce using rule 59 (constOp)
    EQUALS     reduce using rule 59 (constOp)
    DIFFERENT  reduce using rule 59 (constOp)
    COMMA      reduce using rule 59 (constOp)
    PARENR     reduce using rule 59 (constOp)


State 198

   90 factor: PARENL • simpleExp PARENR

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 182

    simpleExp      go to state 251
    constOp        go to state 183
    binLogicalExp  go to state 184
    relationalExp  go to state 185
    sumExp         go to state 186
    sumOp          go to state 187
    mulExp         go to state 188
    factor         go to state 189
    fCall          go to state 190


State 199

   91 factor: constOp •

    ADD        reduce using rule 91 (factor)
    SUB        reduce using rule 91 (factor)
    MULT       reduce using rule 91 (factor)
    DIV        reduce using rule 91 (factor)
    OR         reduce using rule 91 (factor)
    AND        reduce using rule 91 (factor)
    SMALLER    reduce using rule 91 (factor)
    GREATER    reduce using rule 91 (factor)
    SMALLEQ    reduce using rule 91 (factor)
    GREATEQ    reduce using rule 91 (factor)
    EQUALS     reduce using rule 91 (factor)
    DIFFERENT  reduce using rule 91 (factor)
    COMMA      reduce using rule 91 (factor)
    PARENR     reduce using rule 91 (factor)


State 200

   57 simpleExp: binLogicalExp •
   67 binLogicalExp: binLogicalExp • binLogicalOp relationalOp

    OR   shift, and go to state 105
    AND  shift, and go to state 106

    COMMA   reduce using rule 57 (simpleExp)
    PARENR  reduce using rule 57 (simpleExp)

    binLogicalOp  go to state 252


State 201

   68 binLogicalExp: relationalExp •
   71 relationalExp: relationalExp • relationalOp sumExp

    SMALLER    shift, and go to state 108
    GREATER    shift, and go to state 109
    SMALLEQ    shift, and go to state 110
    GREATEQ    shift, and go to state 111
    EQUALS     shift, and go to state 112
    DIFFERENT  shift, and go to state 113

    OR      reduce using rule 68 (binLogicalExp)
    AND     reduce using rule 68 (binLogicalExp)
    COMMA   reduce using rule 68 (binLogicalExp)
    PARENR  reduce using rule 68 (binLogicalExp)

    relationalOp  go to state 253


State 202

   72 relationalExp: sumExp •
   79 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 191
    SUB  shift, and go to state 192

    OR         reduce using rule 72 (relationalExp)
    AND        reduce using rule 72 (relationalExp)
    SMALLER    reduce using rule 72 (relationalExp)
    GREATER    reduce using rule 72 (relationalExp)
    SMALLEQ    reduce using rule 72 (relationalExp)
    GREATEQ    reduce using rule 72 (relationalExp)
    EQUALS     reduce using rule 72 (relationalExp)
    DIFFERENT  reduce using rule 72 (relationalExp)
    COMMA      reduce using rule 72 (relationalExp)
    PARENR     reduce using rule 72 (relationalExp)

    sumOp  go to state 254


State 203

   85 mulExp: sumOp • factor

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    PARENL   shift, and go to state 198

    constOp  go to state 199
    factor   go to state 255
    fCall    go to state 206


State 204

   80 sumExp: mulExp •
   83 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 117
    DIV   shift, and go to state 118

    ADD        reduce using rule 80 (sumExp)
    SUB        reduce using rule 80 (sumExp)
    OR         reduce using rule 80 (sumExp)
    AND        reduce using rule 80 (sumExp)
    SMALLER    reduce using rule 80 (sumExp)
    GREATER    reduce using rule 80 (sumExp)
    SMALLEQ    reduce using rule 80 (sumExp)
    GREATEQ    reduce using rule 80 (sumExp)
    EQUALS     reduce using rule 80 (sumExp)
    DIFFERENT  reduce using rule 80 (sumExp)
    COMMA      reduce using rule 80 (sumExp)
    PARENR     reduce using rule 80 (sumExp)

    mulOp  go to state 256


State 205

   84 mulExp: factor •

    ADD        reduce using rule 84 (mulExp)
    SUB        reduce using rule 84 (mulExp)
    MULT       reduce using rule 84 (mulExp)
    DIV        reduce using rule 84 (mulExp)
    OR         reduce using rule 84 (mulExp)
    AND        reduce using rule 84 (mulExp)
    SMALLER    reduce using rule 84 (mulExp)
    GREATER    reduce using rule 84 (mulExp)
    SMALLEQ    reduce using rule 84 (mulExp)
    GREATEQ    reduce using rule 84 (mulExp)
    EQUALS     reduce using rule 84 (mulExp)
    DIFFERENT  reduce using rule 84 (mulExp)
    COMMA      reduce using rule 84 (mulExp)
    PARENR     reduce using rule 84 (mulExp)


State 206

   89 factor: fCall •

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    COMMA      reduce using rule 89 (factor)
    PARENR     reduce using rule 89 (factor)


State 207

   50 destroyHeadOps: DESTROYHEAD • ID

    ID  shift, and go to state 257


State 208

   42 listExp: appendOps •

    PARENR  reduce using rule 42 (listExp)


State 209

   43 listExp: returnListOps •

    PARENR  reduce using rule 43 (listExp)


State 210

   47 returnListOps: returnListOp • ID

    ID  shift, and go to state 258


State 211

   44 listExp: destroyHeadOps •

    PARENR  reduce using rule 44 (listExp)


State 212

   45 listExp: mapFilterOps •

    PARENR  reduce using rule 45 (listExp)


State 213

   92 fCall: ID PARENL • callParams PARENR
   93      | ID PARENL • PARENR

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 198
    PARENR   shift, and go to state 259

    simpleExp      go to state 128
    constOp        go to state 199
    binLogicalExp  go to state 200
    relationalExp  go to state 201
    sumExp         go to state 202
    sumOp          go to state 203
    mulExp         go to state 204
    factor         go to state 205
    fCall          go to state 206
    callParams     go to state 260


State 214

   73 relationalOp: SMALLER •

    OR     reduce using rule 73 (relationalOp)
    AND    reduce using rule 73 (relationalOp)
    SEMIC  reduce using rule 73 (relationalOp)


State 215

   74 relationalOp: GREATER •

    OR     reduce using rule 74 (relationalOp)
    AND    reduce using rule 74 (relationalOp)
    SEMIC  reduce using rule 74 (relationalOp)


State 216

   75 relationalOp: SMALLEQ •

    OR     reduce using rule 75 (relationalOp)
    AND    reduce using rule 75 (relationalOp)
    SEMIC  reduce using rule 75 (relationalOp)


State 217

   76 relationalOp: GREATEQ •

    OR     reduce using rule 76 (relationalOp)
    AND    reduce using rule 76 (relationalOp)
    SEMIC  reduce using rule 76 (relationalOp)


State 218

   77 relationalOp: EQUALS •

    OR     reduce using rule 77 (relationalOp)
    AND    reduce using rule 77 (relationalOp)
    SEMIC  reduce using rule 77 (relationalOp)


State 219

   78 relationalOp: DIFFERENT •

    OR     reduce using rule 78 (relationalOp)
    AND    reduce using rule 78 (relationalOp)
    SEMIC  reduce using rule 78 (relationalOp)


State 220

   46 appendOps: ID APPEND • ID

    ID  shift, and go to state 261


State 221

   52 mapFilterOps: ID FILTER • ID

    ID  shift, and go to state 262


State 222

   51 mapFilterOps: ID MAP • ID

    ID  shift, and go to state 263


State 223

   37 condStmt: IF • PARENL simpleExp PARENR primitiveStmt
   38         | IF • PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt

    PARENL  shift, and go to state 264


State 224

   39 iterStmt: FOR • PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   40         | FOR • PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    PARENL  shift, and go to state 265


State 225

   61 inOp: READ • PARENL ID PARENR SEMIC

    PARENL  shift, and go to state 266


State 226

   62 outOp: WRITE • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 267


State 227

   63 outOp: WRITELN • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 268


State 228

   41 returnStmt: RETURN • expression SEMIC

    ID           shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    PARENL       shift, and go to state 55

    listExp         go to state 64
    appendOps       go to state 65
    returnListOps   go to state 66
    returnListOp    go to state 67
    destroyHeadOps  go to state 68
    mapFilterOps    go to state 69
    expression      go to state 269
    assignExp       go to state 71
    simpleExp       go to state 72
    constOp         go to state 73
    binLogicalExp   go to state 76
    relationalExp   go to state 77
    sumExp          go to state 78
    sumOp           go to state 79
    mulExp          go to state 80
    factor          go to state 81
    fCall           go to state 82


State 229

   25 compoundStmt: STFUNC • stmtList ENDFUNC

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    stmtList              go to state 270
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 230

   35 primitiveStmt: varDeclaration •

    ID           reduce using rule 35 (primitiveStmt)
    TYPE         reduce using rule 35 (primitiveStmt)
    NIL          reduce using rule 35 (primitiveStmt)
    INTEGER      reduce using rule 35 (primitiveStmt)
    DECIMAL      reduce using rule 35 (primitiveStmt)
    ADD          reduce using rule 35 (primitiveStmt)
    SUB          reduce using rule 35 (primitiveStmt)
    HEADLIST     reduce using rule 35 (primitiveStmt)
    TAILLIST     reduce using rule 35 (primitiveStmt)
    DESTROYHEAD  reduce using rule 35 (primitiveStmt)
    ELSE         reduce using rule 35 (primitiveStmt)
    IF           reduce using rule 35 (primitiveStmt)
    FOR          reduce using rule 35 (primitiveStmt)
    READ         reduce using rule 35 (primitiveStmt)
    WRITE        reduce using rule 35 (primitiveStmt)
    WRITELN      reduce using rule 35 (primitiveStmt)
    RETURN       reduce using rule 35 (primitiveStmt)
    STFUNC       reduce using rule 35 (primitiveStmt)
    ENDFUNC      reduce using rule 35 (primitiveStmt)
    PARENL       reduce using rule 35 (primitiveStmt)


State 231

    7 varDeclaration: simpleVarDeclaration • SEMIC

    SEMIC  shift, and go to state 271


State 232

   29 primitiveStmt: compoundStmt •

    ID           reduce using rule 29 (primitiveStmt)
    TYPE         reduce using rule 29 (primitiveStmt)
    NIL          reduce using rule 29 (primitiveStmt)
    INTEGER      reduce using rule 29 (primitiveStmt)
    DECIMAL      reduce using rule 29 (primitiveStmt)
    ADD          reduce using rule 29 (primitiveStmt)
    SUB          reduce using rule 29 (primitiveStmt)
    HEADLIST     reduce using rule 29 (primitiveStmt)
    TAILLIST     reduce using rule 29 (primitiveStmt)
    DESTROYHEAD  reduce using rule 29 (primitiveStmt)
    ELSE         reduce using rule 29 (primitiveStmt)
    IF           reduce using rule 29 (primitiveStmt)
    FOR          reduce using rule 29 (primitiveStmt)
    READ         reduce using rule 29 (primitiveStmt)
    WRITE        reduce using rule 29 (primitiveStmt)
    WRITELN      reduce using rule 29 (primitiveStmt)
    RETURN       reduce using rule 29 (primitiveStmt)
    STFUNC       reduce using rule 29 (primitiveStmt)
    ENDFUNC      reduce using rule 29 (primitiveStmt)
    PARENL       reduce using rule 29 (primitiveStmt)


State 233

   28 primitiveStmt: exprStmt •

    ID           reduce using rule 28 (primitiveStmt)
    TYPE         reduce using rule 28 (primitiveStmt)
    NIL          reduce using rule 28 (primitiveStmt)
    INTEGER      reduce using rule 28 (primitiveStmt)
    DECIMAL      reduce using rule 28 (primitiveStmt)
    ADD          reduce using rule 28 (primitiveStmt)
    SUB          reduce using rule 28 (primitiveStmt)
    HEADLIST     reduce using rule 28 (primitiveStmt)
    TAILLIST     reduce using rule 28 (primitiveStmt)
    DESTROYHEAD  reduce using rule 28 (primitiveStmt)
    ELSE         reduce using rule 28 (primitiveStmt)
    IF           reduce using rule 28 (primitiveStmt)
    FOR          reduce using rule 28 (primitiveStmt)
    READ         reduce using rule 28 (primitiveStmt)
    WRITE        reduce using rule 28 (primitiveStmt)
    WRITELN      reduce using rule 28 (primitiveStmt)
    RETURN       reduce using rule 28 (primitiveStmt)
    STFUNC       reduce using rule 28 (primitiveStmt)
    ENDFUNC      reduce using rule 28 (primitiveStmt)
    PARENL       reduce using rule 28 (primitiveStmt)


State 234

   30 primitiveStmt: condStmt •

    ID           reduce using rule 30 (primitiveStmt)
    TYPE         reduce using rule 30 (primitiveStmt)
    NIL          reduce using rule 30 (primitiveStmt)
    INTEGER      reduce using rule 30 (primitiveStmt)
    DECIMAL      reduce using rule 30 (primitiveStmt)
    ADD          reduce using rule 30 (primitiveStmt)
    SUB          reduce using rule 30 (primitiveStmt)
    HEADLIST     reduce using rule 30 (primitiveStmt)
    TAILLIST     reduce using rule 30 (primitiveStmt)
    DESTROYHEAD  reduce using rule 30 (primitiveStmt)
    ELSE         reduce using rule 30 (primitiveStmt)
    IF           reduce using rule 30 (primitiveStmt)
    FOR          reduce using rule 30 (primitiveStmt)
    READ         reduce using rule 30 (primitiveStmt)
    WRITE        reduce using rule 30 (primitiveStmt)
    WRITELN      reduce using rule 30 (primitiveStmt)
    RETURN       reduce using rule 30 (primitiveStmt)
    STFUNC       reduce using rule 30 (primitiveStmt)
    ENDFUNC      reduce using rule 30 (primitiveStmt)
    PARENL       reduce using rule 30 (primitiveStmt)


State 235

   31 primitiveStmt: iterStmt •

    ID           reduce using rule 31 (primitiveStmt)
    TYPE         reduce using rule 31 (primitiveStmt)
    NIL          reduce using rule 31 (primitiveStmt)
    INTEGER      reduce using rule 31 (primitiveStmt)
    DECIMAL      reduce using rule 31 (primitiveStmt)
    ADD          reduce using rule 31 (primitiveStmt)
    SUB          reduce using rule 31 (primitiveStmt)
    HEADLIST     reduce using rule 31 (primitiveStmt)
    TAILLIST     reduce using rule 31 (primitiveStmt)
    DESTROYHEAD  reduce using rule 31 (primitiveStmt)
    ELSE         reduce using rule 31 (primitiveStmt)
    IF           reduce using rule 31 (primitiveStmt)
    FOR          reduce using rule 31 (primitiveStmt)
    READ         reduce using rule 31 (primitiveStmt)
    WRITE        reduce using rule 31 (primitiveStmt)
    WRITELN      reduce using rule 31 (primitiveStmt)
    RETURN       reduce using rule 31 (primitiveStmt)
    STFUNC       reduce using rule 31 (primitiveStmt)
    ENDFUNC      reduce using rule 31 (primitiveStmt)
    PARENL       reduce using rule 31 (primitiveStmt)


State 236

   32 primitiveStmt: returnStmt •

    ID           reduce using rule 32 (primitiveStmt)
    TYPE         reduce using rule 32 (primitiveStmt)
    NIL          reduce using rule 32 (primitiveStmt)
    INTEGER      reduce using rule 32 (primitiveStmt)
    DECIMAL      reduce using rule 32 (primitiveStmt)
    ADD          reduce using rule 32 (primitiveStmt)
    SUB          reduce using rule 32 (primitiveStmt)
    HEADLIST     reduce using rule 32 (primitiveStmt)
    TAILLIST     reduce using rule 32 (primitiveStmt)
    DESTROYHEAD  reduce using rule 32 (primitiveStmt)
    ELSE         reduce using rule 32 (primitiveStmt)
    IF           reduce using rule 32 (primitiveStmt)
    FOR          reduce using rule 32 (primitiveStmt)
    READ         reduce using rule 32 (primitiveStmt)
    WRITE        reduce using rule 32 (primitiveStmt)
    WRITELN      reduce using rule 32 (primitiveStmt)
    RETURN       reduce using rule 32 (primitiveStmt)
    STFUNC       reduce using rule 32 (primitiveStmt)
    ENDFUNC      reduce using rule 32 (primitiveStmt)
    PARENL       reduce using rule 32 (primitiveStmt)


State 237

   36 exprStmt: expression • SEMIC

    SEMIC  shift, and go to state 272


State 238

   33 primitiveStmt: inOp •

    ID           reduce using rule 33 (primitiveStmt)
    TYPE         reduce using rule 33 (primitiveStmt)
    NIL          reduce using rule 33 (primitiveStmt)
    INTEGER      reduce using rule 33 (primitiveStmt)
    DECIMAL      reduce using rule 33 (primitiveStmt)
    ADD          reduce using rule 33 (primitiveStmt)
    SUB          reduce using rule 33 (primitiveStmt)
    HEADLIST     reduce using rule 33 (primitiveStmt)
    TAILLIST     reduce using rule 33 (primitiveStmt)
    DESTROYHEAD  reduce using rule 33 (primitiveStmt)
    ELSE         reduce using rule 33 (primitiveStmt)
    IF           reduce using rule 33 (primitiveStmt)
    FOR          reduce using rule 33 (primitiveStmt)
    READ         reduce using rule 33 (primitiveStmt)
    WRITE        reduce using rule 33 (primitiveStmt)
    WRITELN      reduce using rule 33 (primitiveStmt)
    RETURN       reduce using rule 33 (primitiveStmt)
    STFUNC       reduce using rule 33 (primitiveStmt)
    ENDFUNC      reduce using rule 33 (primitiveStmt)
    PARENL       reduce using rule 33 (primitiveStmt)


State 239

   34 primitiveStmt: outOp •

    ID           reduce using rule 34 (primitiveStmt)
    TYPE         reduce using rule 34 (primitiveStmt)
    NIL          reduce using rule 34 (primitiveStmt)
    INTEGER      reduce using rule 34 (primitiveStmt)
    DECIMAL      reduce using rule 34 (primitiveStmt)
    ADD          reduce using rule 34 (primitiveStmt)
    SUB          reduce using rule 34 (primitiveStmt)
    HEADLIST     reduce using rule 34 (primitiveStmt)
    TAILLIST     reduce using rule 34 (primitiveStmt)
    DESTROYHEAD  reduce using rule 34 (primitiveStmt)
    ELSE         reduce using rule 34 (primitiveStmt)
    IF           reduce using rule 34 (primitiveStmt)
    FOR          reduce using rule 34 (primitiveStmt)
    READ         reduce using rule 34 (primitiveStmt)
    WRITE        reduce using rule 34 (primitiveStmt)
    WRITELN      reduce using rule 34 (primitiveStmt)
    RETURN       reduce using rule 34 (primitiveStmt)
    STFUNC       reduce using rule 34 (primitiveStmt)
    ENDFUNC      reduce using rule 34 (primitiveStmt)
    PARENL       reduce using rule 34 (primitiveStmt)


State 240

   56 assignExp: ID ASSIGN • expression

    ID           shift, and go to state 273
    NIL          shift, and go to state 179
    INTEGER      shift, and go to state 180
    DECIMAL      shift, and go to state 181
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 207
    PARENL       shift, and go to state 182

    listExp         go to state 274
    appendOps       go to state 208
    returnListOps   go to state 209
    returnListOp    go to state 210
    destroyHeadOps  go to state 211
    mapFilterOps    go to state 212
    expression      go to state 275
    assignExp       go to state 276
    simpleExp       go to state 277
    constOp         go to state 183
    binLogicalExp   go to state 184
    relationalExp   go to state 185
    sumExp          go to state 186
    sumOp           go to state 187
    mulExp          go to state 188
    factor          go to state 189
    fCall           go to state 190


State 241

   20 simpleVarDeclaration: TYPE ID •

    SEMIC  reduce using rule 20 (simpleVarDeclaration)


State 242

   21 simpleVarDeclaration: TYPE LISTTYPE • ID

    ID  shift, and go to state 278


State 243

    7 varDeclaration: simpleVarDeclaration SEMIC •

    ID           reduce using rule 7 (varDeclaration)
    TYPE         reduce using rule 7 (varDeclaration)
    NIL          reduce using rule 7 (varDeclaration)
    INTEGER      reduce using rule 7 (varDeclaration)
    DECIMAL      reduce using rule 7 (varDeclaration)
    ADD          reduce using rule 7 (varDeclaration)
    SUB          reduce using rule 7 (varDeclaration)
    HEADLIST     reduce using rule 7 (varDeclaration)
    TAILLIST     reduce using rule 7 (varDeclaration)
    DESTROYHEAD  reduce using rule 7 (varDeclaration)
    IF           reduce using rule 7 (varDeclaration)
    FOR          reduce using rule 7 (varDeclaration)
    READ         reduce using rule 7 (varDeclaration)
    WRITE        reduce using rule 7 (varDeclaration)
    WRITELN      reduce using rule 7 (varDeclaration)
    RETURN       reduce using rule 7 (varDeclaration)
    STFUNC       reduce using rule 7 (varDeclaration)
    ENDFUNC      reduce using rule 7 (varDeclaration)
    PARENL       reduce using rule 7 (varDeclaration)


State 244

   90 factor: PARENL simpleExp • PARENR

    PARENR  shift, and go to state 279


State 245

   67 binLogicalExp: binLogicalExp binLogicalOp • relationalOp

    SMALLER    shift, and go to state 280
    GREATER    shift, and go to state 281
    SMALLEQ    shift, and go to state 282
    GREATEQ    shift, and go to state 283
    EQUALS     shift, and go to state 284
    DIFFERENT  shift, and go to state 285

    relationalOp  go to state 286


State 246

   71 relationalExp: relationalExp relationalOp • sumExp

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 182

    constOp  go to state 183
    sumExp   go to state 287
    sumOp    go to state 187
    mulExp   go to state 188
    factor   go to state 189
    fCall    go to state 190


State 247

   79 sumExp: sumExp sumOp • mulExp

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 182

    constOp  go to state 183
    sumOp    go to state 187
    mulExp   go to state 288
    factor   go to state 189
    fCall    go to state 190


State 248

   85 mulExp: sumOp factor •

    ADD        reduce using rule 85 (mulExp)
    SUB        reduce using rule 85 (mulExp)
    MULT       reduce using rule 85 (mulExp)
    DIV        reduce using rule 85 (mulExp)
    OR         reduce using rule 85 (mulExp)
    AND        reduce using rule 85 (mulExp)
    SMALLER    reduce using rule 85 (mulExp)
    GREATER    reduce using rule 85 (mulExp)
    SMALLEQ    reduce using rule 85 (mulExp)
    GREATEQ    reduce using rule 85 (mulExp)
    EQUALS     reduce using rule 85 (mulExp)
    DIFFERENT  reduce using rule 85 (mulExp)
    PARENR     reduce using rule 85 (mulExp)


State 249

   83 mulExp: mulExp mulOp • factor

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    PARENL   shift, and go to state 182

    constOp  go to state 183
    factor   go to state 289
    fCall    go to state 190


State 250

   92 fCall: ID PARENL • callParams PARENR
   93      | ID PARENL • PARENR

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 198
    PARENR   shift, and go to state 290

    simpleExp      go to state 128
    constOp        go to state 199
    binLogicalExp  go to state 200
    relationalExp  go to state 201
    sumExp         go to state 202
    sumOp          go to state 203
    mulExp         go to state 204
    factor         go to state 205
    fCall          go to state 206
    callParams     go to state 291


State 251

   90 factor: PARENL simpleExp • PARENR

    PARENR  shift, and go to state 292


State 252

   67 binLogicalExp: binLogicalExp binLogicalOp • relationalOp

    SMALLER    shift, and go to state 293
    GREATER    shift, and go to state 294
    SMALLEQ    shift, and go to state 295
    GREATEQ    shift, and go to state 296
    EQUALS     shift, and go to state 297
    DIFFERENT  shift, and go to state 298

    relationalOp  go to state 299


State 253

   71 relationalExp: relationalExp relationalOp • sumExp

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 198

    constOp  go to state 199
    sumExp   go to state 300
    sumOp    go to state 203
    mulExp   go to state 204
    factor   go to state 205
    fCall    go to state 206


State 254

   79 sumExp: sumExp sumOp • mulExp

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 198

    constOp  go to state 199
    sumOp    go to state 203
    mulExp   go to state 301
    factor   go to state 205
    fCall    go to state 206


State 255

   85 mulExp: sumOp factor •

    ADD        reduce using rule 85 (mulExp)
    SUB        reduce using rule 85 (mulExp)
    MULT       reduce using rule 85 (mulExp)
    DIV        reduce using rule 85 (mulExp)
    OR         reduce using rule 85 (mulExp)
    AND        reduce using rule 85 (mulExp)
    SMALLER    reduce using rule 85 (mulExp)
    GREATER    reduce using rule 85 (mulExp)
    SMALLEQ    reduce using rule 85 (mulExp)
    GREATEQ    reduce using rule 85 (mulExp)
    EQUALS     reduce using rule 85 (mulExp)
    DIFFERENT  reduce using rule 85 (mulExp)
    COMMA      reduce using rule 85 (mulExp)
    PARENR     reduce using rule 85 (mulExp)


State 256

   83 mulExp: mulExp mulOp • factor

    ID       shift, and go to state 194
    NIL      shift, and go to state 195
    INTEGER  shift, and go to state 196
    DECIMAL  shift, and go to state 197
    PARENL   shift, and go to state 198

    constOp  go to state 199
    factor   go to state 302
    fCall    go to state 206


State 257

   50 destroyHeadOps: DESTROYHEAD ID •

    PARENR  reduce using rule 50 (destroyHeadOps)


State 258

   47 returnListOps: returnListOp ID •

    PARENR  reduce using rule 47 (returnListOps)


State 259

   93 fCall: ID PARENL PARENR •

    ADD        reduce using rule 93 (fCall)
    SUB        reduce using rule 93 (fCall)
    MULT       reduce using rule 93 (fCall)
    DIV        reduce using rule 93 (fCall)
    OR         reduce using rule 93 (fCall)
    AND        reduce using rule 93 (fCall)
    SMALLER    reduce using rule 93 (fCall)
    GREATER    reduce using rule 93 (fCall)
    SMALLEQ    reduce using rule 93 (fCall)
    GREATEQ    reduce using rule 93 (fCall)
    EQUALS     reduce using rule 93 (fCall)
    DIFFERENT  reduce using rule 93 (fCall)
    PARENR     reduce using rule 93 (fCall)


State 260

   92 fCall: ID PARENL callParams • PARENR
   94 callParams: callParams • COMMA simpleExp

    COMMA   shift, and go to state 150
    PARENR  shift, and go to state 303


State 261

   46 appendOps: ID APPEND ID •

    PARENR  reduce using rule 46 (appendOps)


State 262

   52 mapFilterOps: ID FILTER ID •

    PARENR  reduce using rule 52 (mapFilterOps)


State 263

   51 mapFilterOps: ID MAP ID •

    PARENR  reduce using rule 51 (mapFilterOps)


State 264

   37 condStmt: IF PARENL • simpleExp PARENR primitiveStmt
   38         | IF PARENL • simpleExp PARENR primitiveStmt ELSE primitiveStmt

    ID       shift, and go to state 99
    NIL      shift, and go to state 179
    INTEGER  shift, and go to state 180
    DECIMAL  shift, and go to state 181
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 182

    simpleExp      go to state 304
    constOp        go to state 183
    binLogicalExp  go to state 184
    relationalExp  go to state 185
    sumExp         go to state 186
    sumOp          go to state 187
    mulExp         go to state 188
    factor         go to state 189
    fCall          go to state 190


State 265

   39 iterStmt: FOR PARENL • assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   40         | FOR PARENL • simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 131
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    assignExp      go to state 305
    simpleExp      go to state 306
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 266

   61 inOp: READ PARENL • ID PARENR SEMIC

    ID  shift, and go to state 307


State 267

   62 outOp: WRITE PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 135
    STRING       shift, and go to state 136
    NIL          shift, and go to state 179
    INTEGER      shift, and go to state 180
    DECIMAL      shift, and go to state 181
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 207
    PARENL       shift, and go to state 182

    listExp         go to state 137
    appendOps       go to state 208
    returnListOps   go to state 209
    returnListOp    go to state 210
    destroyHeadOps  go to state 211
    mapFilterOps    go to state 212
    simpleExp       go to state 138
    constOp         go to state 183
    outConst        go to state 308
    binLogicalExp   go to state 184
    relationalExp   go to state 185
    sumExp          go to state 186
    sumOp           go to state 187
    mulExp          go to state 188
    factor          go to state 189
    fCall           go to state 190


State 268

   63 outOp: WRITELN PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 135
    STRING       shift, and go to state 136
    NIL          shift, and go to state 179
    INTEGER      shift, and go to state 180
    DECIMAL      shift, and go to state 181
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 207
    PARENL       shift, and go to state 182

    listExp         go to state 137
    appendOps       go to state 208
    returnListOps   go to state 209
    returnListOp    go to state 210
    destroyHeadOps  go to state 211
    mapFilterOps    go to state 212
    simpleExp       go to state 138
    constOp         go to state 183
    outConst        go to state 309
    binLogicalExp   go to state 184
    relationalExp   go to state 185
    sumExp          go to state 186
    sumOp           go to state 187
    mulExp          go to state 188
    factor          go to state 189
    fCall           go to state 190


State 269

   41 returnStmt: RETURN expression • SEMIC

    SEMIC  shift, and go to state 310


State 270

   25 compoundStmt: STFUNC stmtList • ENDFUNC
   26 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 311
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 178
    compoundStmt          go to state 57
    primitiveStmt         go to state 102
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 271

    7 varDeclaration: simpleVarDeclaration SEMIC •

    ID           reduce using rule 7 (varDeclaration)
    TYPE         reduce using rule 7 (varDeclaration)
    NIL          reduce using rule 7 (varDeclaration)
    INTEGER      reduce using rule 7 (varDeclaration)
    DECIMAL      reduce using rule 7 (varDeclaration)
    ADD          reduce using rule 7 (varDeclaration)
    SUB          reduce using rule 7 (varDeclaration)
    HEADLIST     reduce using rule 7 (varDeclaration)
    TAILLIST     reduce using rule 7 (varDeclaration)
    DESTROYHEAD  reduce using rule 7 (varDeclaration)
    ELSE         reduce using rule 7 (varDeclaration)
    IF           reduce using rule 7 (varDeclaration)
    FOR          reduce using rule 7 (varDeclaration)
    READ         reduce using rule 7 (varDeclaration)
    WRITE        reduce using rule 7 (varDeclaration)
    WRITELN      reduce using rule 7 (varDeclaration)
    RETURN       reduce using rule 7 (varDeclaration)
    STFUNC       reduce using rule 7 (varDeclaration)
    ENDFUNC      reduce using rule 7 (varDeclaration)
    PARENL       reduce using rule 7 (varDeclaration)


State 272

   36 exprStmt: expression SEMIC •

    ID           reduce using rule 36 (exprStmt)
    TYPE         reduce using rule 36 (exprStmt)
    NIL          reduce using rule 36 (exprStmt)
    INTEGER      reduce using rule 36 (exprStmt)
    DECIMAL      reduce using rule 36 (exprStmt)
    ADD          reduce using rule 36 (exprStmt)
    SUB          reduce using rule 36 (exprStmt)
    HEADLIST     reduce using rule 36 (exprStmt)
    TAILLIST     reduce using rule 36 (exprStmt)
    DESTROYHEAD  reduce using rule 36 (exprStmt)
    ELSE         reduce using rule 36 (exprStmt)
    IF           reduce using rule 36 (exprStmt)
    FOR          reduce using rule 36 (exprStmt)
    READ         reduce using rule 36 (exprStmt)
    WRITE        reduce using rule 36 (exprStmt)
    WRITELN      reduce using rule 36 (exprStmt)
    RETURN       reduce using rule 36 (exprStmt)
    STFUNC       reduce using rule 36 (exprStmt)
    ENDFUNC      reduce using rule 36 (exprStmt)
    PARENL       reduce using rule 36 (exprStmt)


State 273

   46 appendOps: ID • APPEND ID
   51 mapFilterOps: ID • MAP ID
   52             | ID • FILTER ID
   56 assignExp: ID • ASSIGN expression
   88 factor: ID •
   92 fCall: ID • PARENL callParams PARENR
   93      | ID • PARENL PARENR

    APPEND  shift, and go to state 220
    FILTER  shift, and go to state 221
    ASSIGN  shift, and go to state 240
    MAP     shift, and go to state 222
    PARENL  shift, and go to state 213

    ADD        reduce using rule 88 (factor)
    SUB        reduce using rule 88 (factor)
    MULT       reduce using rule 88 (factor)
    DIV        reduce using rule 88 (factor)
    OR         reduce using rule 88 (factor)
    AND        reduce using rule 88 (factor)
    SMALLER    reduce using rule 88 (factor)
    GREATER    reduce using rule 88 (factor)
    SMALLEQ    reduce using rule 88 (factor)
    GREATEQ    reduce using rule 88 (factor)
    EQUALS     reduce using rule 88 (factor)
    DIFFERENT  reduce using rule 88 (factor)
    PARENR     reduce using rule 88 (factor)


State 274

   55 expression: listExp •

    PARENR  reduce using rule 55 (expression)


State 275

   56 assignExp: ID ASSIGN expression •

    PARENR  reduce using rule 56 (assignExp)


State 276

   53 expression: assignExp •

    PARENR  reduce using rule 53 (expression)


State 277

   54 expression: simpleExp •

    PARENR  reduce using rule 54 (expression)


State 278

   21 simpleVarDeclaration: TYPE LISTTYPE ID •

    SEMIC  reduce using rule 21 (simpleVarDeclaration)


State 279

   90 factor: PARENL simpleExp PARENR •

    ADD        reduce using rule 90 (factor)
    SUB        reduce using rule 90 (factor)
    MULT       reduce using rule 90 (factor)
    DIV        reduce using rule 90 (factor)
    OR         reduce using rule 90 (factor)
    AND        reduce using rule 90 (factor)
    SMALLER    reduce using rule 90 (factor)
    GREATER    reduce using rule 90 (factor)
    SMALLEQ    reduce using rule 90 (factor)
    GREATEQ    reduce using rule 90 (factor)
    EQUALS     reduce using rule 90 (factor)
    DIFFERENT  reduce using rule 90 (factor)
    PARENR     reduce using rule 90 (factor)


State 280

   73 relationalOp: SMALLER •

    OR      reduce using rule 73 (relationalOp)
    AND     reduce using rule 73 (relationalOp)
    PARENR  reduce using rule 73 (relationalOp)


State 281

   74 relationalOp: GREATER •

    OR      reduce using rule 74 (relationalOp)
    AND     reduce using rule 74 (relationalOp)
    PARENR  reduce using rule 74 (relationalOp)


State 282

   75 relationalOp: SMALLEQ •

    OR      reduce using rule 75 (relationalOp)
    AND     reduce using rule 75 (relationalOp)
    PARENR  reduce using rule 75 (relationalOp)


State 283

   76 relationalOp: GREATEQ •

    OR      reduce using rule 76 (relationalOp)
    AND     reduce using rule 76 (relationalOp)
    PARENR  reduce using rule 76 (relationalOp)


State 284

   77 relationalOp: EQUALS •

    OR      reduce using rule 77 (relationalOp)
    AND     reduce using rule 77 (relationalOp)
    PARENR  reduce using rule 77 (relationalOp)


State 285

   78 relationalOp: DIFFERENT •

    OR      reduce using rule 78 (relationalOp)
    AND     reduce using rule 78 (relationalOp)
    PARENR  reduce using rule 78 (relationalOp)


State 286

   67 binLogicalExp: binLogicalExp binLogicalOp relationalOp •

    OR      reduce using rule 67 (binLogicalExp)
    AND     reduce using rule 67 (binLogicalExp)
    PARENR  reduce using rule 67 (binLogicalExp)


State 287

   71 relationalExp: relationalExp relationalOp sumExp •
   79 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 191
    SUB  shift, and go to state 192

    OR         reduce using rule 71 (relationalExp)
    AND        reduce using rule 71 (relationalExp)
    SMALLER    reduce using rule 71 (relationalExp)
    GREATER    reduce using rule 71 (relationalExp)
    SMALLEQ    reduce using rule 71 (relationalExp)
    GREATEQ    reduce using rule 71 (relationalExp)
    EQUALS     reduce using rule 71 (relationalExp)
    DIFFERENT  reduce using rule 71 (relationalExp)
    PARENR     reduce using rule 71 (relationalExp)

    sumOp  go to state 247


State 288

   79 sumExp: sumExp sumOp mulExp •
   83 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 117
    DIV   shift, and go to state 118

    ADD        reduce using rule 79 (sumExp)
    SUB        reduce using rule 79 (sumExp)
    OR         reduce using rule 79 (sumExp)
    AND        reduce using rule 79 (sumExp)
    SMALLER    reduce using rule 79 (sumExp)
    GREATER    reduce using rule 79 (sumExp)
    SMALLEQ    reduce using rule 79 (sumExp)
    GREATEQ    reduce using rule 79 (sumExp)
    EQUALS     reduce using rule 79 (sumExp)
    DIFFERENT  reduce using rule 79 (sumExp)
    PARENR     reduce using rule 79 (sumExp)

    mulOp  go to state 249


State 289

   83 mulExp: mulExp mulOp factor •

    ADD        reduce using rule 83 (mulExp)
    SUB        reduce using rule 83 (mulExp)
    MULT       reduce using rule 83 (mulExp)
    DIV        reduce using rule 83 (mulExp)
    OR         reduce using rule 83 (mulExp)
    AND        reduce using rule 83 (mulExp)
    SMALLER    reduce using rule 83 (mulExp)
    GREATER    reduce using rule 83 (mulExp)
    SMALLEQ    reduce using rule 83 (mulExp)
    GREATEQ    reduce using rule 83 (mulExp)
    EQUALS     reduce using rule 83 (mulExp)
    DIFFERENT  reduce using rule 83 (mulExp)
    PARENR     reduce using rule 83 (mulExp)


State 290

   93 fCall: ID PARENL PARENR •

    ADD        reduce using rule 93 (fCall)
    SUB        reduce using rule 93 (fCall)
    MULT       reduce using rule 93 (fCall)
    DIV        reduce using rule 93 (fCall)
    OR         reduce using rule 93 (fCall)
    AND        reduce using rule 93 (fCall)
    SMALLER    reduce using rule 93 (fCall)
    GREATER    reduce using rule 93 (fCall)
    SMALLEQ    reduce using rule 93 (fCall)
    GREATEQ    reduce using rule 93 (fCall)
    EQUALS     reduce using rule 93 (fCall)
    DIFFERENT  reduce using rule 93 (fCall)
    COMMA      reduce using rule 93 (fCall)
    PARENR     reduce using rule 93 (fCall)


State 291

   92 fCall: ID PARENL callParams • PARENR
   94 callParams: callParams • COMMA simpleExp

    COMMA   shift, and go to state 150
    PARENR  shift, and go to state 312


State 292

   90 factor: PARENL simpleExp PARENR •

    ADD        reduce using rule 90 (factor)
    SUB        reduce using rule 90 (factor)
    MULT       reduce using rule 90 (factor)
    DIV        reduce using rule 90 (factor)
    OR         reduce using rule 90 (factor)
    AND        reduce using rule 90 (factor)
    SMALLER    reduce using rule 90 (factor)
    GREATER    reduce using rule 90 (factor)
    SMALLEQ    reduce using rule 90 (factor)
    GREATEQ    reduce using rule 90 (factor)
    EQUALS     reduce using rule 90 (factor)
    DIFFERENT  reduce using rule 90 (factor)
    COMMA      reduce using rule 90 (factor)
    PARENR     reduce using rule 90 (factor)


State 293

   73 relationalOp: SMALLER •

    OR      reduce using rule 73 (relationalOp)
    AND     reduce using rule 73 (relationalOp)
    COMMA   reduce using rule 73 (relationalOp)
    PARENR  reduce using rule 73 (relationalOp)


State 294

   74 relationalOp: GREATER •

    OR      reduce using rule 74 (relationalOp)
    AND     reduce using rule 74 (relationalOp)
    COMMA   reduce using rule 74 (relationalOp)
    PARENR  reduce using rule 74 (relationalOp)


State 295

   75 relationalOp: SMALLEQ •

    OR      reduce using rule 75 (relationalOp)
    AND     reduce using rule 75 (relationalOp)
    COMMA   reduce using rule 75 (relationalOp)
    PARENR  reduce using rule 75 (relationalOp)


State 296

   76 relationalOp: GREATEQ •

    OR      reduce using rule 76 (relationalOp)
    AND     reduce using rule 76 (relationalOp)
    COMMA   reduce using rule 76 (relationalOp)
    PARENR  reduce using rule 76 (relationalOp)


State 297

   77 relationalOp: EQUALS •

    OR      reduce using rule 77 (relationalOp)
    AND     reduce using rule 77 (relationalOp)
    COMMA   reduce using rule 77 (relationalOp)
    PARENR  reduce using rule 77 (relationalOp)


State 298

   78 relationalOp: DIFFERENT •

    OR      reduce using rule 78 (relationalOp)
    AND     reduce using rule 78 (relationalOp)
    COMMA   reduce using rule 78 (relationalOp)
    PARENR  reduce using rule 78 (relationalOp)


State 299

   67 binLogicalExp: binLogicalExp binLogicalOp relationalOp •

    OR      reduce using rule 67 (binLogicalExp)
    AND     reduce using rule 67 (binLogicalExp)
    COMMA   reduce using rule 67 (binLogicalExp)
    PARENR  reduce using rule 67 (binLogicalExp)


State 300

   71 relationalExp: relationalExp relationalOp sumExp •
   79 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 191
    SUB  shift, and go to state 192

    OR         reduce using rule 71 (relationalExp)
    AND        reduce using rule 71 (relationalExp)
    SMALLER    reduce using rule 71 (relationalExp)
    GREATER    reduce using rule 71 (relationalExp)
    SMALLEQ    reduce using rule 71 (relationalExp)
    GREATEQ    reduce using rule 71 (relationalExp)
    EQUALS     reduce using rule 71 (relationalExp)
    DIFFERENT  reduce using rule 71 (relationalExp)
    COMMA      reduce using rule 71 (relationalExp)
    PARENR     reduce using rule 71 (relationalExp)

    sumOp  go to state 254


State 301

   79 sumExp: sumExp sumOp mulExp •
   83 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 117
    DIV   shift, and go to state 118

    ADD        reduce using rule 79 (sumExp)
    SUB        reduce using rule 79 (sumExp)
    OR         reduce using rule 79 (sumExp)
    AND        reduce using rule 79 (sumExp)
    SMALLER    reduce using rule 79 (sumExp)
    GREATER    reduce using rule 79 (sumExp)
    SMALLEQ    reduce using rule 79 (sumExp)
    GREATEQ    reduce using rule 79 (sumExp)
    EQUALS     reduce using rule 79 (sumExp)
    DIFFERENT  reduce using rule 79 (sumExp)
    COMMA      reduce using rule 79 (sumExp)
    PARENR     reduce using rule 79 (sumExp)

    mulOp  go to state 256


State 302

   83 mulExp: mulExp mulOp factor •

    ADD        reduce using rule 83 (mulExp)
    SUB        reduce using rule 83 (mulExp)
    MULT       reduce using rule 83 (mulExp)
    DIV        reduce using rule 83 (mulExp)
    OR         reduce using rule 83 (mulExp)
    AND        reduce using rule 83 (mulExp)
    SMALLER    reduce using rule 83 (mulExp)
    GREATER    reduce using rule 83 (mulExp)
    SMALLEQ    reduce using rule 83 (mulExp)
    GREATEQ    reduce using rule 83 (mulExp)
    EQUALS     reduce using rule 83 (mulExp)
    DIFFERENT  reduce using rule 83 (mulExp)
    COMMA      reduce using rule 83 (mulExp)
    PARENR     reduce using rule 83 (mulExp)


State 303

   92 fCall: ID PARENL callParams PARENR •

    ADD        reduce using rule 92 (fCall)
    SUB        reduce using rule 92 (fCall)
    MULT       reduce using rule 92 (fCall)
    DIV        reduce using rule 92 (fCall)
    OR         reduce using rule 92 (fCall)
    AND        reduce using rule 92 (fCall)
    SMALLER    reduce using rule 92 (fCall)
    GREATER    reduce using rule 92 (fCall)
    SMALLEQ    reduce using rule 92 (fCall)
    GREATEQ    reduce using rule 92 (fCall)
    EQUALS     reduce using rule 92 (fCall)
    DIFFERENT  reduce using rule 92 (fCall)
    PARENR     reduce using rule 92 (fCall)


State 304

   37 condStmt: IF PARENL simpleExp • PARENR primitiveStmt
   38         | IF PARENL simpleExp • PARENR primitiveStmt ELSE primitiveStmt

    PARENR  shift, and go to state 313


State 305

   39 iterStmt: FOR PARENL assignExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 314


State 306

   40 iterStmt: FOR PARENL simpleExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 315


State 307

   61 inOp: READ PARENL ID • PARENR SEMIC

    PARENR  shift, and go to state 316


State 308

   62 outOp: WRITE PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 317


State 309

   63 outOp: WRITELN PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 318


State 310

   41 returnStmt: RETURN expression SEMIC •

    ID           reduce using rule 41 (returnStmt)
    TYPE         reduce using rule 41 (returnStmt)
    NIL          reduce using rule 41 (returnStmt)
    INTEGER      reduce using rule 41 (returnStmt)
    DECIMAL      reduce using rule 41 (returnStmt)
    ADD          reduce using rule 41 (returnStmt)
    SUB          reduce using rule 41 (returnStmt)
    HEADLIST     reduce using rule 41 (returnStmt)
    TAILLIST     reduce using rule 41 (returnStmt)
    DESTROYHEAD  reduce using rule 41 (returnStmt)
    ELSE         reduce using rule 41 (returnStmt)
    IF           reduce using rule 41 (returnStmt)
    FOR          reduce using rule 41 (returnStmt)
    READ         reduce using rule 41 (returnStmt)
    WRITE        reduce using rule 41 (returnStmt)
    WRITELN      reduce using rule 41 (returnStmt)
    RETURN       reduce using rule 41 (returnStmt)
    STFUNC       reduce using rule 41 (returnStmt)
    ENDFUNC      reduce using rule 41 (returnStmt)
    PARENL       reduce using rule 41 (returnStmt)


State 311

   25 compoundStmt: STFUNC stmtList ENDFUNC •

    ID           reduce using rule 25 (compoundStmt)
    TYPE         reduce using rule 25 (compoundStmt)
    NIL          reduce using rule 25 (compoundStmt)
    INTEGER      reduce using rule 25 (compoundStmt)
    DECIMAL      reduce using rule 25 (compoundStmt)
    ADD          reduce using rule 25 (compoundStmt)
    SUB          reduce using rule 25 (compoundStmt)
    HEADLIST     reduce using rule 25 (compoundStmt)
    TAILLIST     reduce using rule 25 (compoundStmt)
    DESTROYHEAD  reduce using rule 25 (compoundStmt)
    ELSE         reduce using rule 25 (compoundStmt)
    IF           reduce using rule 25 (compoundStmt)
    FOR          reduce using rule 25 (compoundStmt)
    READ         reduce using rule 25 (compoundStmt)
    WRITE        reduce using rule 25 (compoundStmt)
    WRITELN      reduce using rule 25 (compoundStmt)
    RETURN       reduce using rule 25 (compoundStmt)
    STFUNC       reduce using rule 25 (compoundStmt)
    ENDFUNC      reduce using rule 25 (compoundStmt)
    PARENL       reduce using rule 25 (compoundStmt)


State 312

   92 fCall: ID PARENL callParams PARENR •

    ADD        reduce using rule 92 (fCall)
    SUB        reduce using rule 92 (fCall)
    MULT       reduce using rule 92 (fCall)
    DIV        reduce using rule 92 (fCall)
    OR         reduce using rule 92 (fCall)
    AND        reduce using rule 92 (fCall)
    SMALLER    reduce using rule 92 (fCall)
    GREATER    reduce using rule 92 (fCall)
    SMALLEQ    reduce using rule 92 (fCall)
    GREATEQ    reduce using rule 92 (fCall)
    EQUALS     reduce using rule 92 (fCall)
    DIFFERENT  reduce using rule 92 (fCall)
    COMMA      reduce using rule 92 (fCall)
    PARENR     reduce using rule 92 (fCall)


State 313

   37 condStmt: IF PARENL simpleExp PARENR • primitiveStmt
   38         | IF PARENL simpleExp PARENR • primitiveStmt ELSE primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 223
    FOR          shift, and go to state 224
    READ         shift, and go to state 225
    WRITE        shift, and go to state 226
    WRITELN      shift, and go to state 227
    RETURN       shift, and go to state 228
    STFUNC       shift, and go to state 229
    PARENL       shift, and go to state 55

    varDeclaration        go to state 230
    simpleVarDeclaration  go to state 231
    compoundStmt          go to state 232
    primitiveStmt         go to state 319
    exprStmt              go to state 233
    condStmt              go to state 234
    iterStmt              go to state 235
    returnStmt            go to state 236
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 237
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 238
    outOp                 go to state 239
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 314

   39 iterStmt: FOR PARENL assignExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 320
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 315

   40 iterStmt: FOR PARENL simpleExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 193
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 321
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 316

   61 inOp: READ PARENL ID PARENR • SEMIC

    SEMIC  shift, and go to state 322


State 317

   62 outOp: WRITE PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 323


State 318

   63 outOp: WRITELN PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 324


State 319

   37 condStmt: IF PARENL simpleExp PARENR primitiveStmt •
   38         | IF PARENL simpleExp PARENR primitiveStmt • ELSE primitiveStmt

    ELSE  shift, and go to state 325

    ID           reduce using rule 37 (condStmt)
    TYPE         reduce using rule 37 (condStmt)
    NIL          reduce using rule 37 (condStmt)
    INTEGER      reduce using rule 37 (condStmt)
    DECIMAL      reduce using rule 37 (condStmt)
    ADD          reduce using rule 37 (condStmt)
    SUB          reduce using rule 37 (condStmt)
    HEADLIST     reduce using rule 37 (condStmt)
    TAILLIST     reduce using rule 37 (condStmt)
    DESTROYHEAD  reduce using rule 37 (condStmt)
    IF           reduce using rule 37 (condStmt)
    FOR          reduce using rule 37 (condStmt)
    READ         reduce using rule 37 (condStmt)
    WRITE        reduce using rule 37 (condStmt)
    WRITELN      reduce using rule 37 (condStmt)
    RETURN       reduce using rule 37 (condStmt)
    STFUNC       reduce using rule 37 (condStmt)
    ENDFUNC      reduce using rule 37 (condStmt)
    PARENL       reduce using rule 37 (condStmt)


State 320

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 326


State 321

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 327


State 322

   61 inOp: READ PARENL ID PARENR SEMIC •

    ID           reduce using rule 61 (inOp)
    TYPE         reduce using rule 61 (inOp)
    NIL          reduce using rule 61 (inOp)
    INTEGER      reduce using rule 61 (inOp)
    DECIMAL      reduce using rule 61 (inOp)
    ADD          reduce using rule 61 (inOp)
    SUB          reduce using rule 61 (inOp)
    HEADLIST     reduce using rule 61 (inOp)
    TAILLIST     reduce using rule 61 (inOp)
    DESTROYHEAD  reduce using rule 61 (inOp)
    ELSE         reduce using rule 61 (inOp)
    IF           reduce using rule 61 (inOp)
    FOR          reduce using rule 61 (inOp)
    READ         reduce using rule 61 (inOp)
    WRITE        reduce using rule 61 (inOp)
    WRITELN      reduce using rule 61 (inOp)
    RETURN       reduce using rule 61 (inOp)
    STFUNC       reduce using rule 61 (inOp)
    ENDFUNC      reduce using rule 61 (inOp)
    PARENL       reduce using rule 61 (inOp)


State 323

   62 outOp: WRITE PARENL outConst PARENR SEMIC •

    ID           reduce using rule 62 (outOp)
    TYPE         reduce using rule 62 (outOp)
    NIL          reduce using rule 62 (outOp)
    INTEGER      reduce using rule 62 (outOp)
    DECIMAL      reduce using rule 62 (outOp)
    ADD          reduce using rule 62 (outOp)
    SUB          reduce using rule 62 (outOp)
    HEADLIST     reduce using rule 62 (outOp)
    TAILLIST     reduce using rule 62 (outOp)
    DESTROYHEAD  reduce using rule 62 (outOp)
    ELSE         reduce using rule 62 (outOp)
    IF           reduce using rule 62 (outOp)
    FOR          reduce using rule 62 (outOp)
    READ         reduce using rule 62 (outOp)
    WRITE        reduce using rule 62 (outOp)
    WRITELN      reduce using rule 62 (outOp)
    RETURN       reduce using rule 62 (outOp)
    STFUNC       reduce using rule 62 (outOp)
    ENDFUNC      reduce using rule 62 (outOp)
    PARENL       reduce using rule 62 (outOp)


State 324

   63 outOp: WRITELN PARENL outConst PARENR SEMIC •

    ID           reduce using rule 63 (outOp)
    TYPE         reduce using rule 63 (outOp)
    NIL          reduce using rule 63 (outOp)
    INTEGER      reduce using rule 63 (outOp)
    DECIMAL      reduce using rule 63 (outOp)
    ADD          reduce using rule 63 (outOp)
    SUB          reduce using rule 63 (outOp)
    HEADLIST     reduce using rule 63 (outOp)
    TAILLIST     reduce using rule 63 (outOp)
    DESTROYHEAD  reduce using rule 63 (outOp)
    ELSE         reduce using rule 63 (outOp)
    IF           reduce using rule 63 (outOp)
    FOR          reduce using rule 63 (outOp)
    READ         reduce using rule 63 (outOp)
    WRITE        reduce using rule 63 (outOp)
    WRITELN      reduce using rule 63 (outOp)
    RETURN       reduce using rule 63 (outOp)
    STFUNC       reduce using rule 63 (outOp)
    ENDFUNC      reduce using rule 63 (outOp)
    PARENL       reduce using rule 63 (outOp)


State 325

   38 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 223
    FOR          shift, and go to state 224
    READ         shift, and go to state 225
    WRITE        shift, and go to state 226
    WRITELN      shift, and go to state 227
    RETURN       shift, and go to state 228
    STFUNC       shift, and go to state 229
    PARENL       shift, and go to state 55

    varDeclaration        go to state 230
    simpleVarDeclaration  go to state 231
    compoundStmt          go to state 232
    primitiveStmt         go to state 328
    exprStmt              go to state 233
    condStmt              go to state 234
    iterStmt              go to state 235
    returnStmt            go to state 236
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 237
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 238
    outOp                 go to state 239
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 326

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 170

    assignExp  go to state 329


State 327

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 170

    assignExp  go to state 330


State 328

   38 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt •

    ID           reduce using rule 38 (condStmt)
    TYPE         reduce using rule 38 (condStmt)
    NIL          reduce using rule 38 (condStmt)
    INTEGER      reduce using rule 38 (condStmt)
    DECIMAL      reduce using rule 38 (condStmt)
    ADD          reduce using rule 38 (condStmt)
    SUB          reduce using rule 38 (condStmt)
    HEADLIST     reduce using rule 38 (condStmt)
    TAILLIST     reduce using rule 38 (condStmt)
    DESTROYHEAD  reduce using rule 38 (condStmt)
    ELSE         reduce using rule 38 (condStmt)
    IF           reduce using rule 38 (condStmt)
    FOR          reduce using rule 38 (condStmt)
    READ         reduce using rule 38 (condStmt)
    WRITE        reduce using rule 38 (condStmt)
    WRITELN      reduce using rule 38 (condStmt)
    RETURN       reduce using rule 38 (condStmt)
    STFUNC       reduce using rule 38 (condStmt)
    ENDFUNC      reduce using rule 38 (condStmt)
    PARENL       reduce using rule 38 (condStmt)


State 329

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 331


State 330

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 332


State 331

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 223
    FOR          shift, and go to state 224
    READ         shift, and go to state 225
    WRITE        shift, and go to state 226
    WRITELN      shift, and go to state 227
    RETURN       shift, and go to state 228
    STFUNC       shift, and go to state 229
    PARENL       shift, and go to state 55

    varDeclaration        go to state 230
    simpleVarDeclaration  go to state 231
    compoundStmt          go to state 232
    primitiveStmt         go to state 333
    exprStmt              go to state 233
    condStmt              go to state 234
    iterStmt              go to state 235
    returnStmt            go to state 236
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 237
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 238
    outOp                 go to state 239
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 332

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 39
    TYPE         shift, and go to state 177
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 223
    FOR          shift, and go to state 224
    READ         shift, and go to state 225
    WRITE        shift, and go to state 226
    WRITELN      shift, and go to state 227
    RETURN       shift, and go to state 228
    STFUNC       shift, and go to state 229
    PARENL       shift, and go to state 55

    varDeclaration        go to state 230
    simpleVarDeclaration  go to state 231
    compoundStmt          go to state 232
    primitiveStmt         go to state 334
    exprStmt              go to state 233
    condStmt              go to state 234
    iterStmt              go to state 235
    returnStmt            go to state 236
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 237
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 238
    outOp                 go to state 239
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 333

   39 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 39 (iterStmt)
    TYPE         reduce using rule 39 (iterStmt)
    NIL          reduce using rule 39 (iterStmt)
    INTEGER      reduce using rule 39 (iterStmt)
    DECIMAL      reduce using rule 39 (iterStmt)
    ADD          reduce using rule 39 (iterStmt)
    SUB          reduce using rule 39 (iterStmt)
    HEADLIST     reduce using rule 39 (iterStmt)
    TAILLIST     reduce using rule 39 (iterStmt)
    DESTROYHEAD  reduce using rule 39 (iterStmt)
    ELSE         reduce using rule 39 (iterStmt)
    IF           reduce using rule 39 (iterStmt)
    FOR          reduce using rule 39 (iterStmt)
    READ         reduce using rule 39 (iterStmt)
    WRITE        reduce using rule 39 (iterStmt)
    WRITELN      reduce using rule 39 (iterStmt)
    RETURN       reduce using rule 39 (iterStmt)
    STFUNC       reduce using rule 39 (iterStmt)
    ENDFUNC      reduce using rule 39 (iterStmt)
    PARENL       reduce using rule 39 (iterStmt)


State 334

   40 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 40 (iterStmt)
    TYPE         reduce using rule 40 (iterStmt)
    NIL          reduce using rule 40 (iterStmt)
    INTEGER      reduce using rule 40 (iterStmt)
    DECIMAL      reduce using rule 40 (iterStmt)
    ADD          reduce using rule 40 (iterStmt)
    SUB          reduce using rule 40 (iterStmt)
    HEADLIST     reduce using rule 40 (iterStmt)
    TAILLIST     reduce using rule 40 (iterStmt)
    DESTROYHEAD  reduce using rule 40 (iterStmt)
    ELSE         reduce using rule 40 (iterStmt)
    IF           reduce using rule 40 (iterStmt)
    FOR          reduce using rule 40 (iterStmt)
    READ         reduce using rule 40 (iterStmt)
    WRITE        reduce using rule 40 (iterStmt)
    WRITELN      reduce using rule 40 (iterStmt)
    RETURN       reduce using rule 40 (iterStmt)
    STFUNC       reduce using rule 40 (iterStmt)
    ENDFUNC      reduce using rule 40 (iterStmt)
    PARENL       reduce using rule 40 (iterStmt)
