

#### beginning ####

------------------------Syntax analysis---------------------
Type: 'int' on line: 1, column: 1
Id: 'x' at line: 1, column: 5
';' at line: 1, column: 6
Type: 'int' on line: 3, column: 1
Id: 'main' at line: 3, column: 5
'(' at line: 3, column: 9
')' at line: 3, column: 10
'{' on line: 3, column: 11
Id: 'x' at line: 4, column: 5
'=' at line: 4, column: 7
Integer: '10' at line: 4, column: 9
';' at line: 4, column: 11
Type: 'int' on line: 5, column: 5
ListType: 'list' on line: 5, column: 9
Id: 'newList' at line: 5, column: 14
';' at line: 5, column: 21
Id: 'newList' at line: 6, column: 5
'=' at line: 6, column: 13
Constant: 'NIL' at line: 6, column: 15
';' at line: 6, column: 18
'}' at line: 7, column: 1


#### EOF ####



--------------------------------symbols--------------------------------

|   0    |    x     |      var    |    int    |


--------------------------------tree--------------------------------

declarationsList declaration
declaration
varDeclaration
simpleVarDeclaration
TYPE ID
int
x
funcDeclaration
TYPE ID PARENL PARENR compoundStmt
int
main
compoundStmt
stmtList primitiveStmt
stmtList primitiveStmt
primitiveStmt
exprStmt
expression SEMIC
assignExp
ID ASSIGN expression
x
=
simpleExp
binLogicalExp
relationalExp
sumExp
mulExp
factor
constOp
10
varDeclaration
simpleVarDeclaration
TYPE ID
int
list
newList
exprStmt
expression SEMIC
assignExp
ID ASSIGN expression
newList
=
simpleExp
binLogicalExp
relationalExp
sumExp
mulExp
factor
constOp
NIL
