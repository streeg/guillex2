

#### beginning ####

------------------------Syntax analysis---------------------
Type: 'int' on line: 1, column: 1
Id: 'main' at line: 1, column: 5
'(' at line: 1, column: 9
Type: 'int' on line: 1, column: 10
Id: 'a' at line: 1, column: 14
')' at line: 1, column: 15
'{' on line: 1, column: 16
Type: 'int' on line: 2, column: 5
Id: 'i' at line: 2, column: 9
';' at line: 2, column: 10
Id: 'i' at line: 3, column: 5
'=' at line: 3, column: 7
Integer: '2' at line: 3, column: 9
';' at line: 3, column: 10
Integer: '1' at line: 4, column: 5
'+' at line: 4, column: 6
Integer: '1' at line: 4, column: 7
';' at line: 4, column: 8
Keyword [RETURN]: 'return' at line: 6, column: 5
Integer: '1' at line: 6, column: 12
';' at line: 6, column: 13
'}' at line: 7, column: 1


#### EOF ####



--------------------------------symbols--------------------------------

|   main                |    func                         |      int                     |    1    |


--------------------------------tree--------------------------------


declaration
-->   funcDeclaration

--->   TYPE ID PARENL params PARENR STFUNC stmtList ENDFUNC

---->   int

----->   main

------>   param

------->   simpleVarDeclaration

-------->   TYPE ID

--------->   int

---------->   a

------->   stmtList primitiveStmt

-------->   stmtList primitiveStmt

--------->   stmtList primitiveStmt

---------->   primitiveStmt

----------->   varDeclaration

------------>   simpleVarDeclaration

------------->   TYPE ID

-------------->   int

--------------->   i

----------->   exprStmt

------------>   expression SEMIC

------------->   assignExp

-------------->   ID ASSIGN expression

--------------->   i

---------------->   =

----------------->   simpleExp

------------------>   binLogicalExp

------------------->   relationalExp

-------------------->   sumExp

--------------------->   mulExp

---------------------->   factor

----------------------->   constOp

------------------------>   2

---------->   exprStmt

----------->   expression SEMIC

------------>   simpleExp

------------->   binLogicalExp

-------------->   relationalExp

--------------->   sumExp

---------------->   sumExp sumOp mulExp

----------------->   mulExp

------------------>   factor

------------------->   constOp

-------------------->   1

------------------>   ADD

------------------->   +

------------------->   factor

-------------------->   constOp

--------------------->   1

--------->   returnStmt

---------->   RETURN expression SEMIC

----------->   return

------------>   simpleExp

------------->   binLogicalExp

-------------->   relationalExp

--------------->   sumExp

---------------->   mulExp

----------------->   factor

------------------>   constOp

------------------->   1
