Grammar

    0 $accept: program $end

    1 program: declarationList

    2 declarationList: declarationList declaration
    3                | declaration
    4                | error

    5 declaration: varDeclaration
    6            | funcDeclaration

    7 varDeclaration: simpleVarDeclaration SEMIC

    8 $@1: %empty

    9 $@2: %empty

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC

   11 $@3: %empty

   12 $@4: %empty

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC

   14 $@5: %empty

   15 $@6: %empty

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC

   17 $@7: %empty

   18 $@8: %empty

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC

   20 simpleVarDeclaration: TYPE ID
   21                     | TYPE LISTTYPE ID

   22 params: params param
   23       | param

   24 param: TYPE ID
   25      | TYPE LISTTYPE ID

   26 compoundStmt: STFUNC stmtList ENDFUNC

   27 stmtList: stmtList primitiveStmt
   28         | primitiveStmt

   29 primitiveStmt: exprStmt
   30              | compoundStmt
   31              | condStmt
   32              | iterStmt
   33              | returnStmt
   34              | inOp
   35              | outOp
   36              | varDeclaration

   37 exprStmt: expression SEMIC

   38 condStmt: IF PARENL simpleExp PARENR primitiveStmt
   39         | IF PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   41         | FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

   42 returnStmt: RETURN expression SEMIC

   43 listExp: appendOps
   44        | returnListOps
   45        | destroyHeadOps
   46        | mapFilterOps

   47 appendOps: ID APPEND ID

   48 returnListOps: returnListOp ID

   49 returnListOp: HEADLIST
   50             | TAILLIST

   51 destroyHeadOps: DESTROYHEAD ID

   52 mapFilterOps: ID MAP ID
   53             | ID FILTER ID

   54 expression: assignExp
   55           | simpleExp
   56           | listExp

   57 assignExp: ID ASSIGN expression

   58 simpleExp: binLogicalExp

   59 constOp: INTEGER
   60        | DECIMAL
   61        | NIL

   62 inOp: READ PARENL ID PARENR SEMIC

   63 outOp: WRITE PARENL outConst PARENR SEMIC
   64      | WRITELN PARENL outConst PARENR SEMIC

   65 outConst: STRING
   66         | simpleExp
   67         | listExp

   68 binLogicalExp: binLogicalExp binLogicalOp relationalOp
   69              | relationalExp

   70 binLogicalOp: OR
   71             | AND

   72 relationalExp: relationalExp relationalOp sumExp
   73              | sumExp

   74 relationalOp: SMALLER
   75             | GREATER
   76             | SMALLEQ
   77             | GREATEQ
   78             | EQUALS
   79             | DIFFERENT

   80 sumExp: sumExp sumOp mulExp
   81       | mulExp

   82 sumOp: ADD
   83      | SUB

   84 mulExp: mulExp mulOp factor
   85       | factor
   86       | sumOp factor

   87 mulOp: MULT
   88      | DIV

   89 factor: ID
   90       | fCall
   91       | PARENL simpleExp PARENR
   92       | constOp

   93 fCall: ID PARENL callParams PARENR
   94      | ID PARENL PARENR

   95 callParams: callParams COMMA simpleExp
   96           | simpleExp


Terminals, with rules where they appear

    $end (0) 0
    error <treeNode> (256) 4
    ID <str> (258) 10 13 16 19 20 21 24 25 47 48 51 52 53 57 62 89 93 94
    TYPE <str> (259) 10 13 16 19 20 21 24 25
    LISTTYPE <str> (260) 16 19 21 25
    STRING <str> (261) 65
    NIL <str> (262) 61
    INTEGER <integer> (263) 59
    DECIMAL <dec> (264) 60
    ADD <str> (265) 82
    SUB <str> (266) 83
    MULT <str> (267) 87
    DIV <str> (268) 88
    OR <str> (269) 70
    AND <str> (270) 71
    SMALLER <str> (271) 74
    GREATER <str> (272) 75
    SMALLEQ <str> (273) 76
    GREATEQ <str> (274) 77
    EQUALS <str> (275) 78
    DIFFERENT <str> (276) 79
    APPEND <str> (277) 47
    HEADLIST <str> (278) 49
    TAILLIST <str> (279) 50
    DESTROYHEAD <str> (280) 51
    FILTER <str> (281) 53
    ASSIGN <str> (282) 57
    MAP <str> (283) 52
    ELSE <str> (284) 39
    THEN <str> (285)
    IF <str> (286) 38 39
    FOR <str> (287) 40 41
    READ <str> (288) 62
    WRITE <str> (289) 63
    WRITELN <str> (290) 64
    RETURN <str> (291) 42
    SEMIC <str> (292) 7 37 40 41 42 62 63 64
    COMMA <str> (293) 95
    STFUNC <str> (294) 10 13 16 19 26
    ENDFUNC <str> (295) 10 13 16 19 26
    PARENL <str> (296) 10 13 16 19 38 39 40 41 62 63 64 91 93 94
    PARENR <str> (297) 10 13 16 19 38 39 40 41 62 63 64 91 93 94


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <treeNode> (44)
        on left: 1
        on right: 0
    declarationList <treeNode> (45)
        on left: 2 3 4
        on right: 1 2
    declaration <treeNode> (46)
        on left: 5 6
        on right: 2 3
    varDeclaration <treeNode> (47)
        on left: 7
        on right: 5 36
    funcDeclaration <treeNode> (48)
        on left: 10 13 16 19
        on right: 6
    $@1 (49)
        on left: 8
        on right: 10
    $@2 (50)
        on left: 9
        on right: 10
    $@3 (51)
        on left: 11
        on right: 13
    $@4 (52)
        on left: 12
        on right: 13
    $@5 (53)
        on left: 14
        on right: 16
    $@6 (54)
        on left: 15
        on right: 16
    $@7 (55)
        on left: 17
        on right: 19
    $@8 (56)
        on left: 18
        on right: 19
    simpleVarDeclaration <treeNode> (57)
        on left: 20 21
        on right: 7
    params <treeNode> (58)
        on left: 22 23
        on right: 10 16 22
    param <treeNode> (59)
        on left: 24 25
        on right: 22 23
    compoundStmt <treeNode> (60)
        on left: 26
        on right: 30
    stmtList <treeNode> (61)
        on left: 27 28
        on right: 10 13 16 19 26 27
    primitiveStmt <treeNode> (62)
        on left: 29 30 31 32 33 34 35 36
        on right: 27 28 38 39 40 41
    exprStmt <treeNode> (63)
        on left: 37
        on right: 29
    condStmt <treeNode> (64)
        on left: 38 39
        on right: 31
    iterStmt <treeNode> (65)
        on left: 40 41
        on right: 32
    returnStmt <treeNode> (66)
        on left: 42
        on right: 33
    listExp <treeNode> (67)
        on left: 43 44 45 46
        on right: 56 67
    appendOps <treeNode> (68)
        on left: 47
        on right: 43
    returnListOps <treeNode> (69)
        on left: 48
        on right: 44
    returnListOp <treeNode> (70)
        on left: 49 50
        on right: 48
    destroyHeadOps <treeNode> (71)
        on left: 51
        on right: 45
    mapFilterOps <treeNode> (72)
        on left: 52 53
        on right: 46
    expression <treeNode> (73)
        on left: 54 55 56
        on right: 37 42 57
    assignExp <treeNode> (74)
        on left: 57
        on right: 40 41 54
    simpleExp <treeNode> (75)
        on left: 58
        on right: 38 39 40 41 55 66 91 95 96
    constOp <treeNode> (76)
        on left: 59 60 61
        on right: 92
    inOp <treeNode> (77)
        on left: 62
        on right: 34
    outOp <treeNode> (78)
        on left: 63 64
        on right: 35
    outConst <treeNode> (79)
        on left: 65 66 67
        on right: 63 64
    binLogicalExp <treeNode> (80)
        on left: 68 69
        on right: 58 68
    binLogicalOp <treeNode> (81)
        on left: 70 71
        on right: 68
    relationalExp <treeNode> (82)
        on left: 72 73
        on right: 69 72
    relationalOp <treeNode> (83)
        on left: 74 75 76 77 78 79
        on right: 68 72
    sumExp <treeNode> (84)
        on left: 80 81
        on right: 72 73 80
    sumOp <treeNode> (85)
        on left: 82 83
        on right: 80 86
    mulExp <treeNode> (86)
        on left: 84 85 86
        on right: 80 81 84
    mulOp <treeNode> (87)
        on left: 87 88
        on right: 84
    factor <treeNode> (88)
        on left: 89 90 91 92
        on right: 84 85 86
    fCall <treeNode> (89)
        on left: 93 94
        on right: 90
    callParams <treeNode> (90)
        on left: 95 96
        on right: 93 95


State 0

    0 $accept: • program $end

    error  shift, and go to state 1
    TYPE   shift, and go to state 2

    program               go to state 3
    declarationList       go to state 4
    declaration           go to state 5
    varDeclaration        go to state 6
    funcDeclaration       go to state 7
    simpleVarDeclaration  go to state 8


State 1

    4 declarationList: error •

    $end  reduce using rule 4 (declarationList)
    TYPE  reduce using rule 4 (declarationList)


State 2

   10 funcDeclaration: TYPE • ID PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC
   13                | TYPE • ID PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC
   16                | TYPE • LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE • LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC
   20 simpleVarDeclaration: TYPE • ID
   21                     | TYPE • LISTTYPE ID

    ID        shift, and go to state 9
    LISTTYPE  shift, and go to state 10


State 3

    0 $accept: program • $end

    $end  shift, and go to state 11


State 4

    1 program: declarationList •
    2 declarationList: declarationList • declaration

    TYPE  shift, and go to state 2

    $end  reduce using rule 1 (program)

    declaration           go to state 12
    varDeclaration        go to state 6
    funcDeclaration       go to state 7
    simpleVarDeclaration  go to state 8


State 5

    3 declarationList: declaration •

    $end  reduce using rule 3 (declarationList)
    TYPE  reduce using rule 3 (declarationList)


State 6

    5 declaration: varDeclaration •

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 7

    6 declaration: funcDeclaration •

    $end  reduce using rule 6 (declaration)
    TYPE  reduce using rule 6 (declaration)


State 8

    7 varDeclaration: simpleVarDeclaration • SEMIC

    SEMIC  shift, and go to state 13


State 9

   10 funcDeclaration: TYPE ID • PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC
   13                | TYPE ID • PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC
   20 simpleVarDeclaration: TYPE ID •

    PARENL  shift, and go to state 14

    SEMIC  reduce using rule 20 (simpleVarDeclaration)


State 10

   16 funcDeclaration: TYPE LISTTYPE • ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE LISTTYPE • ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC
   21 simpleVarDeclaration: TYPE LISTTYPE • ID

    ID  shift, and go to state 15


State 11

    0 $accept: program $end •

    $default  accept


State 12

    2 declarationList: declarationList declaration •

    $end  reduce using rule 2 (declarationList)
    TYPE  reduce using rule 2 (declarationList)


State 13

    7 varDeclaration: simpleVarDeclaration SEMIC •

    $end  reduce using rule 7 (varDeclaration)
    TYPE  reduce using rule 7 (varDeclaration)


State 14

   10 funcDeclaration: TYPE ID PARENL • $@1 params PARENR STFUNC $@2 stmtList ENDFUNC
   13                | TYPE ID PARENL • $@3 PARENR STFUNC $@4 stmtList ENDFUNC

    TYPE    reduce using rule 8 ($@1)
    PARENR  reduce using rule 11 ($@3)

    $@1  go to state 16
    $@3  go to state 17


State 15

   16 funcDeclaration: TYPE LISTTYPE ID • PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE LISTTYPE ID • PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC
   21 simpleVarDeclaration: TYPE LISTTYPE ID •

    PARENL  shift, and go to state 18

    SEMIC  reduce using rule 21 (simpleVarDeclaration)


State 16

   10 funcDeclaration: TYPE ID PARENL $@1 • params PARENR STFUNC $@2 stmtList ENDFUNC

    TYPE  shift, and go to state 19

    params  go to state 20
    param   go to state 21


State 17

   13 funcDeclaration: TYPE ID PARENL $@3 • PARENR STFUNC $@4 stmtList ENDFUNC

    PARENR  shift, and go to state 22


State 18

   16 funcDeclaration: TYPE LISTTYPE ID PARENL • $@5 params PARENR STFUNC $@6 stmtList ENDFUNC
   19                | TYPE LISTTYPE ID PARENL • $@7 PARENR STFUNC $@8 stmtList ENDFUNC

    TYPE    reduce using rule 14 ($@5)
    PARENR  reduce using rule 17 ($@7)

    $@5  go to state 23
    $@7  go to state 24


State 19

   24 param: TYPE • ID
   25      | TYPE • LISTTYPE ID

    ID        shift, and go to state 25
    LISTTYPE  shift, and go to state 26


State 20

   10 funcDeclaration: TYPE ID PARENL $@1 params • PARENR STFUNC $@2 stmtList ENDFUNC
   22 params: params • param

    TYPE    shift, and go to state 19
    PARENR  shift, and go to state 27

    param  go to state 28


State 21

   23 params: param •

    TYPE    reduce using rule 23 (params)
    PARENR  reduce using rule 23 (params)


State 22

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR • STFUNC $@4 stmtList ENDFUNC

    STFUNC  shift, and go to state 29


State 23

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 • params PARENR STFUNC $@6 stmtList ENDFUNC

    TYPE  shift, and go to state 19

    params  go to state 30
    param   go to state 21


State 24

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 • PARENR STFUNC $@8 stmtList ENDFUNC

    PARENR  shift, and go to state 31


State 25

   24 param: TYPE ID •

    TYPE    reduce using rule 24 (param)
    PARENR  reduce using rule 24 (param)


State 26

   25 param: TYPE LISTTYPE • ID

    ID  shift, and go to state 32


State 27

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR • STFUNC $@2 stmtList ENDFUNC

    STFUNC  shift, and go to state 33


State 28

   22 params: params param •

    TYPE    reduce using rule 22 (params)
    PARENR  reduce using rule 22 (params)


State 29

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC • $@4 stmtList ENDFUNC

    ID           reduce using rule 12 ($@4)
    TYPE         reduce using rule 12 ($@4)
    NIL          reduce using rule 12 ($@4)
    INTEGER      reduce using rule 12 ($@4)
    DECIMAL      reduce using rule 12 ($@4)
    ADD          reduce using rule 12 ($@4)
    SUB          reduce using rule 12 ($@4)
    HEADLIST     reduce using rule 12 ($@4)
    TAILLIST     reduce using rule 12 ($@4)
    DESTROYHEAD  reduce using rule 12 ($@4)
    IF           reduce using rule 12 ($@4)
    FOR          reduce using rule 12 ($@4)
    READ         reduce using rule 12 ($@4)
    WRITE        reduce using rule 12 ($@4)
    WRITELN      reduce using rule 12 ($@4)
    RETURN       reduce using rule 12 ($@4)
    STFUNC       reduce using rule 12 ($@4)
    PARENL       reduce using rule 12 ($@4)

    $@4  go to state 34


State 30

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params • PARENR STFUNC $@6 stmtList ENDFUNC
   22 params: params • param

    TYPE    shift, and go to state 19
    PARENR  shift, and go to state 35

    param  go to state 28


State 31

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR • STFUNC $@8 stmtList ENDFUNC

    STFUNC  shift, and go to state 36


State 32

   25 param: TYPE LISTTYPE ID •

    TYPE    reduce using rule 25 (param)
    PARENR  reduce using rule 25 (param)


State 33

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC • $@2 stmtList ENDFUNC

    ID           reduce using rule 9 ($@2)
    TYPE         reduce using rule 9 ($@2)
    NIL          reduce using rule 9 ($@2)
    INTEGER      reduce using rule 9 ($@2)
    DECIMAL      reduce using rule 9 ($@2)
    ADD          reduce using rule 9 ($@2)
    SUB          reduce using rule 9 ($@2)
    HEADLIST     reduce using rule 9 ($@2)
    TAILLIST     reduce using rule 9 ($@2)
    DESTROYHEAD  reduce using rule 9 ($@2)
    IF           reduce using rule 9 ($@2)
    FOR          reduce using rule 9 ($@2)
    READ         reduce using rule 9 ($@2)
    WRITE        reduce using rule 9 ($@2)
    WRITELN      reduce using rule 9 ($@2)
    RETURN       reduce using rule 9 ($@2)
    STFUNC       reduce using rule 9 ($@2)
    PARENL       reduce using rule 9 ($@2)

    $@2  go to state 37


State 34

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 • stmtList ENDFUNC

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    stmtList              go to state 58
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 35

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR • STFUNC $@6 stmtList ENDFUNC

    STFUNC  shift, and go to state 83


State 36

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC • $@8 stmtList ENDFUNC

    ID           reduce using rule 18 ($@8)
    TYPE         reduce using rule 18 ($@8)
    NIL          reduce using rule 18 ($@8)
    INTEGER      reduce using rule 18 ($@8)
    DECIMAL      reduce using rule 18 ($@8)
    ADD          reduce using rule 18 ($@8)
    SUB          reduce using rule 18 ($@8)
    HEADLIST     reduce using rule 18 ($@8)
    TAILLIST     reduce using rule 18 ($@8)
    DESTROYHEAD  reduce using rule 18 ($@8)
    IF           reduce using rule 18 ($@8)
    FOR          reduce using rule 18 ($@8)
    READ         reduce using rule 18 ($@8)
    WRITE        reduce using rule 18 ($@8)
    WRITELN      reduce using rule 18 ($@8)
    RETURN       reduce using rule 18 ($@8)
    STFUNC       reduce using rule 18 ($@8)
    PARENL       reduce using rule 18 ($@8)

    $@8  go to state 84


State 37

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 • stmtList ENDFUNC

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    stmtList              go to state 85
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 38

   47 appendOps: ID • APPEND ID
   52 mapFilterOps: ID • MAP ID
   53             | ID • FILTER ID
   57 assignExp: ID • ASSIGN expression
   89 factor: ID •
   93 fCall: ID • PARENL callParams PARENR
   94      | ID • PARENL PARENR

    APPEND  shift, and go to state 86
    FILTER  shift, and go to state 87
    ASSIGN  shift, and go to state 88
    MAP     shift, and go to state 89
    PARENL  shift, and go to state 90

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    SEMIC      reduce using rule 89 (factor)


State 39

   20 simpleVarDeclaration: TYPE • ID
   21                     | TYPE • LISTTYPE ID

    ID        shift, and go to state 91
    LISTTYPE  shift, and go to state 92


State 40

   61 constOp: NIL •

    ADD        reduce using rule 61 (constOp)
    SUB        reduce using rule 61 (constOp)
    MULT       reduce using rule 61 (constOp)
    DIV        reduce using rule 61 (constOp)
    OR         reduce using rule 61 (constOp)
    AND        reduce using rule 61 (constOp)
    SMALLER    reduce using rule 61 (constOp)
    GREATER    reduce using rule 61 (constOp)
    SMALLEQ    reduce using rule 61 (constOp)
    GREATEQ    reduce using rule 61 (constOp)
    EQUALS     reduce using rule 61 (constOp)
    DIFFERENT  reduce using rule 61 (constOp)
    SEMIC      reduce using rule 61 (constOp)


State 41

   59 constOp: INTEGER •

    ADD        reduce using rule 59 (constOp)
    SUB        reduce using rule 59 (constOp)
    MULT       reduce using rule 59 (constOp)
    DIV        reduce using rule 59 (constOp)
    OR         reduce using rule 59 (constOp)
    AND        reduce using rule 59 (constOp)
    SMALLER    reduce using rule 59 (constOp)
    GREATER    reduce using rule 59 (constOp)
    SMALLEQ    reduce using rule 59 (constOp)
    GREATEQ    reduce using rule 59 (constOp)
    EQUALS     reduce using rule 59 (constOp)
    DIFFERENT  reduce using rule 59 (constOp)
    SEMIC      reduce using rule 59 (constOp)


State 42

   60 constOp: DECIMAL •

    ADD        reduce using rule 60 (constOp)
    SUB        reduce using rule 60 (constOp)
    MULT       reduce using rule 60 (constOp)
    DIV        reduce using rule 60 (constOp)
    OR         reduce using rule 60 (constOp)
    AND        reduce using rule 60 (constOp)
    SMALLER    reduce using rule 60 (constOp)
    GREATER    reduce using rule 60 (constOp)
    SMALLEQ    reduce using rule 60 (constOp)
    GREATEQ    reduce using rule 60 (constOp)
    EQUALS     reduce using rule 60 (constOp)
    DIFFERENT  reduce using rule 60 (constOp)
    SEMIC      reduce using rule 60 (constOp)


State 43

   82 sumOp: ADD •

    ID       reduce using rule 82 (sumOp)
    NIL      reduce using rule 82 (sumOp)
    INTEGER  reduce using rule 82 (sumOp)
    DECIMAL  reduce using rule 82 (sumOp)
    PARENL   reduce using rule 82 (sumOp)


State 44

   83 sumOp: SUB •

    ID       reduce using rule 83 (sumOp)
    NIL      reduce using rule 83 (sumOp)
    INTEGER  reduce using rule 83 (sumOp)
    DECIMAL  reduce using rule 83 (sumOp)
    PARENL   reduce using rule 83 (sumOp)


State 45

   49 returnListOp: HEADLIST •

    ID  reduce using rule 49 (returnListOp)


State 46

   50 returnListOp: TAILLIST •

    ID  reduce using rule 50 (returnListOp)


State 47

   51 destroyHeadOps: DESTROYHEAD • ID

    ID  shift, and go to state 93


State 48

   38 condStmt: IF • PARENL simpleExp PARENR primitiveStmt
   39         | IF • PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt

    PARENL  shift, and go to state 94


State 49

   40 iterStmt: FOR • PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   41         | FOR • PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    PARENL  shift, and go to state 95


State 50

   62 inOp: READ • PARENL ID PARENR SEMIC

    PARENL  shift, and go to state 96


State 51

   63 outOp: WRITE • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 97


State 52

   64 outOp: WRITELN • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 98


State 53

   42 returnStmt: RETURN • expression SEMIC

    ID           shift, and go to state 38
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    PARENL       shift, and go to state 55

    listExp         go to state 64
    appendOps       go to state 65
    returnListOps   go to state 66
    returnListOp    go to state 67
    destroyHeadOps  go to state 68
    mapFilterOps    go to state 69
    expression      go to state 99
    assignExp       go to state 71
    simpleExp       go to state 72
    constOp         go to state 73
    binLogicalExp   go to state 76
    relationalExp   go to state 77
    sumExp          go to state 78
    sumOp           go to state 79
    mulExp          go to state 80
    factor          go to state 81
    fCall           go to state 82


State 54

   26 compoundStmt: STFUNC • stmtList ENDFUNC

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    stmtList              go to state 100
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 55

   91 factor: PARENL • simpleExp PARENR

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 184

    simpleExp      go to state 102
    constOp        go to state 185
    binLogicalExp  go to state 186
    relationalExp  go to state 187
    sumExp         go to state 188
    sumOp          go to state 189
    mulExp         go to state 190
    factor         go to state 191
    fCall          go to state 192


State 56

   36 primitiveStmt: varDeclaration •

    ID           reduce using rule 36 (primitiveStmt)
    TYPE         reduce using rule 36 (primitiveStmt)
    NIL          reduce using rule 36 (primitiveStmt)
    INTEGER      reduce using rule 36 (primitiveStmt)
    DECIMAL      reduce using rule 36 (primitiveStmt)
    ADD          reduce using rule 36 (primitiveStmt)
    SUB          reduce using rule 36 (primitiveStmt)
    HEADLIST     reduce using rule 36 (primitiveStmt)
    TAILLIST     reduce using rule 36 (primitiveStmt)
    DESTROYHEAD  reduce using rule 36 (primitiveStmt)
    IF           reduce using rule 36 (primitiveStmt)
    FOR          reduce using rule 36 (primitiveStmt)
    READ         reduce using rule 36 (primitiveStmt)
    WRITE        reduce using rule 36 (primitiveStmt)
    WRITELN      reduce using rule 36 (primitiveStmt)
    RETURN       reduce using rule 36 (primitiveStmt)
    STFUNC       reduce using rule 36 (primitiveStmt)
    ENDFUNC      reduce using rule 36 (primitiveStmt)
    PARENL       reduce using rule 36 (primitiveStmt)


State 57

   30 primitiveStmt: compoundStmt •

    ID           reduce using rule 30 (primitiveStmt)
    TYPE         reduce using rule 30 (primitiveStmt)
    NIL          reduce using rule 30 (primitiveStmt)
    INTEGER      reduce using rule 30 (primitiveStmt)
    DECIMAL      reduce using rule 30 (primitiveStmt)
    ADD          reduce using rule 30 (primitiveStmt)
    SUB          reduce using rule 30 (primitiveStmt)
    HEADLIST     reduce using rule 30 (primitiveStmt)
    TAILLIST     reduce using rule 30 (primitiveStmt)
    DESTROYHEAD  reduce using rule 30 (primitiveStmt)
    IF           reduce using rule 30 (primitiveStmt)
    FOR          reduce using rule 30 (primitiveStmt)
    READ         reduce using rule 30 (primitiveStmt)
    WRITE        reduce using rule 30 (primitiveStmt)
    WRITELN      reduce using rule 30 (primitiveStmt)
    RETURN       reduce using rule 30 (primitiveStmt)
    STFUNC       reduce using rule 30 (primitiveStmt)
    ENDFUNC      reduce using rule 30 (primitiveStmt)
    PARENL       reduce using rule 30 (primitiveStmt)


State 58

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 stmtList • ENDFUNC
   27 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 103
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 104
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 59

   28 stmtList: primitiveStmt •

    ID           reduce using rule 28 (stmtList)
    TYPE         reduce using rule 28 (stmtList)
    NIL          reduce using rule 28 (stmtList)
    INTEGER      reduce using rule 28 (stmtList)
    DECIMAL      reduce using rule 28 (stmtList)
    ADD          reduce using rule 28 (stmtList)
    SUB          reduce using rule 28 (stmtList)
    HEADLIST     reduce using rule 28 (stmtList)
    TAILLIST     reduce using rule 28 (stmtList)
    DESTROYHEAD  reduce using rule 28 (stmtList)
    IF           reduce using rule 28 (stmtList)
    FOR          reduce using rule 28 (stmtList)
    READ         reduce using rule 28 (stmtList)
    WRITE        reduce using rule 28 (stmtList)
    WRITELN      reduce using rule 28 (stmtList)
    RETURN       reduce using rule 28 (stmtList)
    STFUNC       reduce using rule 28 (stmtList)
    ENDFUNC      reduce using rule 28 (stmtList)
    PARENL       reduce using rule 28 (stmtList)


State 60

   29 primitiveStmt: exprStmt •

    ID           reduce using rule 29 (primitiveStmt)
    TYPE         reduce using rule 29 (primitiveStmt)
    NIL          reduce using rule 29 (primitiveStmt)
    INTEGER      reduce using rule 29 (primitiveStmt)
    DECIMAL      reduce using rule 29 (primitiveStmt)
    ADD          reduce using rule 29 (primitiveStmt)
    SUB          reduce using rule 29 (primitiveStmt)
    HEADLIST     reduce using rule 29 (primitiveStmt)
    TAILLIST     reduce using rule 29 (primitiveStmt)
    DESTROYHEAD  reduce using rule 29 (primitiveStmt)
    IF           reduce using rule 29 (primitiveStmt)
    FOR          reduce using rule 29 (primitiveStmt)
    READ         reduce using rule 29 (primitiveStmt)
    WRITE        reduce using rule 29 (primitiveStmt)
    WRITELN      reduce using rule 29 (primitiveStmt)
    RETURN       reduce using rule 29 (primitiveStmt)
    STFUNC       reduce using rule 29 (primitiveStmt)
    ENDFUNC      reduce using rule 29 (primitiveStmt)
    PARENL       reduce using rule 29 (primitiveStmt)


State 61

   31 primitiveStmt: condStmt •

    ID           reduce using rule 31 (primitiveStmt)
    TYPE         reduce using rule 31 (primitiveStmt)
    NIL          reduce using rule 31 (primitiveStmt)
    INTEGER      reduce using rule 31 (primitiveStmt)
    DECIMAL      reduce using rule 31 (primitiveStmt)
    ADD          reduce using rule 31 (primitiveStmt)
    SUB          reduce using rule 31 (primitiveStmt)
    HEADLIST     reduce using rule 31 (primitiveStmt)
    TAILLIST     reduce using rule 31 (primitiveStmt)
    DESTROYHEAD  reduce using rule 31 (primitiveStmt)
    IF           reduce using rule 31 (primitiveStmt)
    FOR          reduce using rule 31 (primitiveStmt)
    READ         reduce using rule 31 (primitiveStmt)
    WRITE        reduce using rule 31 (primitiveStmt)
    WRITELN      reduce using rule 31 (primitiveStmt)
    RETURN       reduce using rule 31 (primitiveStmt)
    STFUNC       reduce using rule 31 (primitiveStmt)
    ENDFUNC      reduce using rule 31 (primitiveStmt)
    PARENL       reduce using rule 31 (primitiveStmt)


State 62

   32 primitiveStmt: iterStmt •

    ID           reduce using rule 32 (primitiveStmt)
    TYPE         reduce using rule 32 (primitiveStmt)
    NIL          reduce using rule 32 (primitiveStmt)
    INTEGER      reduce using rule 32 (primitiveStmt)
    DECIMAL      reduce using rule 32 (primitiveStmt)
    ADD          reduce using rule 32 (primitiveStmt)
    SUB          reduce using rule 32 (primitiveStmt)
    HEADLIST     reduce using rule 32 (primitiveStmt)
    TAILLIST     reduce using rule 32 (primitiveStmt)
    DESTROYHEAD  reduce using rule 32 (primitiveStmt)
    IF           reduce using rule 32 (primitiveStmt)
    FOR          reduce using rule 32 (primitiveStmt)
    READ         reduce using rule 32 (primitiveStmt)
    WRITE        reduce using rule 32 (primitiveStmt)
    WRITELN      reduce using rule 32 (primitiveStmt)
    RETURN       reduce using rule 32 (primitiveStmt)
    STFUNC       reduce using rule 32 (primitiveStmt)
    ENDFUNC      reduce using rule 32 (primitiveStmt)
    PARENL       reduce using rule 32 (primitiveStmt)


State 63

   33 primitiveStmt: returnStmt •

    ID           reduce using rule 33 (primitiveStmt)
    TYPE         reduce using rule 33 (primitiveStmt)
    NIL          reduce using rule 33 (primitiveStmt)
    INTEGER      reduce using rule 33 (primitiveStmt)
    DECIMAL      reduce using rule 33 (primitiveStmt)
    ADD          reduce using rule 33 (primitiveStmt)
    SUB          reduce using rule 33 (primitiveStmt)
    HEADLIST     reduce using rule 33 (primitiveStmt)
    TAILLIST     reduce using rule 33 (primitiveStmt)
    DESTROYHEAD  reduce using rule 33 (primitiveStmt)
    IF           reduce using rule 33 (primitiveStmt)
    FOR          reduce using rule 33 (primitiveStmt)
    READ         reduce using rule 33 (primitiveStmt)
    WRITE        reduce using rule 33 (primitiveStmt)
    WRITELN      reduce using rule 33 (primitiveStmt)
    RETURN       reduce using rule 33 (primitiveStmt)
    STFUNC       reduce using rule 33 (primitiveStmt)
    ENDFUNC      reduce using rule 33 (primitiveStmt)
    PARENL       reduce using rule 33 (primitiveStmt)


State 64

   56 expression: listExp •

    SEMIC  reduce using rule 56 (expression)


State 65

   43 listExp: appendOps •

    SEMIC  reduce using rule 43 (listExp)


State 66

   44 listExp: returnListOps •

    SEMIC  reduce using rule 44 (listExp)


State 67

   48 returnListOps: returnListOp • ID

    ID  shift, and go to state 105


State 68

   45 listExp: destroyHeadOps •

    SEMIC  reduce using rule 45 (listExp)


State 69

   46 listExp: mapFilterOps •

    SEMIC  reduce using rule 46 (listExp)


State 70

   37 exprStmt: expression • SEMIC

    SEMIC  shift, and go to state 106


State 71

   54 expression: assignExp •

    SEMIC  reduce using rule 54 (expression)


State 72

   55 expression: simpleExp •

    SEMIC  reduce using rule 55 (expression)


State 73

   92 factor: constOp •

    ADD        reduce using rule 92 (factor)
    SUB        reduce using rule 92 (factor)
    MULT       reduce using rule 92 (factor)
    DIV        reduce using rule 92 (factor)
    OR         reduce using rule 92 (factor)
    AND        reduce using rule 92 (factor)
    SMALLER    reduce using rule 92 (factor)
    GREATER    reduce using rule 92 (factor)
    SMALLEQ    reduce using rule 92 (factor)
    GREATEQ    reduce using rule 92 (factor)
    EQUALS     reduce using rule 92 (factor)
    DIFFERENT  reduce using rule 92 (factor)
    SEMIC      reduce using rule 92 (factor)


State 74

   34 primitiveStmt: inOp •

    ID           reduce using rule 34 (primitiveStmt)
    TYPE         reduce using rule 34 (primitiveStmt)
    NIL          reduce using rule 34 (primitiveStmt)
    INTEGER      reduce using rule 34 (primitiveStmt)
    DECIMAL      reduce using rule 34 (primitiveStmt)
    ADD          reduce using rule 34 (primitiveStmt)
    SUB          reduce using rule 34 (primitiveStmt)
    HEADLIST     reduce using rule 34 (primitiveStmt)
    TAILLIST     reduce using rule 34 (primitiveStmt)
    DESTROYHEAD  reduce using rule 34 (primitiveStmt)
    IF           reduce using rule 34 (primitiveStmt)
    FOR          reduce using rule 34 (primitiveStmt)
    READ         reduce using rule 34 (primitiveStmt)
    WRITE        reduce using rule 34 (primitiveStmt)
    WRITELN      reduce using rule 34 (primitiveStmt)
    RETURN       reduce using rule 34 (primitiveStmt)
    STFUNC       reduce using rule 34 (primitiveStmt)
    ENDFUNC      reduce using rule 34 (primitiveStmt)
    PARENL       reduce using rule 34 (primitiveStmt)


State 75

   35 primitiveStmt: outOp •

    ID           reduce using rule 35 (primitiveStmt)
    TYPE         reduce using rule 35 (primitiveStmt)
    NIL          reduce using rule 35 (primitiveStmt)
    INTEGER      reduce using rule 35 (primitiveStmt)
    DECIMAL      reduce using rule 35 (primitiveStmt)
    ADD          reduce using rule 35 (primitiveStmt)
    SUB          reduce using rule 35 (primitiveStmt)
    HEADLIST     reduce using rule 35 (primitiveStmt)
    TAILLIST     reduce using rule 35 (primitiveStmt)
    DESTROYHEAD  reduce using rule 35 (primitiveStmt)
    IF           reduce using rule 35 (primitiveStmt)
    FOR          reduce using rule 35 (primitiveStmt)
    READ         reduce using rule 35 (primitiveStmt)
    WRITE        reduce using rule 35 (primitiveStmt)
    WRITELN      reduce using rule 35 (primitiveStmt)
    RETURN       reduce using rule 35 (primitiveStmt)
    STFUNC       reduce using rule 35 (primitiveStmt)
    ENDFUNC      reduce using rule 35 (primitiveStmt)
    PARENL       reduce using rule 35 (primitiveStmt)


State 76

   58 simpleExp: binLogicalExp •
   68 binLogicalExp: binLogicalExp • binLogicalOp relationalOp

    OR   shift, and go to state 107
    AND  shift, and go to state 108

    SEMIC  reduce using rule 58 (simpleExp)

    binLogicalOp  go to state 109


State 77

   69 binLogicalExp: relationalExp •
   72 relationalExp: relationalExp • relationalOp sumExp

    SMALLER    shift, and go to state 110
    GREATER    shift, and go to state 111
    SMALLEQ    shift, and go to state 112
    GREATEQ    shift, and go to state 113
    EQUALS     shift, and go to state 114
    DIFFERENT  shift, and go to state 115

    OR     reduce using rule 69 (binLogicalExp)
    AND    reduce using rule 69 (binLogicalExp)
    SEMIC  reduce using rule 69 (binLogicalExp)

    relationalOp  go to state 116


State 78

   73 relationalExp: sumExp •
   80 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 193
    SUB  shift, and go to state 194

    OR         reduce using rule 73 (relationalExp)
    AND        reduce using rule 73 (relationalExp)
    SMALLER    reduce using rule 73 (relationalExp)
    GREATER    reduce using rule 73 (relationalExp)
    SMALLEQ    reduce using rule 73 (relationalExp)
    GREATEQ    reduce using rule 73 (relationalExp)
    EQUALS     reduce using rule 73 (relationalExp)
    DIFFERENT  reduce using rule 73 (relationalExp)
    SEMIC      reduce using rule 73 (relationalExp)

    sumOp  go to state 117


State 79

   86 mulExp: sumOp • factor

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    PARENL   shift, and go to state 55

    constOp  go to state 73
    factor   go to state 118
    fCall    go to state 82


State 80

   81 sumExp: mulExp •
   84 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 119
    DIV   shift, and go to state 120

    ADD        reduce using rule 81 (sumExp)
    SUB        reduce using rule 81 (sumExp)
    OR         reduce using rule 81 (sumExp)
    AND        reduce using rule 81 (sumExp)
    SMALLER    reduce using rule 81 (sumExp)
    GREATER    reduce using rule 81 (sumExp)
    SMALLEQ    reduce using rule 81 (sumExp)
    GREATEQ    reduce using rule 81 (sumExp)
    EQUALS     reduce using rule 81 (sumExp)
    DIFFERENT  reduce using rule 81 (sumExp)
    SEMIC      reduce using rule 81 (sumExp)

    mulOp  go to state 121


State 81

   85 mulExp: factor •

    ADD        reduce using rule 85 (mulExp)
    SUB        reduce using rule 85 (mulExp)
    MULT       reduce using rule 85 (mulExp)
    DIV        reduce using rule 85 (mulExp)
    OR         reduce using rule 85 (mulExp)
    AND        reduce using rule 85 (mulExp)
    SMALLER    reduce using rule 85 (mulExp)
    GREATER    reduce using rule 85 (mulExp)
    SMALLEQ    reduce using rule 85 (mulExp)
    GREATEQ    reduce using rule 85 (mulExp)
    EQUALS     reduce using rule 85 (mulExp)
    DIFFERENT  reduce using rule 85 (mulExp)
    SEMIC      reduce using rule 85 (mulExp)


State 82

   90 factor: fCall •

    ADD        reduce using rule 90 (factor)
    SUB        reduce using rule 90 (factor)
    MULT       reduce using rule 90 (factor)
    DIV        reduce using rule 90 (factor)
    OR         reduce using rule 90 (factor)
    AND        reduce using rule 90 (factor)
    SMALLER    reduce using rule 90 (factor)
    GREATER    reduce using rule 90 (factor)
    SMALLEQ    reduce using rule 90 (factor)
    GREATEQ    reduce using rule 90 (factor)
    EQUALS     reduce using rule 90 (factor)
    DIFFERENT  reduce using rule 90 (factor)
    SEMIC      reduce using rule 90 (factor)


State 83

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC • $@6 stmtList ENDFUNC

    ID           reduce using rule 15 ($@6)
    TYPE         reduce using rule 15 ($@6)
    NIL          reduce using rule 15 ($@6)
    INTEGER      reduce using rule 15 ($@6)
    DECIMAL      reduce using rule 15 ($@6)
    ADD          reduce using rule 15 ($@6)
    SUB          reduce using rule 15 ($@6)
    HEADLIST     reduce using rule 15 ($@6)
    TAILLIST     reduce using rule 15 ($@6)
    DESTROYHEAD  reduce using rule 15 ($@6)
    IF           reduce using rule 15 ($@6)
    FOR          reduce using rule 15 ($@6)
    READ         reduce using rule 15 ($@6)
    WRITE        reduce using rule 15 ($@6)
    WRITELN      reduce using rule 15 ($@6)
    RETURN       reduce using rule 15 ($@6)
    STFUNC       reduce using rule 15 ($@6)
    PARENL       reduce using rule 15 ($@6)

    $@6  go to state 122


State 84

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 • stmtList ENDFUNC

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    stmtList              go to state 123
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 85

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 stmtList • ENDFUNC
   27 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 124
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 104
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 86

   47 appendOps: ID APPEND • ID

    ID  shift, and go to state 125


State 87

   53 mapFilterOps: ID FILTER • ID

    ID  shift, and go to state 126


State 88

   57 assignExp: ID ASSIGN • expression

    ID           shift, and go to state 38
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    PARENL       shift, and go to state 55

    listExp         go to state 64
    appendOps       go to state 65
    returnListOps   go to state 66
    returnListOp    go to state 67
    destroyHeadOps  go to state 68
    mapFilterOps    go to state 69
    expression      go to state 127
    assignExp       go to state 71
    simpleExp       go to state 72
    constOp         go to state 73
    binLogicalExp   go to state 76
    relationalExp   go to state 77
    sumExp          go to state 78
    sumOp           go to state 79
    mulExp          go to state 80
    factor          go to state 81
    fCall           go to state 82


State 89

   52 mapFilterOps: ID MAP • ID

    ID  shift, and go to state 128


State 90

   93 fCall: ID PARENL • callParams PARENR
   94      | ID PARENL • PARENR

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 200
    PARENR   shift, and go to state 129

    simpleExp      go to state 130
    constOp        go to state 201
    binLogicalExp  go to state 202
    relationalExp  go to state 203
    sumExp         go to state 204
    sumOp          go to state 205
    mulExp         go to state 206
    factor         go to state 207
    fCall          go to state 208
    callParams     go to state 131


State 91

   20 simpleVarDeclaration: TYPE ID •

    SEMIC  reduce using rule 20 (simpleVarDeclaration)


State 92

   21 simpleVarDeclaration: TYPE LISTTYPE • ID

    ID  shift, and go to state 132


State 93

   51 destroyHeadOps: DESTROYHEAD ID •

    SEMIC  reduce using rule 51 (destroyHeadOps)


State 94

   38 condStmt: IF PARENL • simpleExp PARENR primitiveStmt
   39         | IF PARENL • simpleExp PARENR primitiveStmt ELSE primitiveStmt

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 184

    simpleExp      go to state 133
    constOp        go to state 185
    binLogicalExp  go to state 186
    relationalExp  go to state 187
    sumExp         go to state 188
    sumOp          go to state 189
    mulExp         go to state 190
    factor         go to state 191
    fCall          go to state 192


State 95

   40 iterStmt: FOR PARENL • assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   41         | FOR PARENL • simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 134
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    assignExp      go to state 135
    simpleExp      go to state 136
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 96

   62 inOp: READ PARENL • ID PARENR SEMIC

    ID  shift, and go to state 137


State 97

   63 outOp: WRITE PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 138
    STRING       shift, and go to state 139
    NIL          shift, and go to state 181
    INTEGER      shift, and go to state 182
    DECIMAL      shift, and go to state 183
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 209
    PARENL       shift, and go to state 184

    listExp         go to state 140
    appendOps       go to state 210
    returnListOps   go to state 211
    returnListOp    go to state 212
    destroyHeadOps  go to state 213
    mapFilterOps    go to state 214
    simpleExp       go to state 141
    constOp         go to state 185
    outConst        go to state 142
    binLogicalExp   go to state 186
    relationalExp   go to state 187
    sumExp          go to state 188
    sumOp           go to state 189
    mulExp          go to state 190
    factor          go to state 191
    fCall           go to state 192


State 98

   64 outOp: WRITELN PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 138
    STRING       shift, and go to state 139
    NIL          shift, and go to state 181
    INTEGER      shift, and go to state 182
    DECIMAL      shift, and go to state 183
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 209
    PARENL       shift, and go to state 184

    listExp         go to state 140
    appendOps       go to state 210
    returnListOps   go to state 211
    returnListOp    go to state 212
    destroyHeadOps  go to state 213
    mapFilterOps    go to state 214
    simpleExp       go to state 141
    constOp         go to state 185
    outConst        go to state 143
    binLogicalExp   go to state 186
    relationalExp   go to state 187
    sumExp          go to state 188
    sumOp           go to state 189
    mulExp          go to state 190
    factor          go to state 191
    fCall           go to state 192


State 99

   42 returnStmt: RETURN expression • SEMIC

    SEMIC  shift, and go to state 144


State 100

   26 compoundStmt: STFUNC stmtList • ENDFUNC
   27 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 145
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 104
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 101

   89 factor: ID •
   93 fCall: ID • PARENL callParams PARENR
   94      | ID • PARENL PARENR

    PARENL  shift, and go to state 215

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    PARENR     reduce using rule 89 (factor)


State 102

   91 factor: PARENL simpleExp • PARENR

    PARENR  shift, and go to state 146


State 103

   13 funcDeclaration: TYPE ID PARENL $@3 PARENR STFUNC $@4 stmtList ENDFUNC •

    $end  reduce using rule 13 (funcDeclaration)
    TYPE  reduce using rule 13 (funcDeclaration)


State 104

   27 stmtList: stmtList primitiveStmt •

    ID           reduce using rule 27 (stmtList)
    TYPE         reduce using rule 27 (stmtList)
    NIL          reduce using rule 27 (stmtList)
    INTEGER      reduce using rule 27 (stmtList)
    DECIMAL      reduce using rule 27 (stmtList)
    ADD          reduce using rule 27 (stmtList)
    SUB          reduce using rule 27 (stmtList)
    HEADLIST     reduce using rule 27 (stmtList)
    TAILLIST     reduce using rule 27 (stmtList)
    DESTROYHEAD  reduce using rule 27 (stmtList)
    IF           reduce using rule 27 (stmtList)
    FOR          reduce using rule 27 (stmtList)
    READ         reduce using rule 27 (stmtList)
    WRITE        reduce using rule 27 (stmtList)
    WRITELN      reduce using rule 27 (stmtList)
    RETURN       reduce using rule 27 (stmtList)
    STFUNC       reduce using rule 27 (stmtList)
    ENDFUNC      reduce using rule 27 (stmtList)
    PARENL       reduce using rule 27 (stmtList)


State 105

   48 returnListOps: returnListOp ID •

    SEMIC  reduce using rule 48 (returnListOps)


State 106

   37 exprStmt: expression SEMIC •

    ID           reduce using rule 37 (exprStmt)
    TYPE         reduce using rule 37 (exprStmt)
    NIL          reduce using rule 37 (exprStmt)
    INTEGER      reduce using rule 37 (exprStmt)
    DECIMAL      reduce using rule 37 (exprStmt)
    ADD          reduce using rule 37 (exprStmt)
    SUB          reduce using rule 37 (exprStmt)
    HEADLIST     reduce using rule 37 (exprStmt)
    TAILLIST     reduce using rule 37 (exprStmt)
    DESTROYHEAD  reduce using rule 37 (exprStmt)
    IF           reduce using rule 37 (exprStmt)
    FOR          reduce using rule 37 (exprStmt)
    READ         reduce using rule 37 (exprStmt)
    WRITE        reduce using rule 37 (exprStmt)
    WRITELN      reduce using rule 37 (exprStmt)
    RETURN       reduce using rule 37 (exprStmt)
    STFUNC       reduce using rule 37 (exprStmt)
    ENDFUNC      reduce using rule 37 (exprStmt)
    PARENL       reduce using rule 37 (exprStmt)


State 107

   70 binLogicalOp: OR •

    SMALLER    reduce using rule 70 (binLogicalOp)
    GREATER    reduce using rule 70 (binLogicalOp)
    SMALLEQ    reduce using rule 70 (binLogicalOp)
    GREATEQ    reduce using rule 70 (binLogicalOp)
    EQUALS     reduce using rule 70 (binLogicalOp)
    DIFFERENT  reduce using rule 70 (binLogicalOp)


State 108

   71 binLogicalOp: AND •

    SMALLER    reduce using rule 71 (binLogicalOp)
    GREATER    reduce using rule 71 (binLogicalOp)
    SMALLEQ    reduce using rule 71 (binLogicalOp)
    GREATEQ    reduce using rule 71 (binLogicalOp)
    EQUALS     reduce using rule 71 (binLogicalOp)
    DIFFERENT  reduce using rule 71 (binLogicalOp)


State 109

   68 binLogicalExp: binLogicalExp binLogicalOp • relationalOp

    SMALLER    shift, and go to state 216
    GREATER    shift, and go to state 217
    SMALLEQ    shift, and go to state 218
    GREATEQ    shift, and go to state 219
    EQUALS     shift, and go to state 220
    DIFFERENT  shift, and go to state 221

    relationalOp  go to state 147


State 110

   74 relationalOp: SMALLER •

    ID       reduce using rule 74 (relationalOp)
    NIL      reduce using rule 74 (relationalOp)
    INTEGER  reduce using rule 74 (relationalOp)
    DECIMAL  reduce using rule 74 (relationalOp)
    ADD      reduce using rule 74 (relationalOp)
    SUB      reduce using rule 74 (relationalOp)
    PARENL   reduce using rule 74 (relationalOp)


State 111

   75 relationalOp: GREATER •

    ID       reduce using rule 75 (relationalOp)
    NIL      reduce using rule 75 (relationalOp)
    INTEGER  reduce using rule 75 (relationalOp)
    DECIMAL  reduce using rule 75 (relationalOp)
    ADD      reduce using rule 75 (relationalOp)
    SUB      reduce using rule 75 (relationalOp)
    PARENL   reduce using rule 75 (relationalOp)


State 112

   76 relationalOp: SMALLEQ •

    ID       reduce using rule 76 (relationalOp)
    NIL      reduce using rule 76 (relationalOp)
    INTEGER  reduce using rule 76 (relationalOp)
    DECIMAL  reduce using rule 76 (relationalOp)
    ADD      reduce using rule 76 (relationalOp)
    SUB      reduce using rule 76 (relationalOp)
    PARENL   reduce using rule 76 (relationalOp)


State 113

   77 relationalOp: GREATEQ •

    ID       reduce using rule 77 (relationalOp)
    NIL      reduce using rule 77 (relationalOp)
    INTEGER  reduce using rule 77 (relationalOp)
    DECIMAL  reduce using rule 77 (relationalOp)
    ADD      reduce using rule 77 (relationalOp)
    SUB      reduce using rule 77 (relationalOp)
    PARENL   reduce using rule 77 (relationalOp)


State 114

   78 relationalOp: EQUALS •

    ID       reduce using rule 78 (relationalOp)
    NIL      reduce using rule 78 (relationalOp)
    INTEGER  reduce using rule 78 (relationalOp)
    DECIMAL  reduce using rule 78 (relationalOp)
    ADD      reduce using rule 78 (relationalOp)
    SUB      reduce using rule 78 (relationalOp)
    PARENL   reduce using rule 78 (relationalOp)


State 115

   79 relationalOp: DIFFERENT •

    ID       reduce using rule 79 (relationalOp)
    NIL      reduce using rule 79 (relationalOp)
    INTEGER  reduce using rule 79 (relationalOp)
    DECIMAL  reduce using rule 79 (relationalOp)
    ADD      reduce using rule 79 (relationalOp)
    SUB      reduce using rule 79 (relationalOp)
    PARENL   reduce using rule 79 (relationalOp)


State 116

   72 relationalExp: relationalExp relationalOp • sumExp

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    constOp  go to state 73
    sumExp   go to state 148
    sumOp    go to state 79
    mulExp   go to state 80
    factor   go to state 81
    fCall    go to state 82


State 117

   80 sumExp: sumExp sumOp • mulExp

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    constOp  go to state 73
    sumOp    go to state 79
    mulExp   go to state 149
    factor   go to state 81
    fCall    go to state 82


State 118

   86 mulExp: sumOp factor •

    ADD        reduce using rule 86 (mulExp)
    SUB        reduce using rule 86 (mulExp)
    MULT       reduce using rule 86 (mulExp)
    DIV        reduce using rule 86 (mulExp)
    OR         reduce using rule 86 (mulExp)
    AND        reduce using rule 86 (mulExp)
    SMALLER    reduce using rule 86 (mulExp)
    GREATER    reduce using rule 86 (mulExp)
    SMALLEQ    reduce using rule 86 (mulExp)
    GREATEQ    reduce using rule 86 (mulExp)
    EQUALS     reduce using rule 86 (mulExp)
    DIFFERENT  reduce using rule 86 (mulExp)
    SEMIC      reduce using rule 86 (mulExp)


State 119

   87 mulOp: MULT •

    ID       reduce using rule 87 (mulOp)
    NIL      reduce using rule 87 (mulOp)
    INTEGER  reduce using rule 87 (mulOp)
    DECIMAL  reduce using rule 87 (mulOp)
    PARENL   reduce using rule 87 (mulOp)


State 120

   88 mulOp: DIV •

    ID       reduce using rule 88 (mulOp)
    NIL      reduce using rule 88 (mulOp)
    INTEGER  reduce using rule 88 (mulOp)
    DECIMAL  reduce using rule 88 (mulOp)
    PARENL   reduce using rule 88 (mulOp)


State 121

   84 mulExp: mulExp mulOp • factor

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    PARENL   shift, and go to state 55

    constOp  go to state 73
    factor   go to state 150
    fCall    go to state 82


State 122

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 • stmtList ENDFUNC

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    stmtList              go to state 151
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 123

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList • ENDFUNC
   27 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 152
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 104
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 124

   10 funcDeclaration: TYPE ID PARENL $@1 params PARENR STFUNC $@2 stmtList ENDFUNC •

    $end  reduce using rule 10 (funcDeclaration)
    TYPE  reduce using rule 10 (funcDeclaration)


State 125

   47 appendOps: ID APPEND ID •

    SEMIC  reduce using rule 47 (appendOps)


State 126

   53 mapFilterOps: ID FILTER ID •

    SEMIC  reduce using rule 53 (mapFilterOps)


State 127

   57 assignExp: ID ASSIGN expression •

    SEMIC  reduce using rule 57 (assignExp)


State 128

   52 mapFilterOps: ID MAP ID •

    SEMIC  reduce using rule 52 (mapFilterOps)


State 129

   94 fCall: ID PARENL PARENR •

    ADD        reduce using rule 94 (fCall)
    SUB        reduce using rule 94 (fCall)
    MULT       reduce using rule 94 (fCall)
    DIV        reduce using rule 94 (fCall)
    OR         reduce using rule 94 (fCall)
    AND        reduce using rule 94 (fCall)
    SMALLER    reduce using rule 94 (fCall)
    GREATER    reduce using rule 94 (fCall)
    SMALLEQ    reduce using rule 94 (fCall)
    GREATEQ    reduce using rule 94 (fCall)
    EQUALS     reduce using rule 94 (fCall)
    DIFFERENT  reduce using rule 94 (fCall)
    SEMIC      reduce using rule 94 (fCall)


State 130

   96 callParams: simpleExp •

    COMMA   reduce using rule 96 (callParams)
    PARENR  reduce using rule 96 (callParams)


State 131

   93 fCall: ID PARENL callParams • PARENR
   95 callParams: callParams • COMMA simpleExp

    COMMA   shift, and go to state 153
    PARENR  shift, and go to state 154


State 132

   21 simpleVarDeclaration: TYPE LISTTYPE ID •

    SEMIC  reduce using rule 21 (simpleVarDeclaration)


State 133

   38 condStmt: IF PARENL simpleExp • PARENR primitiveStmt
   39         | IF PARENL simpleExp • PARENR primitiveStmt ELSE primitiveStmt

    PARENR  shift, and go to state 155


State 134

   57 assignExp: ID • ASSIGN expression
   89 factor: ID •
   93 fCall: ID • PARENL callParams PARENR
   94      | ID • PARENL PARENR

    ASSIGN  shift, and go to state 88
    PARENL  shift, and go to state 90

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    SEMIC      reduce using rule 89 (factor)


State 135

   40 iterStmt: FOR PARENL assignExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 156


State 136

   41 iterStmt: FOR PARENL simpleExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 157


State 137

   62 inOp: READ PARENL ID • PARENR SEMIC

    PARENR  shift, and go to state 158


State 138

   47 appendOps: ID • APPEND ID
   52 mapFilterOps: ID • MAP ID
   53             | ID • FILTER ID
   89 factor: ID •
   93 fCall: ID • PARENL callParams PARENR
   94      | ID • PARENL PARENR

    APPEND  shift, and go to state 222
    FILTER  shift, and go to state 223
    MAP     shift, and go to state 224
    PARENL  shift, and go to state 215

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    PARENR     reduce using rule 89 (factor)


State 139

   65 outConst: STRING •

    PARENR  reduce using rule 65 (outConst)


State 140

   67 outConst: listExp •

    PARENR  reduce using rule 67 (outConst)


State 141

   66 outConst: simpleExp •

    PARENR  reduce using rule 66 (outConst)


State 142

   63 outOp: WRITE PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 159


State 143

   64 outOp: WRITELN PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 160


State 144

   42 returnStmt: RETURN expression SEMIC •

    ID           reduce using rule 42 (returnStmt)
    TYPE         reduce using rule 42 (returnStmt)
    NIL          reduce using rule 42 (returnStmt)
    INTEGER      reduce using rule 42 (returnStmt)
    DECIMAL      reduce using rule 42 (returnStmt)
    ADD          reduce using rule 42 (returnStmt)
    SUB          reduce using rule 42 (returnStmt)
    HEADLIST     reduce using rule 42 (returnStmt)
    TAILLIST     reduce using rule 42 (returnStmt)
    DESTROYHEAD  reduce using rule 42 (returnStmt)
    IF           reduce using rule 42 (returnStmt)
    FOR          reduce using rule 42 (returnStmt)
    READ         reduce using rule 42 (returnStmt)
    WRITE        reduce using rule 42 (returnStmt)
    WRITELN      reduce using rule 42 (returnStmt)
    RETURN       reduce using rule 42 (returnStmt)
    STFUNC       reduce using rule 42 (returnStmt)
    ENDFUNC      reduce using rule 42 (returnStmt)
    PARENL       reduce using rule 42 (returnStmt)


State 145

   26 compoundStmt: STFUNC stmtList ENDFUNC •

    ID           reduce using rule 26 (compoundStmt)
    TYPE         reduce using rule 26 (compoundStmt)
    NIL          reduce using rule 26 (compoundStmt)
    INTEGER      reduce using rule 26 (compoundStmt)
    DECIMAL      reduce using rule 26 (compoundStmt)
    ADD          reduce using rule 26 (compoundStmt)
    SUB          reduce using rule 26 (compoundStmt)
    HEADLIST     reduce using rule 26 (compoundStmt)
    TAILLIST     reduce using rule 26 (compoundStmt)
    DESTROYHEAD  reduce using rule 26 (compoundStmt)
    IF           reduce using rule 26 (compoundStmt)
    FOR          reduce using rule 26 (compoundStmt)
    READ         reduce using rule 26 (compoundStmt)
    WRITE        reduce using rule 26 (compoundStmt)
    WRITELN      reduce using rule 26 (compoundStmt)
    RETURN       reduce using rule 26 (compoundStmt)
    STFUNC       reduce using rule 26 (compoundStmt)
    ENDFUNC      reduce using rule 26 (compoundStmt)
    PARENL       reduce using rule 26 (compoundStmt)


State 146

   91 factor: PARENL simpleExp PARENR •

    ADD        reduce using rule 91 (factor)
    SUB        reduce using rule 91 (factor)
    MULT       reduce using rule 91 (factor)
    DIV        reduce using rule 91 (factor)
    OR         reduce using rule 91 (factor)
    AND        reduce using rule 91 (factor)
    SMALLER    reduce using rule 91 (factor)
    GREATER    reduce using rule 91 (factor)
    SMALLEQ    reduce using rule 91 (factor)
    GREATEQ    reduce using rule 91 (factor)
    EQUALS     reduce using rule 91 (factor)
    DIFFERENT  reduce using rule 91 (factor)
    SEMIC      reduce using rule 91 (factor)


State 147

   68 binLogicalExp: binLogicalExp binLogicalOp relationalOp •

    OR     reduce using rule 68 (binLogicalExp)
    AND    reduce using rule 68 (binLogicalExp)
    SEMIC  reduce using rule 68 (binLogicalExp)


State 148

   72 relationalExp: relationalExp relationalOp sumExp •
   80 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 193
    SUB  shift, and go to state 194

    OR         reduce using rule 72 (relationalExp)
    AND        reduce using rule 72 (relationalExp)
    SMALLER    reduce using rule 72 (relationalExp)
    GREATER    reduce using rule 72 (relationalExp)
    SMALLEQ    reduce using rule 72 (relationalExp)
    GREATEQ    reduce using rule 72 (relationalExp)
    EQUALS     reduce using rule 72 (relationalExp)
    DIFFERENT  reduce using rule 72 (relationalExp)
    SEMIC      reduce using rule 72 (relationalExp)

    sumOp  go to state 117


State 149

   80 sumExp: sumExp sumOp mulExp •
   84 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 119
    DIV   shift, and go to state 120

    ADD        reduce using rule 80 (sumExp)
    SUB        reduce using rule 80 (sumExp)
    OR         reduce using rule 80 (sumExp)
    AND        reduce using rule 80 (sumExp)
    SMALLER    reduce using rule 80 (sumExp)
    GREATER    reduce using rule 80 (sumExp)
    SMALLEQ    reduce using rule 80 (sumExp)
    GREATEQ    reduce using rule 80 (sumExp)
    EQUALS     reduce using rule 80 (sumExp)
    DIFFERENT  reduce using rule 80 (sumExp)
    SEMIC      reduce using rule 80 (sumExp)

    mulOp  go to state 121


State 150

   84 mulExp: mulExp mulOp factor •

    ADD        reduce using rule 84 (mulExp)
    SUB        reduce using rule 84 (mulExp)
    MULT       reduce using rule 84 (mulExp)
    DIV        reduce using rule 84 (mulExp)
    OR         reduce using rule 84 (mulExp)
    AND        reduce using rule 84 (mulExp)
    SMALLER    reduce using rule 84 (mulExp)
    GREATER    reduce using rule 84 (mulExp)
    SMALLEQ    reduce using rule 84 (mulExp)
    GREATEQ    reduce using rule 84 (mulExp)
    EQUALS     reduce using rule 84 (mulExp)
    DIFFERENT  reduce using rule 84 (mulExp)
    SEMIC      reduce using rule 84 (mulExp)


State 151

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList • ENDFUNC
   27 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 161
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 104
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 152

   19 funcDeclaration: TYPE LISTTYPE ID PARENL $@7 PARENR STFUNC $@8 stmtList ENDFUNC •

    $end  reduce using rule 19 (funcDeclaration)
    TYPE  reduce using rule 19 (funcDeclaration)


State 153

   95 callParams: callParams COMMA • simpleExp

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 200

    simpleExp      go to state 162
    constOp        go to state 201
    binLogicalExp  go to state 202
    relationalExp  go to state 203
    sumExp         go to state 204
    sumOp          go to state 205
    mulExp         go to state 206
    factor         go to state 207
    fCall          go to state 208


State 154

   93 fCall: ID PARENL callParams PARENR •

    ADD        reduce using rule 93 (fCall)
    SUB        reduce using rule 93 (fCall)
    MULT       reduce using rule 93 (fCall)
    DIV        reduce using rule 93 (fCall)
    OR         reduce using rule 93 (fCall)
    AND        reduce using rule 93 (fCall)
    SMALLER    reduce using rule 93 (fCall)
    GREATER    reduce using rule 93 (fCall)
    SMALLEQ    reduce using rule 93 (fCall)
    GREATEQ    reduce using rule 93 (fCall)
    EQUALS     reduce using rule 93 (fCall)
    DIFFERENT  reduce using rule 93 (fCall)
    SEMIC      reduce using rule 93 (fCall)


State 155

   38 condStmt: IF PARENL simpleExp PARENR • primitiveStmt
   39         | IF PARENL simpleExp PARENR • primitiveStmt ELSE primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 225
    FOR          shift, and go to state 226
    READ         shift, and go to state 227
    WRITE        shift, and go to state 228
    WRITELN      shift, and go to state 229
    RETURN       shift, and go to state 230
    STFUNC       shift, and go to state 231
    PARENL       shift, and go to state 55

    varDeclaration        go to state 232
    simpleVarDeclaration  go to state 233
    compoundStmt          go to state 234
    primitiveStmt         go to state 163
    exprStmt              go to state 235
    condStmt              go to state 236
    iterStmt              go to state 237
    returnStmt            go to state 238
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 239
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 240
    outOp                 go to state 241
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 156

   40 iterStmt: FOR PARENL assignExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 164
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 157

   41 iterStmt: FOR PARENL simpleExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 165
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 158

   62 inOp: READ PARENL ID PARENR • SEMIC

    SEMIC  shift, and go to state 166


State 159

   63 outOp: WRITE PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 167


State 160

   64 outOp: WRITELN PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 168


State 161

   16 funcDeclaration: TYPE LISTTYPE ID PARENL $@5 params PARENR STFUNC $@6 stmtList ENDFUNC •

    $end  reduce using rule 16 (funcDeclaration)
    TYPE  reduce using rule 16 (funcDeclaration)


State 162

   95 callParams: callParams COMMA simpleExp •

    COMMA   reduce using rule 95 (callParams)
    PARENR  reduce using rule 95 (callParams)


State 163

   38 condStmt: IF PARENL simpleExp PARENR primitiveStmt •
   39         | IF PARENL simpleExp PARENR primitiveStmt • ELSE primitiveStmt

    ELSE  shift, and go to state 169

    ID           reduce using rule 38 (condStmt)
    TYPE         reduce using rule 38 (condStmt)
    NIL          reduce using rule 38 (condStmt)
    INTEGER      reduce using rule 38 (condStmt)
    DECIMAL      reduce using rule 38 (condStmt)
    ADD          reduce using rule 38 (condStmt)
    SUB          reduce using rule 38 (condStmt)
    HEADLIST     reduce using rule 38 (condStmt)
    TAILLIST     reduce using rule 38 (condStmt)
    DESTROYHEAD  reduce using rule 38 (condStmt)
    IF           reduce using rule 38 (condStmt)
    FOR          reduce using rule 38 (condStmt)
    READ         reduce using rule 38 (condStmt)
    WRITE        reduce using rule 38 (condStmt)
    WRITELN      reduce using rule 38 (condStmt)
    RETURN       reduce using rule 38 (condStmt)
    STFUNC       reduce using rule 38 (condStmt)
    ENDFUNC      reduce using rule 38 (condStmt)
    PARENL       reduce using rule 38 (condStmt)


State 164

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 170


State 165

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 171


State 166

   62 inOp: READ PARENL ID PARENR SEMIC •

    ID           reduce using rule 62 (inOp)
    TYPE         reduce using rule 62 (inOp)
    NIL          reduce using rule 62 (inOp)
    INTEGER      reduce using rule 62 (inOp)
    DECIMAL      reduce using rule 62 (inOp)
    ADD          reduce using rule 62 (inOp)
    SUB          reduce using rule 62 (inOp)
    HEADLIST     reduce using rule 62 (inOp)
    TAILLIST     reduce using rule 62 (inOp)
    DESTROYHEAD  reduce using rule 62 (inOp)
    IF           reduce using rule 62 (inOp)
    FOR          reduce using rule 62 (inOp)
    READ         reduce using rule 62 (inOp)
    WRITE        reduce using rule 62 (inOp)
    WRITELN      reduce using rule 62 (inOp)
    RETURN       reduce using rule 62 (inOp)
    STFUNC       reduce using rule 62 (inOp)
    ENDFUNC      reduce using rule 62 (inOp)
    PARENL       reduce using rule 62 (inOp)


State 167

   63 outOp: WRITE PARENL outConst PARENR SEMIC •

    ID           reduce using rule 63 (outOp)
    TYPE         reduce using rule 63 (outOp)
    NIL          reduce using rule 63 (outOp)
    INTEGER      reduce using rule 63 (outOp)
    DECIMAL      reduce using rule 63 (outOp)
    ADD          reduce using rule 63 (outOp)
    SUB          reduce using rule 63 (outOp)
    HEADLIST     reduce using rule 63 (outOp)
    TAILLIST     reduce using rule 63 (outOp)
    DESTROYHEAD  reduce using rule 63 (outOp)
    IF           reduce using rule 63 (outOp)
    FOR          reduce using rule 63 (outOp)
    READ         reduce using rule 63 (outOp)
    WRITE        reduce using rule 63 (outOp)
    WRITELN      reduce using rule 63 (outOp)
    RETURN       reduce using rule 63 (outOp)
    STFUNC       reduce using rule 63 (outOp)
    ENDFUNC      reduce using rule 63 (outOp)
    PARENL       reduce using rule 63 (outOp)


State 168

   64 outOp: WRITELN PARENL outConst PARENR SEMIC •

    ID           reduce using rule 64 (outOp)
    TYPE         reduce using rule 64 (outOp)
    NIL          reduce using rule 64 (outOp)
    INTEGER      reduce using rule 64 (outOp)
    DECIMAL      reduce using rule 64 (outOp)
    ADD          reduce using rule 64 (outOp)
    SUB          reduce using rule 64 (outOp)
    HEADLIST     reduce using rule 64 (outOp)
    TAILLIST     reduce using rule 64 (outOp)
    DESTROYHEAD  reduce using rule 64 (outOp)
    IF           reduce using rule 64 (outOp)
    FOR          reduce using rule 64 (outOp)
    READ         reduce using rule 64 (outOp)
    WRITE        reduce using rule 64 (outOp)
    WRITELN      reduce using rule 64 (outOp)
    RETURN       reduce using rule 64 (outOp)
    STFUNC       reduce using rule 64 (outOp)
    ENDFUNC      reduce using rule 64 (outOp)
    PARENL       reduce using rule 64 (outOp)


State 169

   39 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 172
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 170

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 173

    assignExp  go to state 174


State 171

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 173

    assignExp  go to state 175


State 172

   39 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt •

    ID           reduce using rule 39 (condStmt)
    TYPE         reduce using rule 39 (condStmt)
    NIL          reduce using rule 39 (condStmt)
    INTEGER      reduce using rule 39 (condStmt)
    DECIMAL      reduce using rule 39 (condStmt)
    ADD          reduce using rule 39 (condStmt)
    SUB          reduce using rule 39 (condStmt)
    HEADLIST     reduce using rule 39 (condStmt)
    TAILLIST     reduce using rule 39 (condStmt)
    DESTROYHEAD  reduce using rule 39 (condStmt)
    IF           reduce using rule 39 (condStmt)
    FOR          reduce using rule 39 (condStmt)
    READ         reduce using rule 39 (condStmt)
    WRITE        reduce using rule 39 (condStmt)
    WRITELN      reduce using rule 39 (condStmt)
    RETURN       reduce using rule 39 (condStmt)
    STFUNC       reduce using rule 39 (condStmt)
    ENDFUNC      reduce using rule 39 (condStmt)
    PARENL       reduce using rule 39 (condStmt)


State 173

   57 assignExp: ID • ASSIGN expression

    ASSIGN  shift, and go to state 242


State 174

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 176


State 175

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 177


State 176

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 178
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 177

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 179
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 178

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 40 (iterStmt)
    TYPE         reduce using rule 40 (iterStmt)
    NIL          reduce using rule 40 (iterStmt)
    INTEGER      reduce using rule 40 (iterStmt)
    DECIMAL      reduce using rule 40 (iterStmt)
    ADD          reduce using rule 40 (iterStmt)
    SUB          reduce using rule 40 (iterStmt)
    HEADLIST     reduce using rule 40 (iterStmt)
    TAILLIST     reduce using rule 40 (iterStmt)
    DESTROYHEAD  reduce using rule 40 (iterStmt)
    IF           reduce using rule 40 (iterStmt)
    FOR          reduce using rule 40 (iterStmt)
    READ         reduce using rule 40 (iterStmt)
    WRITE        reduce using rule 40 (iterStmt)
    WRITELN      reduce using rule 40 (iterStmt)
    RETURN       reduce using rule 40 (iterStmt)
    STFUNC       reduce using rule 40 (iterStmt)
    ENDFUNC      reduce using rule 40 (iterStmt)
    PARENL       reduce using rule 40 (iterStmt)


State 179

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 41 (iterStmt)
    TYPE         reduce using rule 41 (iterStmt)
    NIL          reduce using rule 41 (iterStmt)
    INTEGER      reduce using rule 41 (iterStmt)
    DECIMAL      reduce using rule 41 (iterStmt)
    ADD          reduce using rule 41 (iterStmt)
    SUB          reduce using rule 41 (iterStmt)
    HEADLIST     reduce using rule 41 (iterStmt)
    TAILLIST     reduce using rule 41 (iterStmt)
    DESTROYHEAD  reduce using rule 41 (iterStmt)
    IF           reduce using rule 41 (iterStmt)
    FOR          reduce using rule 41 (iterStmt)
    READ         reduce using rule 41 (iterStmt)
    WRITE        reduce using rule 41 (iterStmt)
    WRITELN      reduce using rule 41 (iterStmt)
    RETURN       reduce using rule 41 (iterStmt)
    STFUNC       reduce using rule 41 (iterStmt)
    ENDFUNC      reduce using rule 41 (iterStmt)
    PARENL       reduce using rule 41 (iterStmt)


State 180

    7 varDeclaration: simpleVarDeclaration • SEMIC

    SEMIC  shift, and go to state 243


State 181

   61 constOp: NIL •

    ADD        reduce using rule 61 (constOp)
    SUB        reduce using rule 61 (constOp)
    MULT       reduce using rule 61 (constOp)
    DIV        reduce using rule 61 (constOp)
    OR         reduce using rule 61 (constOp)
    AND        reduce using rule 61 (constOp)
    SMALLER    reduce using rule 61 (constOp)
    GREATER    reduce using rule 61 (constOp)
    SMALLEQ    reduce using rule 61 (constOp)
    GREATEQ    reduce using rule 61 (constOp)
    EQUALS     reduce using rule 61 (constOp)
    DIFFERENT  reduce using rule 61 (constOp)
    PARENR     reduce using rule 61 (constOp)


State 182

   59 constOp: INTEGER •

    ADD        reduce using rule 59 (constOp)
    SUB        reduce using rule 59 (constOp)
    MULT       reduce using rule 59 (constOp)
    DIV        reduce using rule 59 (constOp)
    OR         reduce using rule 59 (constOp)
    AND        reduce using rule 59 (constOp)
    SMALLER    reduce using rule 59 (constOp)
    GREATER    reduce using rule 59 (constOp)
    SMALLEQ    reduce using rule 59 (constOp)
    GREATEQ    reduce using rule 59 (constOp)
    EQUALS     reduce using rule 59 (constOp)
    DIFFERENT  reduce using rule 59 (constOp)
    PARENR     reduce using rule 59 (constOp)


State 183

   60 constOp: DECIMAL •

    ADD        reduce using rule 60 (constOp)
    SUB        reduce using rule 60 (constOp)
    MULT       reduce using rule 60 (constOp)
    DIV        reduce using rule 60 (constOp)
    OR         reduce using rule 60 (constOp)
    AND        reduce using rule 60 (constOp)
    SMALLER    reduce using rule 60 (constOp)
    GREATER    reduce using rule 60 (constOp)
    SMALLEQ    reduce using rule 60 (constOp)
    GREATEQ    reduce using rule 60 (constOp)
    EQUALS     reduce using rule 60 (constOp)
    DIFFERENT  reduce using rule 60 (constOp)
    PARENR     reduce using rule 60 (constOp)


State 184

   91 factor: PARENL • simpleExp PARENR

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 184

    simpleExp      go to state 244
    constOp        go to state 185
    binLogicalExp  go to state 186
    relationalExp  go to state 187
    sumExp         go to state 188
    sumOp          go to state 189
    mulExp         go to state 190
    factor         go to state 191
    fCall          go to state 192


State 185

   92 factor: constOp •

    ADD        reduce using rule 92 (factor)
    SUB        reduce using rule 92 (factor)
    MULT       reduce using rule 92 (factor)
    DIV        reduce using rule 92 (factor)
    OR         reduce using rule 92 (factor)
    AND        reduce using rule 92 (factor)
    SMALLER    reduce using rule 92 (factor)
    GREATER    reduce using rule 92 (factor)
    SMALLEQ    reduce using rule 92 (factor)
    GREATEQ    reduce using rule 92 (factor)
    EQUALS     reduce using rule 92 (factor)
    DIFFERENT  reduce using rule 92 (factor)
    PARENR     reduce using rule 92 (factor)


State 186

   58 simpleExp: binLogicalExp •
   68 binLogicalExp: binLogicalExp • binLogicalOp relationalOp

    OR   shift, and go to state 107
    AND  shift, and go to state 108

    PARENR  reduce using rule 58 (simpleExp)

    binLogicalOp  go to state 245


State 187

   69 binLogicalExp: relationalExp •
   72 relationalExp: relationalExp • relationalOp sumExp

    SMALLER    shift, and go to state 110
    GREATER    shift, and go to state 111
    SMALLEQ    shift, and go to state 112
    GREATEQ    shift, and go to state 113
    EQUALS     shift, and go to state 114
    DIFFERENT  shift, and go to state 115

    OR      reduce using rule 69 (binLogicalExp)
    AND     reduce using rule 69 (binLogicalExp)
    PARENR  reduce using rule 69 (binLogicalExp)

    relationalOp  go to state 246


State 188

   73 relationalExp: sumExp •
   80 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 193
    SUB  shift, and go to state 194

    OR         reduce using rule 73 (relationalExp)
    AND        reduce using rule 73 (relationalExp)
    SMALLER    reduce using rule 73 (relationalExp)
    GREATER    reduce using rule 73 (relationalExp)
    SMALLEQ    reduce using rule 73 (relationalExp)
    GREATEQ    reduce using rule 73 (relationalExp)
    EQUALS     reduce using rule 73 (relationalExp)
    DIFFERENT  reduce using rule 73 (relationalExp)
    PARENR     reduce using rule 73 (relationalExp)

    sumOp  go to state 247


State 189

   86 mulExp: sumOp • factor

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    PARENL   shift, and go to state 184

    constOp  go to state 185
    factor   go to state 248
    fCall    go to state 192


State 190

   81 sumExp: mulExp •
   84 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 119
    DIV   shift, and go to state 120

    ADD        reduce using rule 81 (sumExp)
    SUB        reduce using rule 81 (sumExp)
    OR         reduce using rule 81 (sumExp)
    AND        reduce using rule 81 (sumExp)
    SMALLER    reduce using rule 81 (sumExp)
    GREATER    reduce using rule 81 (sumExp)
    SMALLEQ    reduce using rule 81 (sumExp)
    GREATEQ    reduce using rule 81 (sumExp)
    EQUALS     reduce using rule 81 (sumExp)
    DIFFERENT  reduce using rule 81 (sumExp)
    PARENR     reduce using rule 81 (sumExp)

    mulOp  go to state 249


State 191

   85 mulExp: factor •

    ADD        reduce using rule 85 (mulExp)
    SUB        reduce using rule 85 (mulExp)
    MULT       reduce using rule 85 (mulExp)
    DIV        reduce using rule 85 (mulExp)
    OR         reduce using rule 85 (mulExp)
    AND        reduce using rule 85 (mulExp)
    SMALLER    reduce using rule 85 (mulExp)
    GREATER    reduce using rule 85 (mulExp)
    SMALLEQ    reduce using rule 85 (mulExp)
    GREATEQ    reduce using rule 85 (mulExp)
    EQUALS     reduce using rule 85 (mulExp)
    DIFFERENT  reduce using rule 85 (mulExp)
    PARENR     reduce using rule 85 (mulExp)


State 192

   90 factor: fCall •

    ADD        reduce using rule 90 (factor)
    SUB        reduce using rule 90 (factor)
    MULT       reduce using rule 90 (factor)
    DIV        reduce using rule 90 (factor)
    OR         reduce using rule 90 (factor)
    AND        reduce using rule 90 (factor)
    SMALLER    reduce using rule 90 (factor)
    GREATER    reduce using rule 90 (factor)
    SMALLEQ    reduce using rule 90 (factor)
    GREATEQ    reduce using rule 90 (factor)
    EQUALS     reduce using rule 90 (factor)
    DIFFERENT  reduce using rule 90 (factor)
    PARENR     reduce using rule 90 (factor)


State 193

   82 sumOp: ADD •

    ID       reduce using rule 82 (sumOp)
    NIL      reduce using rule 82 (sumOp)
    INTEGER  reduce using rule 82 (sumOp)
    DECIMAL  reduce using rule 82 (sumOp)
    ADD      reduce using rule 82 (sumOp)
    SUB      reduce using rule 82 (sumOp)
    PARENL   reduce using rule 82 (sumOp)


State 194

   83 sumOp: SUB •

    ID       reduce using rule 83 (sumOp)
    NIL      reduce using rule 83 (sumOp)
    INTEGER  reduce using rule 83 (sumOp)
    DECIMAL  reduce using rule 83 (sumOp)
    ADD      reduce using rule 83 (sumOp)
    SUB      reduce using rule 83 (sumOp)
    PARENL   reduce using rule 83 (sumOp)


State 195

   89 factor: ID •
   93 fCall: ID • PARENL callParams PARENR
   94      | ID • PARENL PARENR

    PARENL  shift, and go to state 90

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    SEMIC      reduce using rule 89 (factor)


State 196

   89 factor: ID •
   93 fCall: ID • PARENL callParams PARENR
   94      | ID • PARENL PARENR

    PARENL  shift, and go to state 250

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    COMMA      reduce using rule 89 (factor)
    PARENR     reduce using rule 89 (factor)


State 197

   61 constOp: NIL •

    ADD        reduce using rule 61 (constOp)
    SUB        reduce using rule 61 (constOp)
    MULT       reduce using rule 61 (constOp)
    DIV        reduce using rule 61 (constOp)
    OR         reduce using rule 61 (constOp)
    AND        reduce using rule 61 (constOp)
    SMALLER    reduce using rule 61 (constOp)
    GREATER    reduce using rule 61 (constOp)
    SMALLEQ    reduce using rule 61 (constOp)
    GREATEQ    reduce using rule 61 (constOp)
    EQUALS     reduce using rule 61 (constOp)
    DIFFERENT  reduce using rule 61 (constOp)
    COMMA      reduce using rule 61 (constOp)
    PARENR     reduce using rule 61 (constOp)


State 198

   59 constOp: INTEGER •

    ADD        reduce using rule 59 (constOp)
    SUB        reduce using rule 59 (constOp)
    MULT       reduce using rule 59 (constOp)
    DIV        reduce using rule 59 (constOp)
    OR         reduce using rule 59 (constOp)
    AND        reduce using rule 59 (constOp)
    SMALLER    reduce using rule 59 (constOp)
    GREATER    reduce using rule 59 (constOp)
    SMALLEQ    reduce using rule 59 (constOp)
    GREATEQ    reduce using rule 59 (constOp)
    EQUALS     reduce using rule 59 (constOp)
    DIFFERENT  reduce using rule 59 (constOp)
    COMMA      reduce using rule 59 (constOp)
    PARENR     reduce using rule 59 (constOp)


State 199

   60 constOp: DECIMAL •

    ADD        reduce using rule 60 (constOp)
    SUB        reduce using rule 60 (constOp)
    MULT       reduce using rule 60 (constOp)
    DIV        reduce using rule 60 (constOp)
    OR         reduce using rule 60 (constOp)
    AND        reduce using rule 60 (constOp)
    SMALLER    reduce using rule 60 (constOp)
    GREATER    reduce using rule 60 (constOp)
    SMALLEQ    reduce using rule 60 (constOp)
    GREATEQ    reduce using rule 60 (constOp)
    EQUALS     reduce using rule 60 (constOp)
    DIFFERENT  reduce using rule 60 (constOp)
    COMMA      reduce using rule 60 (constOp)
    PARENR     reduce using rule 60 (constOp)


State 200

   91 factor: PARENL • simpleExp PARENR

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 184

    simpleExp      go to state 251
    constOp        go to state 185
    binLogicalExp  go to state 186
    relationalExp  go to state 187
    sumExp         go to state 188
    sumOp          go to state 189
    mulExp         go to state 190
    factor         go to state 191
    fCall          go to state 192


State 201

   92 factor: constOp •

    ADD        reduce using rule 92 (factor)
    SUB        reduce using rule 92 (factor)
    MULT       reduce using rule 92 (factor)
    DIV        reduce using rule 92 (factor)
    OR         reduce using rule 92 (factor)
    AND        reduce using rule 92 (factor)
    SMALLER    reduce using rule 92 (factor)
    GREATER    reduce using rule 92 (factor)
    SMALLEQ    reduce using rule 92 (factor)
    GREATEQ    reduce using rule 92 (factor)
    EQUALS     reduce using rule 92 (factor)
    DIFFERENT  reduce using rule 92 (factor)
    COMMA      reduce using rule 92 (factor)
    PARENR     reduce using rule 92 (factor)


State 202

   58 simpleExp: binLogicalExp •
   68 binLogicalExp: binLogicalExp • binLogicalOp relationalOp

    OR   shift, and go to state 107
    AND  shift, and go to state 108

    COMMA   reduce using rule 58 (simpleExp)
    PARENR  reduce using rule 58 (simpleExp)

    binLogicalOp  go to state 252


State 203

   69 binLogicalExp: relationalExp •
   72 relationalExp: relationalExp • relationalOp sumExp

    SMALLER    shift, and go to state 110
    GREATER    shift, and go to state 111
    SMALLEQ    shift, and go to state 112
    GREATEQ    shift, and go to state 113
    EQUALS     shift, and go to state 114
    DIFFERENT  shift, and go to state 115

    OR      reduce using rule 69 (binLogicalExp)
    AND     reduce using rule 69 (binLogicalExp)
    COMMA   reduce using rule 69 (binLogicalExp)
    PARENR  reduce using rule 69 (binLogicalExp)

    relationalOp  go to state 253


State 204

   73 relationalExp: sumExp •
   80 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 193
    SUB  shift, and go to state 194

    OR         reduce using rule 73 (relationalExp)
    AND        reduce using rule 73 (relationalExp)
    SMALLER    reduce using rule 73 (relationalExp)
    GREATER    reduce using rule 73 (relationalExp)
    SMALLEQ    reduce using rule 73 (relationalExp)
    GREATEQ    reduce using rule 73 (relationalExp)
    EQUALS     reduce using rule 73 (relationalExp)
    DIFFERENT  reduce using rule 73 (relationalExp)
    COMMA      reduce using rule 73 (relationalExp)
    PARENR     reduce using rule 73 (relationalExp)

    sumOp  go to state 254


State 205

   86 mulExp: sumOp • factor

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    PARENL   shift, and go to state 200

    constOp  go to state 201
    factor   go to state 255
    fCall    go to state 208


State 206

   81 sumExp: mulExp •
   84 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 119
    DIV   shift, and go to state 120

    ADD        reduce using rule 81 (sumExp)
    SUB        reduce using rule 81 (sumExp)
    OR         reduce using rule 81 (sumExp)
    AND        reduce using rule 81 (sumExp)
    SMALLER    reduce using rule 81 (sumExp)
    GREATER    reduce using rule 81 (sumExp)
    SMALLEQ    reduce using rule 81 (sumExp)
    GREATEQ    reduce using rule 81 (sumExp)
    EQUALS     reduce using rule 81 (sumExp)
    DIFFERENT  reduce using rule 81 (sumExp)
    COMMA      reduce using rule 81 (sumExp)
    PARENR     reduce using rule 81 (sumExp)

    mulOp  go to state 256


State 207

   85 mulExp: factor •

    ADD        reduce using rule 85 (mulExp)
    SUB        reduce using rule 85 (mulExp)
    MULT       reduce using rule 85 (mulExp)
    DIV        reduce using rule 85 (mulExp)
    OR         reduce using rule 85 (mulExp)
    AND        reduce using rule 85 (mulExp)
    SMALLER    reduce using rule 85 (mulExp)
    GREATER    reduce using rule 85 (mulExp)
    SMALLEQ    reduce using rule 85 (mulExp)
    GREATEQ    reduce using rule 85 (mulExp)
    EQUALS     reduce using rule 85 (mulExp)
    DIFFERENT  reduce using rule 85 (mulExp)
    COMMA      reduce using rule 85 (mulExp)
    PARENR     reduce using rule 85 (mulExp)


State 208

   90 factor: fCall •

    ADD        reduce using rule 90 (factor)
    SUB        reduce using rule 90 (factor)
    MULT       reduce using rule 90 (factor)
    DIV        reduce using rule 90 (factor)
    OR         reduce using rule 90 (factor)
    AND        reduce using rule 90 (factor)
    SMALLER    reduce using rule 90 (factor)
    GREATER    reduce using rule 90 (factor)
    SMALLEQ    reduce using rule 90 (factor)
    GREATEQ    reduce using rule 90 (factor)
    EQUALS     reduce using rule 90 (factor)
    DIFFERENT  reduce using rule 90 (factor)
    COMMA      reduce using rule 90 (factor)
    PARENR     reduce using rule 90 (factor)


State 209

   51 destroyHeadOps: DESTROYHEAD • ID

    ID  shift, and go to state 257


State 210

   43 listExp: appendOps •

    PARENR  reduce using rule 43 (listExp)


State 211

   44 listExp: returnListOps •

    PARENR  reduce using rule 44 (listExp)


State 212

   48 returnListOps: returnListOp • ID

    ID  shift, and go to state 258


State 213

   45 listExp: destroyHeadOps •

    PARENR  reduce using rule 45 (listExp)


State 214

   46 listExp: mapFilterOps •

    PARENR  reduce using rule 46 (listExp)


State 215

   93 fCall: ID PARENL • callParams PARENR
   94      | ID PARENL • PARENR

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 200
    PARENR   shift, and go to state 259

    simpleExp      go to state 130
    constOp        go to state 201
    binLogicalExp  go to state 202
    relationalExp  go to state 203
    sumExp         go to state 204
    sumOp          go to state 205
    mulExp         go to state 206
    factor         go to state 207
    fCall          go to state 208
    callParams     go to state 260


State 216

   74 relationalOp: SMALLER •

    OR     reduce using rule 74 (relationalOp)
    AND    reduce using rule 74 (relationalOp)
    SEMIC  reduce using rule 74 (relationalOp)


State 217

   75 relationalOp: GREATER •

    OR     reduce using rule 75 (relationalOp)
    AND    reduce using rule 75 (relationalOp)
    SEMIC  reduce using rule 75 (relationalOp)


State 218

   76 relationalOp: SMALLEQ •

    OR     reduce using rule 76 (relationalOp)
    AND    reduce using rule 76 (relationalOp)
    SEMIC  reduce using rule 76 (relationalOp)


State 219

   77 relationalOp: GREATEQ •

    OR     reduce using rule 77 (relationalOp)
    AND    reduce using rule 77 (relationalOp)
    SEMIC  reduce using rule 77 (relationalOp)


State 220

   78 relationalOp: EQUALS •

    OR     reduce using rule 78 (relationalOp)
    AND    reduce using rule 78 (relationalOp)
    SEMIC  reduce using rule 78 (relationalOp)


State 221

   79 relationalOp: DIFFERENT •

    OR     reduce using rule 79 (relationalOp)
    AND    reduce using rule 79 (relationalOp)
    SEMIC  reduce using rule 79 (relationalOp)


State 222

   47 appendOps: ID APPEND • ID

    ID  shift, and go to state 261


State 223

   53 mapFilterOps: ID FILTER • ID

    ID  shift, and go to state 262


State 224

   52 mapFilterOps: ID MAP • ID

    ID  shift, and go to state 263


State 225

   38 condStmt: IF • PARENL simpleExp PARENR primitiveStmt
   39         | IF • PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt

    PARENL  shift, and go to state 264


State 226

   40 iterStmt: FOR • PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   41         | FOR • PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    PARENL  shift, and go to state 265


State 227

   62 inOp: READ • PARENL ID PARENR SEMIC

    PARENL  shift, and go to state 266


State 228

   63 outOp: WRITE • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 267


State 229

   64 outOp: WRITELN • PARENL outConst PARENR SEMIC

    PARENL  shift, and go to state 268


State 230

   42 returnStmt: RETURN • expression SEMIC

    ID           shift, and go to state 38
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    PARENL       shift, and go to state 55

    listExp         go to state 64
    appendOps       go to state 65
    returnListOps   go to state 66
    returnListOp    go to state 67
    destroyHeadOps  go to state 68
    mapFilterOps    go to state 69
    expression      go to state 269
    assignExp       go to state 71
    simpleExp       go to state 72
    constOp         go to state 73
    binLogicalExp   go to state 76
    relationalExp   go to state 77
    sumExp          go to state 78
    sumOp           go to state 79
    mulExp          go to state 80
    factor          go to state 81
    fCall           go to state 82


State 231

   26 compoundStmt: STFUNC • stmtList ENDFUNC

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    stmtList              go to state 270
    primitiveStmt         go to state 59
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 232

   36 primitiveStmt: varDeclaration •

    ID           reduce using rule 36 (primitiveStmt)
    TYPE         reduce using rule 36 (primitiveStmt)
    NIL          reduce using rule 36 (primitiveStmt)
    INTEGER      reduce using rule 36 (primitiveStmt)
    DECIMAL      reduce using rule 36 (primitiveStmt)
    ADD          reduce using rule 36 (primitiveStmt)
    SUB          reduce using rule 36 (primitiveStmt)
    HEADLIST     reduce using rule 36 (primitiveStmt)
    TAILLIST     reduce using rule 36 (primitiveStmt)
    DESTROYHEAD  reduce using rule 36 (primitiveStmt)
    ELSE         reduce using rule 36 (primitiveStmt)
    IF           reduce using rule 36 (primitiveStmt)
    FOR          reduce using rule 36 (primitiveStmt)
    READ         reduce using rule 36 (primitiveStmt)
    WRITE        reduce using rule 36 (primitiveStmt)
    WRITELN      reduce using rule 36 (primitiveStmt)
    RETURN       reduce using rule 36 (primitiveStmt)
    STFUNC       reduce using rule 36 (primitiveStmt)
    ENDFUNC      reduce using rule 36 (primitiveStmt)
    PARENL       reduce using rule 36 (primitiveStmt)


State 233

    7 varDeclaration: simpleVarDeclaration • SEMIC

    SEMIC  shift, and go to state 271


State 234

   30 primitiveStmt: compoundStmt •

    ID           reduce using rule 30 (primitiveStmt)
    TYPE         reduce using rule 30 (primitiveStmt)
    NIL          reduce using rule 30 (primitiveStmt)
    INTEGER      reduce using rule 30 (primitiveStmt)
    DECIMAL      reduce using rule 30 (primitiveStmt)
    ADD          reduce using rule 30 (primitiveStmt)
    SUB          reduce using rule 30 (primitiveStmt)
    HEADLIST     reduce using rule 30 (primitiveStmt)
    TAILLIST     reduce using rule 30 (primitiveStmt)
    DESTROYHEAD  reduce using rule 30 (primitiveStmt)
    ELSE         reduce using rule 30 (primitiveStmt)
    IF           reduce using rule 30 (primitiveStmt)
    FOR          reduce using rule 30 (primitiveStmt)
    READ         reduce using rule 30 (primitiveStmt)
    WRITE        reduce using rule 30 (primitiveStmt)
    WRITELN      reduce using rule 30 (primitiveStmt)
    RETURN       reduce using rule 30 (primitiveStmt)
    STFUNC       reduce using rule 30 (primitiveStmt)
    ENDFUNC      reduce using rule 30 (primitiveStmt)
    PARENL       reduce using rule 30 (primitiveStmt)


State 235

   29 primitiveStmt: exprStmt •

    ID           reduce using rule 29 (primitiveStmt)
    TYPE         reduce using rule 29 (primitiveStmt)
    NIL          reduce using rule 29 (primitiveStmt)
    INTEGER      reduce using rule 29 (primitiveStmt)
    DECIMAL      reduce using rule 29 (primitiveStmt)
    ADD          reduce using rule 29 (primitiveStmt)
    SUB          reduce using rule 29 (primitiveStmt)
    HEADLIST     reduce using rule 29 (primitiveStmt)
    TAILLIST     reduce using rule 29 (primitiveStmt)
    DESTROYHEAD  reduce using rule 29 (primitiveStmt)
    ELSE         reduce using rule 29 (primitiveStmt)
    IF           reduce using rule 29 (primitiveStmt)
    FOR          reduce using rule 29 (primitiveStmt)
    READ         reduce using rule 29 (primitiveStmt)
    WRITE        reduce using rule 29 (primitiveStmt)
    WRITELN      reduce using rule 29 (primitiveStmt)
    RETURN       reduce using rule 29 (primitiveStmt)
    STFUNC       reduce using rule 29 (primitiveStmt)
    ENDFUNC      reduce using rule 29 (primitiveStmt)
    PARENL       reduce using rule 29 (primitiveStmt)


State 236

   31 primitiveStmt: condStmt •

    ID           reduce using rule 31 (primitiveStmt)
    TYPE         reduce using rule 31 (primitiveStmt)
    NIL          reduce using rule 31 (primitiveStmt)
    INTEGER      reduce using rule 31 (primitiveStmt)
    DECIMAL      reduce using rule 31 (primitiveStmt)
    ADD          reduce using rule 31 (primitiveStmt)
    SUB          reduce using rule 31 (primitiveStmt)
    HEADLIST     reduce using rule 31 (primitiveStmt)
    TAILLIST     reduce using rule 31 (primitiveStmt)
    DESTROYHEAD  reduce using rule 31 (primitiveStmt)
    ELSE         reduce using rule 31 (primitiveStmt)
    IF           reduce using rule 31 (primitiveStmt)
    FOR          reduce using rule 31 (primitiveStmt)
    READ         reduce using rule 31 (primitiveStmt)
    WRITE        reduce using rule 31 (primitiveStmt)
    WRITELN      reduce using rule 31 (primitiveStmt)
    RETURN       reduce using rule 31 (primitiveStmt)
    STFUNC       reduce using rule 31 (primitiveStmt)
    ENDFUNC      reduce using rule 31 (primitiveStmt)
    PARENL       reduce using rule 31 (primitiveStmt)


State 237

   32 primitiveStmt: iterStmt •

    ID           reduce using rule 32 (primitiveStmt)
    TYPE         reduce using rule 32 (primitiveStmt)
    NIL          reduce using rule 32 (primitiveStmt)
    INTEGER      reduce using rule 32 (primitiveStmt)
    DECIMAL      reduce using rule 32 (primitiveStmt)
    ADD          reduce using rule 32 (primitiveStmt)
    SUB          reduce using rule 32 (primitiveStmt)
    HEADLIST     reduce using rule 32 (primitiveStmt)
    TAILLIST     reduce using rule 32 (primitiveStmt)
    DESTROYHEAD  reduce using rule 32 (primitiveStmt)
    ELSE         reduce using rule 32 (primitiveStmt)
    IF           reduce using rule 32 (primitiveStmt)
    FOR          reduce using rule 32 (primitiveStmt)
    READ         reduce using rule 32 (primitiveStmt)
    WRITE        reduce using rule 32 (primitiveStmt)
    WRITELN      reduce using rule 32 (primitiveStmt)
    RETURN       reduce using rule 32 (primitiveStmt)
    STFUNC       reduce using rule 32 (primitiveStmt)
    ENDFUNC      reduce using rule 32 (primitiveStmt)
    PARENL       reduce using rule 32 (primitiveStmt)


State 238

   33 primitiveStmt: returnStmt •

    ID           reduce using rule 33 (primitiveStmt)
    TYPE         reduce using rule 33 (primitiveStmt)
    NIL          reduce using rule 33 (primitiveStmt)
    INTEGER      reduce using rule 33 (primitiveStmt)
    DECIMAL      reduce using rule 33 (primitiveStmt)
    ADD          reduce using rule 33 (primitiveStmt)
    SUB          reduce using rule 33 (primitiveStmt)
    HEADLIST     reduce using rule 33 (primitiveStmt)
    TAILLIST     reduce using rule 33 (primitiveStmt)
    DESTROYHEAD  reduce using rule 33 (primitiveStmt)
    ELSE         reduce using rule 33 (primitiveStmt)
    IF           reduce using rule 33 (primitiveStmt)
    FOR          reduce using rule 33 (primitiveStmt)
    READ         reduce using rule 33 (primitiveStmt)
    WRITE        reduce using rule 33 (primitiveStmt)
    WRITELN      reduce using rule 33 (primitiveStmt)
    RETURN       reduce using rule 33 (primitiveStmt)
    STFUNC       reduce using rule 33 (primitiveStmt)
    ENDFUNC      reduce using rule 33 (primitiveStmt)
    PARENL       reduce using rule 33 (primitiveStmt)


State 239

   37 exprStmt: expression • SEMIC

    SEMIC  shift, and go to state 272


State 240

   34 primitiveStmt: inOp •

    ID           reduce using rule 34 (primitiveStmt)
    TYPE         reduce using rule 34 (primitiveStmt)
    NIL          reduce using rule 34 (primitiveStmt)
    INTEGER      reduce using rule 34 (primitiveStmt)
    DECIMAL      reduce using rule 34 (primitiveStmt)
    ADD          reduce using rule 34 (primitiveStmt)
    SUB          reduce using rule 34 (primitiveStmt)
    HEADLIST     reduce using rule 34 (primitiveStmt)
    TAILLIST     reduce using rule 34 (primitiveStmt)
    DESTROYHEAD  reduce using rule 34 (primitiveStmt)
    ELSE         reduce using rule 34 (primitiveStmt)
    IF           reduce using rule 34 (primitiveStmt)
    FOR          reduce using rule 34 (primitiveStmt)
    READ         reduce using rule 34 (primitiveStmt)
    WRITE        reduce using rule 34 (primitiveStmt)
    WRITELN      reduce using rule 34 (primitiveStmt)
    RETURN       reduce using rule 34 (primitiveStmt)
    STFUNC       reduce using rule 34 (primitiveStmt)
    ENDFUNC      reduce using rule 34 (primitiveStmt)
    PARENL       reduce using rule 34 (primitiveStmt)


State 241

   35 primitiveStmt: outOp •

    ID           reduce using rule 35 (primitiveStmt)
    TYPE         reduce using rule 35 (primitiveStmt)
    NIL          reduce using rule 35 (primitiveStmt)
    INTEGER      reduce using rule 35 (primitiveStmt)
    DECIMAL      reduce using rule 35 (primitiveStmt)
    ADD          reduce using rule 35 (primitiveStmt)
    SUB          reduce using rule 35 (primitiveStmt)
    HEADLIST     reduce using rule 35 (primitiveStmt)
    TAILLIST     reduce using rule 35 (primitiveStmt)
    DESTROYHEAD  reduce using rule 35 (primitiveStmt)
    ELSE         reduce using rule 35 (primitiveStmt)
    IF           reduce using rule 35 (primitiveStmt)
    FOR          reduce using rule 35 (primitiveStmt)
    READ         reduce using rule 35 (primitiveStmt)
    WRITE        reduce using rule 35 (primitiveStmt)
    WRITELN      reduce using rule 35 (primitiveStmt)
    RETURN       reduce using rule 35 (primitiveStmt)
    STFUNC       reduce using rule 35 (primitiveStmt)
    ENDFUNC      reduce using rule 35 (primitiveStmt)
    PARENL       reduce using rule 35 (primitiveStmt)


State 242

   57 assignExp: ID ASSIGN • expression

    ID           shift, and go to state 273
    NIL          shift, and go to state 181
    INTEGER      shift, and go to state 182
    DECIMAL      shift, and go to state 183
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 209
    PARENL       shift, and go to state 184

    listExp         go to state 274
    appendOps       go to state 210
    returnListOps   go to state 211
    returnListOp    go to state 212
    destroyHeadOps  go to state 213
    mapFilterOps    go to state 214
    expression      go to state 275
    assignExp       go to state 276
    simpleExp       go to state 277
    constOp         go to state 185
    binLogicalExp   go to state 186
    relationalExp   go to state 187
    sumExp          go to state 188
    sumOp           go to state 189
    mulExp          go to state 190
    factor          go to state 191
    fCall           go to state 192


State 243

    7 varDeclaration: simpleVarDeclaration SEMIC •

    ID           reduce using rule 7 (varDeclaration)
    TYPE         reduce using rule 7 (varDeclaration)
    NIL          reduce using rule 7 (varDeclaration)
    INTEGER      reduce using rule 7 (varDeclaration)
    DECIMAL      reduce using rule 7 (varDeclaration)
    ADD          reduce using rule 7 (varDeclaration)
    SUB          reduce using rule 7 (varDeclaration)
    HEADLIST     reduce using rule 7 (varDeclaration)
    TAILLIST     reduce using rule 7 (varDeclaration)
    DESTROYHEAD  reduce using rule 7 (varDeclaration)
    IF           reduce using rule 7 (varDeclaration)
    FOR          reduce using rule 7 (varDeclaration)
    READ         reduce using rule 7 (varDeclaration)
    WRITE        reduce using rule 7 (varDeclaration)
    WRITELN      reduce using rule 7 (varDeclaration)
    RETURN       reduce using rule 7 (varDeclaration)
    STFUNC       reduce using rule 7 (varDeclaration)
    ENDFUNC      reduce using rule 7 (varDeclaration)
    PARENL       reduce using rule 7 (varDeclaration)


State 244

   91 factor: PARENL simpleExp • PARENR

    PARENR  shift, and go to state 278


State 245

   68 binLogicalExp: binLogicalExp binLogicalOp • relationalOp

    SMALLER    shift, and go to state 279
    GREATER    shift, and go to state 280
    SMALLEQ    shift, and go to state 281
    GREATEQ    shift, and go to state 282
    EQUALS     shift, and go to state 283
    DIFFERENT  shift, and go to state 284

    relationalOp  go to state 285


State 246

   72 relationalExp: relationalExp relationalOp • sumExp

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 184

    constOp  go to state 185
    sumExp   go to state 286
    sumOp    go to state 189
    mulExp   go to state 190
    factor   go to state 191
    fCall    go to state 192


State 247

   80 sumExp: sumExp sumOp • mulExp

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 184

    constOp  go to state 185
    sumOp    go to state 189
    mulExp   go to state 287
    factor   go to state 191
    fCall    go to state 192


State 248

   86 mulExp: sumOp factor •

    ADD        reduce using rule 86 (mulExp)
    SUB        reduce using rule 86 (mulExp)
    MULT       reduce using rule 86 (mulExp)
    DIV        reduce using rule 86 (mulExp)
    OR         reduce using rule 86 (mulExp)
    AND        reduce using rule 86 (mulExp)
    SMALLER    reduce using rule 86 (mulExp)
    GREATER    reduce using rule 86 (mulExp)
    SMALLEQ    reduce using rule 86 (mulExp)
    GREATEQ    reduce using rule 86 (mulExp)
    EQUALS     reduce using rule 86 (mulExp)
    DIFFERENT  reduce using rule 86 (mulExp)
    PARENR     reduce using rule 86 (mulExp)


State 249

   84 mulExp: mulExp mulOp • factor

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    PARENL   shift, and go to state 184

    constOp  go to state 185
    factor   go to state 288
    fCall    go to state 192


State 250

   93 fCall: ID PARENL • callParams PARENR
   94      | ID PARENL • PARENR

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 200
    PARENR   shift, and go to state 289

    simpleExp      go to state 130
    constOp        go to state 201
    binLogicalExp  go to state 202
    relationalExp  go to state 203
    sumExp         go to state 204
    sumOp          go to state 205
    mulExp         go to state 206
    factor         go to state 207
    fCall          go to state 208
    callParams     go to state 290


State 251

   91 factor: PARENL simpleExp • PARENR

    PARENR  shift, and go to state 291


State 252

   68 binLogicalExp: binLogicalExp binLogicalOp • relationalOp

    SMALLER    shift, and go to state 292
    GREATER    shift, and go to state 293
    SMALLEQ    shift, and go to state 294
    GREATEQ    shift, and go to state 295
    EQUALS     shift, and go to state 296
    DIFFERENT  shift, and go to state 297

    relationalOp  go to state 298


State 253

   72 relationalExp: relationalExp relationalOp • sumExp

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 200

    constOp  go to state 201
    sumExp   go to state 299
    sumOp    go to state 205
    mulExp   go to state 206
    factor   go to state 207
    fCall    go to state 208


State 254

   80 sumExp: sumExp sumOp • mulExp

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 200

    constOp  go to state 201
    sumOp    go to state 205
    mulExp   go to state 300
    factor   go to state 207
    fCall    go to state 208


State 255

   86 mulExp: sumOp factor •

    ADD        reduce using rule 86 (mulExp)
    SUB        reduce using rule 86 (mulExp)
    MULT       reduce using rule 86 (mulExp)
    DIV        reduce using rule 86 (mulExp)
    OR         reduce using rule 86 (mulExp)
    AND        reduce using rule 86 (mulExp)
    SMALLER    reduce using rule 86 (mulExp)
    GREATER    reduce using rule 86 (mulExp)
    SMALLEQ    reduce using rule 86 (mulExp)
    GREATEQ    reduce using rule 86 (mulExp)
    EQUALS     reduce using rule 86 (mulExp)
    DIFFERENT  reduce using rule 86 (mulExp)
    COMMA      reduce using rule 86 (mulExp)
    PARENR     reduce using rule 86 (mulExp)


State 256

   84 mulExp: mulExp mulOp • factor

    ID       shift, and go to state 196
    NIL      shift, and go to state 197
    INTEGER  shift, and go to state 198
    DECIMAL  shift, and go to state 199
    PARENL   shift, and go to state 200

    constOp  go to state 201
    factor   go to state 301
    fCall    go to state 208


State 257

   51 destroyHeadOps: DESTROYHEAD ID •

    PARENR  reduce using rule 51 (destroyHeadOps)


State 258

   48 returnListOps: returnListOp ID •

    PARENR  reduce using rule 48 (returnListOps)


State 259

   94 fCall: ID PARENL PARENR •

    ADD        reduce using rule 94 (fCall)
    SUB        reduce using rule 94 (fCall)
    MULT       reduce using rule 94 (fCall)
    DIV        reduce using rule 94 (fCall)
    OR         reduce using rule 94 (fCall)
    AND        reduce using rule 94 (fCall)
    SMALLER    reduce using rule 94 (fCall)
    GREATER    reduce using rule 94 (fCall)
    SMALLEQ    reduce using rule 94 (fCall)
    GREATEQ    reduce using rule 94 (fCall)
    EQUALS     reduce using rule 94 (fCall)
    DIFFERENT  reduce using rule 94 (fCall)
    PARENR     reduce using rule 94 (fCall)


State 260

   93 fCall: ID PARENL callParams • PARENR
   95 callParams: callParams • COMMA simpleExp

    COMMA   shift, and go to state 153
    PARENR  shift, and go to state 302


State 261

   47 appendOps: ID APPEND ID •

    PARENR  reduce using rule 47 (appendOps)


State 262

   53 mapFilterOps: ID FILTER ID •

    PARENR  reduce using rule 53 (mapFilterOps)


State 263

   52 mapFilterOps: ID MAP ID •

    PARENR  reduce using rule 52 (mapFilterOps)


State 264

   38 condStmt: IF PARENL • simpleExp PARENR primitiveStmt
   39         | IF PARENL • simpleExp PARENR primitiveStmt ELSE primitiveStmt

    ID       shift, and go to state 101
    NIL      shift, and go to state 181
    INTEGER  shift, and go to state 182
    DECIMAL  shift, and go to state 183
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 184

    simpleExp      go to state 303
    constOp        go to state 185
    binLogicalExp  go to state 186
    relationalExp  go to state 187
    sumExp         go to state 188
    sumOp          go to state 189
    mulExp         go to state 190
    factor         go to state 191
    fCall          go to state 192


State 265

   40 iterStmt: FOR PARENL • assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt
   41         | FOR PARENL • simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 134
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    assignExp      go to state 304
    simpleExp      go to state 305
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 266

   62 inOp: READ PARENL • ID PARENR SEMIC

    ID  shift, and go to state 306


State 267

   63 outOp: WRITE PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 138
    STRING       shift, and go to state 139
    NIL          shift, and go to state 181
    INTEGER      shift, and go to state 182
    DECIMAL      shift, and go to state 183
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 209
    PARENL       shift, and go to state 184

    listExp         go to state 140
    appendOps       go to state 210
    returnListOps   go to state 211
    returnListOp    go to state 212
    destroyHeadOps  go to state 213
    mapFilterOps    go to state 214
    simpleExp       go to state 141
    constOp         go to state 185
    outConst        go to state 307
    binLogicalExp   go to state 186
    relationalExp   go to state 187
    sumExp          go to state 188
    sumOp           go to state 189
    mulExp          go to state 190
    factor          go to state 191
    fCall           go to state 192


State 268

   64 outOp: WRITELN PARENL • outConst PARENR SEMIC

    ID           shift, and go to state 138
    STRING       shift, and go to state 139
    NIL          shift, and go to state 181
    INTEGER      shift, and go to state 182
    DECIMAL      shift, and go to state 183
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 209
    PARENL       shift, and go to state 184

    listExp         go to state 140
    appendOps       go to state 210
    returnListOps   go to state 211
    returnListOp    go to state 212
    destroyHeadOps  go to state 213
    mapFilterOps    go to state 214
    simpleExp       go to state 141
    constOp         go to state 185
    outConst        go to state 308
    binLogicalExp   go to state 186
    relationalExp   go to state 187
    sumExp          go to state 188
    sumOp           go to state 189
    mulExp          go to state 190
    factor          go to state 191
    fCall           go to state 192


State 269

   42 returnStmt: RETURN expression • SEMIC

    SEMIC  shift, and go to state 309


State 270

   26 compoundStmt: STFUNC stmtList • ENDFUNC
   27 stmtList: stmtList • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 48
    FOR          shift, and go to state 49
    READ         shift, and go to state 50
    WRITE        shift, and go to state 51
    WRITELN      shift, and go to state 52
    RETURN       shift, and go to state 53
    STFUNC       shift, and go to state 54
    ENDFUNC      shift, and go to state 310
    PARENL       shift, and go to state 55

    varDeclaration        go to state 56
    simpleVarDeclaration  go to state 180
    compoundStmt          go to state 57
    primitiveStmt         go to state 104
    exprStmt              go to state 60
    condStmt              go to state 61
    iterStmt              go to state 62
    returnStmt            go to state 63
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 70
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 74
    outOp                 go to state 75
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 271

    7 varDeclaration: simpleVarDeclaration SEMIC •

    ID           reduce using rule 7 (varDeclaration)
    TYPE         reduce using rule 7 (varDeclaration)
    NIL          reduce using rule 7 (varDeclaration)
    INTEGER      reduce using rule 7 (varDeclaration)
    DECIMAL      reduce using rule 7 (varDeclaration)
    ADD          reduce using rule 7 (varDeclaration)
    SUB          reduce using rule 7 (varDeclaration)
    HEADLIST     reduce using rule 7 (varDeclaration)
    TAILLIST     reduce using rule 7 (varDeclaration)
    DESTROYHEAD  reduce using rule 7 (varDeclaration)
    ELSE         reduce using rule 7 (varDeclaration)
    IF           reduce using rule 7 (varDeclaration)
    FOR          reduce using rule 7 (varDeclaration)
    READ         reduce using rule 7 (varDeclaration)
    WRITE        reduce using rule 7 (varDeclaration)
    WRITELN      reduce using rule 7 (varDeclaration)
    RETURN       reduce using rule 7 (varDeclaration)
    STFUNC       reduce using rule 7 (varDeclaration)
    ENDFUNC      reduce using rule 7 (varDeclaration)
    PARENL       reduce using rule 7 (varDeclaration)


State 272

   37 exprStmt: expression SEMIC •

    ID           reduce using rule 37 (exprStmt)
    TYPE         reduce using rule 37 (exprStmt)
    NIL          reduce using rule 37 (exprStmt)
    INTEGER      reduce using rule 37 (exprStmt)
    DECIMAL      reduce using rule 37 (exprStmt)
    ADD          reduce using rule 37 (exprStmt)
    SUB          reduce using rule 37 (exprStmt)
    HEADLIST     reduce using rule 37 (exprStmt)
    TAILLIST     reduce using rule 37 (exprStmt)
    DESTROYHEAD  reduce using rule 37 (exprStmt)
    ELSE         reduce using rule 37 (exprStmt)
    IF           reduce using rule 37 (exprStmt)
    FOR          reduce using rule 37 (exprStmt)
    READ         reduce using rule 37 (exprStmt)
    WRITE        reduce using rule 37 (exprStmt)
    WRITELN      reduce using rule 37 (exprStmt)
    RETURN       reduce using rule 37 (exprStmt)
    STFUNC       reduce using rule 37 (exprStmt)
    ENDFUNC      reduce using rule 37 (exprStmt)
    PARENL       reduce using rule 37 (exprStmt)


State 273

   47 appendOps: ID • APPEND ID
   52 mapFilterOps: ID • MAP ID
   53             | ID • FILTER ID
   57 assignExp: ID • ASSIGN expression
   89 factor: ID •
   93 fCall: ID • PARENL callParams PARENR
   94      | ID • PARENL PARENR

    APPEND  shift, and go to state 222
    FILTER  shift, and go to state 223
    ASSIGN  shift, and go to state 242
    MAP     shift, and go to state 224
    PARENL  shift, and go to state 215

    ADD        reduce using rule 89 (factor)
    SUB        reduce using rule 89 (factor)
    MULT       reduce using rule 89 (factor)
    DIV        reduce using rule 89 (factor)
    OR         reduce using rule 89 (factor)
    AND        reduce using rule 89 (factor)
    SMALLER    reduce using rule 89 (factor)
    GREATER    reduce using rule 89 (factor)
    SMALLEQ    reduce using rule 89 (factor)
    GREATEQ    reduce using rule 89 (factor)
    EQUALS     reduce using rule 89 (factor)
    DIFFERENT  reduce using rule 89 (factor)
    PARENR     reduce using rule 89 (factor)


State 274

   56 expression: listExp •

    PARENR  reduce using rule 56 (expression)


State 275

   57 assignExp: ID ASSIGN expression •

    PARENR  reduce using rule 57 (assignExp)


State 276

   54 expression: assignExp •

    PARENR  reduce using rule 54 (expression)


State 277

   55 expression: simpleExp •

    PARENR  reduce using rule 55 (expression)


State 278

   91 factor: PARENL simpleExp PARENR •

    ADD        reduce using rule 91 (factor)
    SUB        reduce using rule 91 (factor)
    MULT       reduce using rule 91 (factor)
    DIV        reduce using rule 91 (factor)
    OR         reduce using rule 91 (factor)
    AND        reduce using rule 91 (factor)
    SMALLER    reduce using rule 91 (factor)
    GREATER    reduce using rule 91 (factor)
    SMALLEQ    reduce using rule 91 (factor)
    GREATEQ    reduce using rule 91 (factor)
    EQUALS     reduce using rule 91 (factor)
    DIFFERENT  reduce using rule 91 (factor)
    PARENR     reduce using rule 91 (factor)


State 279

   74 relationalOp: SMALLER •

    OR      reduce using rule 74 (relationalOp)
    AND     reduce using rule 74 (relationalOp)
    PARENR  reduce using rule 74 (relationalOp)


State 280

   75 relationalOp: GREATER •

    OR      reduce using rule 75 (relationalOp)
    AND     reduce using rule 75 (relationalOp)
    PARENR  reduce using rule 75 (relationalOp)


State 281

   76 relationalOp: SMALLEQ •

    OR      reduce using rule 76 (relationalOp)
    AND     reduce using rule 76 (relationalOp)
    PARENR  reduce using rule 76 (relationalOp)


State 282

   77 relationalOp: GREATEQ •

    OR      reduce using rule 77 (relationalOp)
    AND     reduce using rule 77 (relationalOp)
    PARENR  reduce using rule 77 (relationalOp)


State 283

   78 relationalOp: EQUALS •

    OR      reduce using rule 78 (relationalOp)
    AND     reduce using rule 78 (relationalOp)
    PARENR  reduce using rule 78 (relationalOp)


State 284

   79 relationalOp: DIFFERENT •

    OR      reduce using rule 79 (relationalOp)
    AND     reduce using rule 79 (relationalOp)
    PARENR  reduce using rule 79 (relationalOp)


State 285

   68 binLogicalExp: binLogicalExp binLogicalOp relationalOp •

    OR      reduce using rule 68 (binLogicalExp)
    AND     reduce using rule 68 (binLogicalExp)
    PARENR  reduce using rule 68 (binLogicalExp)


State 286

   72 relationalExp: relationalExp relationalOp sumExp •
   80 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 193
    SUB  shift, and go to state 194

    OR         reduce using rule 72 (relationalExp)
    AND        reduce using rule 72 (relationalExp)
    SMALLER    reduce using rule 72 (relationalExp)
    GREATER    reduce using rule 72 (relationalExp)
    SMALLEQ    reduce using rule 72 (relationalExp)
    GREATEQ    reduce using rule 72 (relationalExp)
    EQUALS     reduce using rule 72 (relationalExp)
    DIFFERENT  reduce using rule 72 (relationalExp)
    PARENR     reduce using rule 72 (relationalExp)

    sumOp  go to state 247


State 287

   80 sumExp: sumExp sumOp mulExp •
   84 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 119
    DIV   shift, and go to state 120

    ADD        reduce using rule 80 (sumExp)
    SUB        reduce using rule 80 (sumExp)
    OR         reduce using rule 80 (sumExp)
    AND        reduce using rule 80 (sumExp)
    SMALLER    reduce using rule 80 (sumExp)
    GREATER    reduce using rule 80 (sumExp)
    SMALLEQ    reduce using rule 80 (sumExp)
    GREATEQ    reduce using rule 80 (sumExp)
    EQUALS     reduce using rule 80 (sumExp)
    DIFFERENT  reduce using rule 80 (sumExp)
    PARENR     reduce using rule 80 (sumExp)

    mulOp  go to state 249


State 288

   84 mulExp: mulExp mulOp factor •

    ADD        reduce using rule 84 (mulExp)
    SUB        reduce using rule 84 (mulExp)
    MULT       reduce using rule 84 (mulExp)
    DIV        reduce using rule 84 (mulExp)
    OR         reduce using rule 84 (mulExp)
    AND        reduce using rule 84 (mulExp)
    SMALLER    reduce using rule 84 (mulExp)
    GREATER    reduce using rule 84 (mulExp)
    SMALLEQ    reduce using rule 84 (mulExp)
    GREATEQ    reduce using rule 84 (mulExp)
    EQUALS     reduce using rule 84 (mulExp)
    DIFFERENT  reduce using rule 84 (mulExp)
    PARENR     reduce using rule 84 (mulExp)


State 289

   94 fCall: ID PARENL PARENR •

    ADD        reduce using rule 94 (fCall)
    SUB        reduce using rule 94 (fCall)
    MULT       reduce using rule 94 (fCall)
    DIV        reduce using rule 94 (fCall)
    OR         reduce using rule 94 (fCall)
    AND        reduce using rule 94 (fCall)
    SMALLER    reduce using rule 94 (fCall)
    GREATER    reduce using rule 94 (fCall)
    SMALLEQ    reduce using rule 94 (fCall)
    GREATEQ    reduce using rule 94 (fCall)
    EQUALS     reduce using rule 94 (fCall)
    DIFFERENT  reduce using rule 94 (fCall)
    COMMA      reduce using rule 94 (fCall)
    PARENR     reduce using rule 94 (fCall)


State 290

   93 fCall: ID PARENL callParams • PARENR
   95 callParams: callParams • COMMA simpleExp

    COMMA   shift, and go to state 153
    PARENR  shift, and go to state 311


State 291

   91 factor: PARENL simpleExp PARENR •

    ADD        reduce using rule 91 (factor)
    SUB        reduce using rule 91 (factor)
    MULT       reduce using rule 91 (factor)
    DIV        reduce using rule 91 (factor)
    OR         reduce using rule 91 (factor)
    AND        reduce using rule 91 (factor)
    SMALLER    reduce using rule 91 (factor)
    GREATER    reduce using rule 91 (factor)
    SMALLEQ    reduce using rule 91 (factor)
    GREATEQ    reduce using rule 91 (factor)
    EQUALS     reduce using rule 91 (factor)
    DIFFERENT  reduce using rule 91 (factor)
    COMMA      reduce using rule 91 (factor)
    PARENR     reduce using rule 91 (factor)


State 292

   74 relationalOp: SMALLER •

    OR      reduce using rule 74 (relationalOp)
    AND     reduce using rule 74 (relationalOp)
    COMMA   reduce using rule 74 (relationalOp)
    PARENR  reduce using rule 74 (relationalOp)


State 293

   75 relationalOp: GREATER •

    OR      reduce using rule 75 (relationalOp)
    AND     reduce using rule 75 (relationalOp)
    COMMA   reduce using rule 75 (relationalOp)
    PARENR  reduce using rule 75 (relationalOp)


State 294

   76 relationalOp: SMALLEQ •

    OR      reduce using rule 76 (relationalOp)
    AND     reduce using rule 76 (relationalOp)
    COMMA   reduce using rule 76 (relationalOp)
    PARENR  reduce using rule 76 (relationalOp)


State 295

   77 relationalOp: GREATEQ •

    OR      reduce using rule 77 (relationalOp)
    AND     reduce using rule 77 (relationalOp)
    COMMA   reduce using rule 77 (relationalOp)
    PARENR  reduce using rule 77 (relationalOp)


State 296

   78 relationalOp: EQUALS •

    OR      reduce using rule 78 (relationalOp)
    AND     reduce using rule 78 (relationalOp)
    COMMA   reduce using rule 78 (relationalOp)
    PARENR  reduce using rule 78 (relationalOp)


State 297

   79 relationalOp: DIFFERENT •

    OR      reduce using rule 79 (relationalOp)
    AND     reduce using rule 79 (relationalOp)
    COMMA   reduce using rule 79 (relationalOp)
    PARENR  reduce using rule 79 (relationalOp)


State 298

   68 binLogicalExp: binLogicalExp binLogicalOp relationalOp •

    OR      reduce using rule 68 (binLogicalExp)
    AND     reduce using rule 68 (binLogicalExp)
    COMMA   reduce using rule 68 (binLogicalExp)
    PARENR  reduce using rule 68 (binLogicalExp)


State 299

   72 relationalExp: relationalExp relationalOp sumExp •
   80 sumExp: sumExp • sumOp mulExp

    ADD  shift, and go to state 193
    SUB  shift, and go to state 194

    OR         reduce using rule 72 (relationalExp)
    AND        reduce using rule 72 (relationalExp)
    SMALLER    reduce using rule 72 (relationalExp)
    GREATER    reduce using rule 72 (relationalExp)
    SMALLEQ    reduce using rule 72 (relationalExp)
    GREATEQ    reduce using rule 72 (relationalExp)
    EQUALS     reduce using rule 72 (relationalExp)
    DIFFERENT  reduce using rule 72 (relationalExp)
    COMMA      reduce using rule 72 (relationalExp)
    PARENR     reduce using rule 72 (relationalExp)

    sumOp  go to state 254


State 300

   80 sumExp: sumExp sumOp mulExp •
   84 mulExp: mulExp • mulOp factor

    MULT  shift, and go to state 119
    DIV   shift, and go to state 120

    ADD        reduce using rule 80 (sumExp)
    SUB        reduce using rule 80 (sumExp)
    OR         reduce using rule 80 (sumExp)
    AND        reduce using rule 80 (sumExp)
    SMALLER    reduce using rule 80 (sumExp)
    GREATER    reduce using rule 80 (sumExp)
    SMALLEQ    reduce using rule 80 (sumExp)
    GREATEQ    reduce using rule 80 (sumExp)
    EQUALS     reduce using rule 80 (sumExp)
    DIFFERENT  reduce using rule 80 (sumExp)
    COMMA      reduce using rule 80 (sumExp)
    PARENR     reduce using rule 80 (sumExp)

    mulOp  go to state 256


State 301

   84 mulExp: mulExp mulOp factor •

    ADD        reduce using rule 84 (mulExp)
    SUB        reduce using rule 84 (mulExp)
    MULT       reduce using rule 84 (mulExp)
    DIV        reduce using rule 84 (mulExp)
    OR         reduce using rule 84 (mulExp)
    AND        reduce using rule 84 (mulExp)
    SMALLER    reduce using rule 84 (mulExp)
    GREATER    reduce using rule 84 (mulExp)
    SMALLEQ    reduce using rule 84 (mulExp)
    GREATEQ    reduce using rule 84 (mulExp)
    EQUALS     reduce using rule 84 (mulExp)
    DIFFERENT  reduce using rule 84 (mulExp)
    COMMA      reduce using rule 84 (mulExp)
    PARENR     reduce using rule 84 (mulExp)


State 302

   93 fCall: ID PARENL callParams PARENR •

    ADD        reduce using rule 93 (fCall)
    SUB        reduce using rule 93 (fCall)
    MULT       reduce using rule 93 (fCall)
    DIV        reduce using rule 93 (fCall)
    OR         reduce using rule 93 (fCall)
    AND        reduce using rule 93 (fCall)
    SMALLER    reduce using rule 93 (fCall)
    GREATER    reduce using rule 93 (fCall)
    SMALLEQ    reduce using rule 93 (fCall)
    GREATEQ    reduce using rule 93 (fCall)
    EQUALS     reduce using rule 93 (fCall)
    DIFFERENT  reduce using rule 93 (fCall)
    PARENR     reduce using rule 93 (fCall)


State 303

   38 condStmt: IF PARENL simpleExp • PARENR primitiveStmt
   39         | IF PARENL simpleExp • PARENR primitiveStmt ELSE primitiveStmt

    PARENR  shift, and go to state 312


State 304

   40 iterStmt: FOR PARENL assignExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 313


State 305

   41 iterStmt: FOR PARENL simpleExp • SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 314


State 306

   62 inOp: READ PARENL ID • PARENR SEMIC

    PARENR  shift, and go to state 315


State 307

   63 outOp: WRITE PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 316


State 308

   64 outOp: WRITELN PARENL outConst • PARENR SEMIC

    PARENR  shift, and go to state 317


State 309

   42 returnStmt: RETURN expression SEMIC •

    ID           reduce using rule 42 (returnStmt)
    TYPE         reduce using rule 42 (returnStmt)
    NIL          reduce using rule 42 (returnStmt)
    INTEGER      reduce using rule 42 (returnStmt)
    DECIMAL      reduce using rule 42 (returnStmt)
    ADD          reduce using rule 42 (returnStmt)
    SUB          reduce using rule 42 (returnStmt)
    HEADLIST     reduce using rule 42 (returnStmt)
    TAILLIST     reduce using rule 42 (returnStmt)
    DESTROYHEAD  reduce using rule 42 (returnStmt)
    ELSE         reduce using rule 42 (returnStmt)
    IF           reduce using rule 42 (returnStmt)
    FOR          reduce using rule 42 (returnStmt)
    READ         reduce using rule 42 (returnStmt)
    WRITE        reduce using rule 42 (returnStmt)
    WRITELN      reduce using rule 42 (returnStmt)
    RETURN       reduce using rule 42 (returnStmt)
    STFUNC       reduce using rule 42 (returnStmt)
    ENDFUNC      reduce using rule 42 (returnStmt)
    PARENL       reduce using rule 42 (returnStmt)


State 310

   26 compoundStmt: STFUNC stmtList ENDFUNC •

    ID           reduce using rule 26 (compoundStmt)
    TYPE         reduce using rule 26 (compoundStmt)
    NIL          reduce using rule 26 (compoundStmt)
    INTEGER      reduce using rule 26 (compoundStmt)
    DECIMAL      reduce using rule 26 (compoundStmt)
    ADD          reduce using rule 26 (compoundStmt)
    SUB          reduce using rule 26 (compoundStmt)
    HEADLIST     reduce using rule 26 (compoundStmt)
    TAILLIST     reduce using rule 26 (compoundStmt)
    DESTROYHEAD  reduce using rule 26 (compoundStmt)
    ELSE         reduce using rule 26 (compoundStmt)
    IF           reduce using rule 26 (compoundStmt)
    FOR          reduce using rule 26 (compoundStmt)
    READ         reduce using rule 26 (compoundStmt)
    WRITE        reduce using rule 26 (compoundStmt)
    WRITELN      reduce using rule 26 (compoundStmt)
    RETURN       reduce using rule 26 (compoundStmt)
    STFUNC       reduce using rule 26 (compoundStmt)
    ENDFUNC      reduce using rule 26 (compoundStmt)
    PARENL       reduce using rule 26 (compoundStmt)


State 311

   93 fCall: ID PARENL callParams PARENR •

    ADD        reduce using rule 93 (fCall)
    SUB        reduce using rule 93 (fCall)
    MULT       reduce using rule 93 (fCall)
    DIV        reduce using rule 93 (fCall)
    OR         reduce using rule 93 (fCall)
    AND        reduce using rule 93 (fCall)
    SMALLER    reduce using rule 93 (fCall)
    GREATER    reduce using rule 93 (fCall)
    SMALLEQ    reduce using rule 93 (fCall)
    GREATEQ    reduce using rule 93 (fCall)
    EQUALS     reduce using rule 93 (fCall)
    DIFFERENT  reduce using rule 93 (fCall)
    COMMA      reduce using rule 93 (fCall)
    PARENR     reduce using rule 93 (fCall)


State 312

   38 condStmt: IF PARENL simpleExp PARENR • primitiveStmt
   39         | IF PARENL simpleExp PARENR • primitiveStmt ELSE primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 225
    FOR          shift, and go to state 226
    READ         shift, and go to state 227
    WRITE        shift, and go to state 228
    WRITELN      shift, and go to state 229
    RETURN       shift, and go to state 230
    STFUNC       shift, and go to state 231
    PARENL       shift, and go to state 55

    varDeclaration        go to state 232
    simpleVarDeclaration  go to state 233
    compoundStmt          go to state 234
    primitiveStmt         go to state 318
    exprStmt              go to state 235
    condStmt              go to state 236
    iterStmt              go to state 237
    returnStmt            go to state 238
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 239
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 240
    outOp                 go to state 241
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 313

   40 iterStmt: FOR PARENL assignExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 319
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 314

   41 iterStmt: FOR PARENL simpleExp SEMIC • simpleExp SEMIC assignExp PARENR primitiveStmt

    ID       shift, and go to state 195
    NIL      shift, and go to state 40
    INTEGER  shift, and go to state 41
    DECIMAL  shift, and go to state 42
    ADD      shift, and go to state 43
    SUB      shift, and go to state 44
    PARENL   shift, and go to state 55

    simpleExp      go to state 320
    constOp        go to state 73
    binLogicalExp  go to state 76
    relationalExp  go to state 77
    sumExp         go to state 78
    sumOp          go to state 79
    mulExp         go to state 80
    factor         go to state 81
    fCall          go to state 82


State 315

   62 inOp: READ PARENL ID PARENR • SEMIC

    SEMIC  shift, and go to state 321


State 316

   63 outOp: WRITE PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 322


State 317

   64 outOp: WRITELN PARENL outConst PARENR • SEMIC

    SEMIC  shift, and go to state 323


State 318

   38 condStmt: IF PARENL simpleExp PARENR primitiveStmt •
   39         | IF PARENL simpleExp PARENR primitiveStmt • ELSE primitiveStmt

    ELSE  shift, and go to state 324

    ID           reduce using rule 38 (condStmt)
    TYPE         reduce using rule 38 (condStmt)
    NIL          reduce using rule 38 (condStmt)
    INTEGER      reduce using rule 38 (condStmt)
    DECIMAL      reduce using rule 38 (condStmt)
    ADD          reduce using rule 38 (condStmt)
    SUB          reduce using rule 38 (condStmt)
    HEADLIST     reduce using rule 38 (condStmt)
    TAILLIST     reduce using rule 38 (condStmt)
    DESTROYHEAD  reduce using rule 38 (condStmt)
    IF           reduce using rule 38 (condStmt)
    FOR          reduce using rule 38 (condStmt)
    READ         reduce using rule 38 (condStmt)
    WRITE        reduce using rule 38 (condStmt)
    WRITELN      reduce using rule 38 (condStmt)
    RETURN       reduce using rule 38 (condStmt)
    STFUNC       reduce using rule 38 (condStmt)
    ENDFUNC      reduce using rule 38 (condStmt)
    PARENL       reduce using rule 38 (condStmt)


State 319

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 325


State 320

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp • SEMIC assignExp PARENR primitiveStmt

    SEMIC  shift, and go to state 326


State 321

   62 inOp: READ PARENL ID PARENR SEMIC •

    ID           reduce using rule 62 (inOp)
    TYPE         reduce using rule 62 (inOp)
    NIL          reduce using rule 62 (inOp)
    INTEGER      reduce using rule 62 (inOp)
    DECIMAL      reduce using rule 62 (inOp)
    ADD          reduce using rule 62 (inOp)
    SUB          reduce using rule 62 (inOp)
    HEADLIST     reduce using rule 62 (inOp)
    TAILLIST     reduce using rule 62 (inOp)
    DESTROYHEAD  reduce using rule 62 (inOp)
    ELSE         reduce using rule 62 (inOp)
    IF           reduce using rule 62 (inOp)
    FOR          reduce using rule 62 (inOp)
    READ         reduce using rule 62 (inOp)
    WRITE        reduce using rule 62 (inOp)
    WRITELN      reduce using rule 62 (inOp)
    RETURN       reduce using rule 62 (inOp)
    STFUNC       reduce using rule 62 (inOp)
    ENDFUNC      reduce using rule 62 (inOp)
    PARENL       reduce using rule 62 (inOp)


State 322

   63 outOp: WRITE PARENL outConst PARENR SEMIC •

    ID           reduce using rule 63 (outOp)
    TYPE         reduce using rule 63 (outOp)
    NIL          reduce using rule 63 (outOp)
    INTEGER      reduce using rule 63 (outOp)
    DECIMAL      reduce using rule 63 (outOp)
    ADD          reduce using rule 63 (outOp)
    SUB          reduce using rule 63 (outOp)
    HEADLIST     reduce using rule 63 (outOp)
    TAILLIST     reduce using rule 63 (outOp)
    DESTROYHEAD  reduce using rule 63 (outOp)
    ELSE         reduce using rule 63 (outOp)
    IF           reduce using rule 63 (outOp)
    FOR          reduce using rule 63 (outOp)
    READ         reduce using rule 63 (outOp)
    WRITE        reduce using rule 63 (outOp)
    WRITELN      reduce using rule 63 (outOp)
    RETURN       reduce using rule 63 (outOp)
    STFUNC       reduce using rule 63 (outOp)
    ENDFUNC      reduce using rule 63 (outOp)
    PARENL       reduce using rule 63 (outOp)


State 323

   64 outOp: WRITELN PARENL outConst PARENR SEMIC •

    ID           reduce using rule 64 (outOp)
    TYPE         reduce using rule 64 (outOp)
    NIL          reduce using rule 64 (outOp)
    INTEGER      reduce using rule 64 (outOp)
    DECIMAL      reduce using rule 64 (outOp)
    ADD          reduce using rule 64 (outOp)
    SUB          reduce using rule 64 (outOp)
    HEADLIST     reduce using rule 64 (outOp)
    TAILLIST     reduce using rule 64 (outOp)
    DESTROYHEAD  reduce using rule 64 (outOp)
    ELSE         reduce using rule 64 (outOp)
    IF           reduce using rule 64 (outOp)
    FOR          reduce using rule 64 (outOp)
    READ         reduce using rule 64 (outOp)
    WRITE        reduce using rule 64 (outOp)
    WRITELN      reduce using rule 64 (outOp)
    RETURN       reduce using rule 64 (outOp)
    STFUNC       reduce using rule 64 (outOp)
    ENDFUNC      reduce using rule 64 (outOp)
    PARENL       reduce using rule 64 (outOp)


State 324

   39 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 225
    FOR          shift, and go to state 226
    READ         shift, and go to state 227
    WRITE        shift, and go to state 228
    WRITELN      shift, and go to state 229
    RETURN       shift, and go to state 230
    STFUNC       shift, and go to state 231
    PARENL       shift, and go to state 55

    varDeclaration        go to state 232
    simpleVarDeclaration  go to state 233
    compoundStmt          go to state 234
    primitiveStmt         go to state 327
    exprStmt              go to state 235
    condStmt              go to state 236
    iterStmt              go to state 237
    returnStmt            go to state 238
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 239
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 240
    outOp                 go to state 241
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 325

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 173

    assignExp  go to state 328


State 326

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC • assignExp PARENR primitiveStmt

    ID  shift, and go to state 173

    assignExp  go to state 329


State 327

   39 condStmt: IF PARENL simpleExp PARENR primitiveStmt ELSE primitiveStmt •

    ID           reduce using rule 39 (condStmt)
    TYPE         reduce using rule 39 (condStmt)
    NIL          reduce using rule 39 (condStmt)
    INTEGER      reduce using rule 39 (condStmt)
    DECIMAL      reduce using rule 39 (condStmt)
    ADD          reduce using rule 39 (condStmt)
    SUB          reduce using rule 39 (condStmt)
    HEADLIST     reduce using rule 39 (condStmt)
    TAILLIST     reduce using rule 39 (condStmt)
    DESTROYHEAD  reduce using rule 39 (condStmt)
    ELSE         reduce using rule 39 (condStmt)
    IF           reduce using rule 39 (condStmt)
    FOR          reduce using rule 39 (condStmt)
    READ         reduce using rule 39 (condStmt)
    WRITE        reduce using rule 39 (condStmt)
    WRITELN      reduce using rule 39 (condStmt)
    RETURN       reduce using rule 39 (condStmt)
    STFUNC       reduce using rule 39 (condStmt)
    ENDFUNC      reduce using rule 39 (condStmt)
    PARENL       reduce using rule 39 (condStmt)


State 328

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 330


State 329

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp • PARENR primitiveStmt

    PARENR  shift, and go to state 331


State 330

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 225
    FOR          shift, and go to state 226
    READ         shift, and go to state 227
    WRITE        shift, and go to state 228
    WRITELN      shift, and go to state 229
    RETURN       shift, and go to state 230
    STFUNC       shift, and go to state 231
    PARENL       shift, and go to state 55

    varDeclaration        go to state 232
    simpleVarDeclaration  go to state 233
    compoundStmt          go to state 234
    primitiveStmt         go to state 332
    exprStmt              go to state 235
    condStmt              go to state 236
    iterStmt              go to state 237
    returnStmt            go to state 238
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 239
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 240
    outOp                 go to state 241
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 331

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR • primitiveStmt

    ID           shift, and go to state 38
    TYPE         shift, and go to state 39
    NIL          shift, and go to state 40
    INTEGER      shift, and go to state 41
    DECIMAL      shift, and go to state 42
    ADD          shift, and go to state 43
    SUB          shift, and go to state 44
    HEADLIST     shift, and go to state 45
    TAILLIST     shift, and go to state 46
    DESTROYHEAD  shift, and go to state 47
    IF           shift, and go to state 225
    FOR          shift, and go to state 226
    READ         shift, and go to state 227
    WRITE        shift, and go to state 228
    WRITELN      shift, and go to state 229
    RETURN       shift, and go to state 230
    STFUNC       shift, and go to state 231
    PARENL       shift, and go to state 55

    varDeclaration        go to state 232
    simpleVarDeclaration  go to state 233
    compoundStmt          go to state 234
    primitiveStmt         go to state 333
    exprStmt              go to state 235
    condStmt              go to state 236
    iterStmt              go to state 237
    returnStmt            go to state 238
    listExp               go to state 64
    appendOps             go to state 65
    returnListOps         go to state 66
    returnListOp          go to state 67
    destroyHeadOps        go to state 68
    mapFilterOps          go to state 69
    expression            go to state 239
    assignExp             go to state 71
    simpleExp             go to state 72
    constOp               go to state 73
    inOp                  go to state 240
    outOp                 go to state 241
    binLogicalExp         go to state 76
    relationalExp         go to state 77
    sumExp                go to state 78
    sumOp                 go to state 79
    mulExp                go to state 80
    factor                go to state 81
    fCall                 go to state 82


State 332

   40 iterStmt: FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 40 (iterStmt)
    TYPE         reduce using rule 40 (iterStmt)
    NIL          reduce using rule 40 (iterStmt)
    INTEGER      reduce using rule 40 (iterStmt)
    DECIMAL      reduce using rule 40 (iterStmt)
    ADD          reduce using rule 40 (iterStmt)
    SUB          reduce using rule 40 (iterStmt)
    HEADLIST     reduce using rule 40 (iterStmt)
    TAILLIST     reduce using rule 40 (iterStmt)
    DESTROYHEAD  reduce using rule 40 (iterStmt)
    ELSE         reduce using rule 40 (iterStmt)
    IF           reduce using rule 40 (iterStmt)
    FOR          reduce using rule 40 (iterStmt)
    READ         reduce using rule 40 (iterStmt)
    WRITE        reduce using rule 40 (iterStmt)
    WRITELN      reduce using rule 40 (iterStmt)
    RETURN       reduce using rule 40 (iterStmt)
    STFUNC       reduce using rule 40 (iterStmt)
    ENDFUNC      reduce using rule 40 (iterStmt)
    PARENL       reduce using rule 40 (iterStmt)


State 333

   41 iterStmt: FOR PARENL simpleExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt •

    ID           reduce using rule 41 (iterStmt)
    TYPE         reduce using rule 41 (iterStmt)
    NIL          reduce using rule 41 (iterStmt)
    INTEGER      reduce using rule 41 (iterStmt)
    DECIMAL      reduce using rule 41 (iterStmt)
    ADD          reduce using rule 41 (iterStmt)
    SUB          reduce using rule 41 (iterStmt)
    HEADLIST     reduce using rule 41 (iterStmt)
    TAILLIST     reduce using rule 41 (iterStmt)
    DESTROYHEAD  reduce using rule 41 (iterStmt)
    ELSE         reduce using rule 41 (iterStmt)
    IF           reduce using rule 41 (iterStmt)
    FOR          reduce using rule 41 (iterStmt)
    READ         reduce using rule 41 (iterStmt)
    WRITE        reduce using rule 41 (iterStmt)
    WRITELN      reduce using rule 41 (iterStmt)
    RETURN       reduce using rule 41 (iterStmt)
    STFUNC       reduce using rule 41 (iterStmt)
    ENDFUNC      reduce using rule 41 (iterStmt)
    PARENL       reduce using rule 41 (iterStmt)
