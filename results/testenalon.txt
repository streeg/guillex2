

#### beginning ####

------------------------Syntax analysis---------------------
Type: 'int' on line: 1, column: 1
ListType: 'list' on line: 1, column: 5
Id: 'IL' at line: 1, column: 10
';' at line: 1, column: 12
Type: 'float' on line: 2, column: 1
ListType: 'list' on line: 2, column: 7
Id: 'FL' at line: 2, column: 12
';' at line: 2, column: 14
Type: 'int' on line: 4, column: 1
ListType: 'list' on line: 4, column: 5
Id: 'read_list' at line: 4, column: 10
'(' at line: 4, column: 19
Type: 'int' on line: 4, column: 20
Id: 'n' at line: 4, column: 24
')' at line: 4, column: 25
'{' on line: 4, column: 27
Type: 'int' on line: 5, column: 3
Id: 'i' at line: 5, column: 7
';' at line: 5, column: 8
Id: 'i' at line: 6, column: 3
'=' at line: 6, column: 5
Decimal: '-435.7' at line: 6, column: 8
';' at line: 6, column: 14
Type: 'int' on line: 7, column: 3
ListType: 'list' on line: 7, column: 7
Id: 'new' at line: 7, column: 12
';' at line: 7, column: 15
Id: 'new' at line: 8, column: 3
'=' at line: 8, column: 7
Constant: 'NIL' at line: 8, column: 9
';' at line: 8, column: 12
Keyword [FOR]: 'for' at line: 9, column: 3
'(' at line: 9, column: 7
Id: 'i' at line: 9, column: 8
'=' at line: 9, column: 10
Integer: '0' at line: 9, column: 12
';' at line: 9, column: 13
Id: 'i' at line: 9, column: 15
OP [SMALLER THAN]: '<' at line: 9, column: 17
Id: 'n' at line: 9, column: 19
';' at line: 9, column: 21
Id: 'i' at line: 9, column: 23
'=' at line: 9, column: 25
Id: 'i' at line: 9, column: 27
'+' at line: 9, column: 29
Integer: '1' at line: 9, column: 31
')' at line: 9, column: 32
'{' on line: 9, column: 34
Type: 'int' on line: 10, column: 5
Id: 'elem' at line: 10, column: 9
';' at line: 10, column: 13
Keyword [WRITELN]: 'writeln' at line: 11, column: 5
'(' at line: 11, column: 12
String: "Digite o elemento da lista: " on line: 11, column: 13
')' at line: 11, column: 43
';' at line: 11, column: 44
Keyword [READ]: 'read' at line: 12, column: 5
'(' at line: 12, column: 9
Id: 'elem' at line: 12, column: 10
')' at line: 12, column: 14
';' at line: 12, column: 15
Id: 'new' at line: 13, column: 5
'=' at line: 13, column: 9
Id: 'elem' at line: 13, column: 11
Keyword [APPEND]: ':' at line: 13, column: 16
Id: 'new' at line: 13, column: 18
';' at line: 13, column: 21
'}' at line: 14, column: 3
Keyword [RETURN]: 'return' at line: 15, column: 3
Id: 'new' at line: 15, column: 10
';' at line: 15, column: 13
'}' at line: 16, column: 1
Type: 'float' on line: 18, column: 1
Id: 'succ' at line: 18, column: 7
'(' at line: 18, column: 11
Type: 'int' on line: 18, column: 12
Id: 'i' at line: 18, column: 16
')' at line: 18, column: 17
'{' on line: 18, column: 19
Keyword [RETURN]: 'return' at line: 19, column: 3
Id: 'i' at line: 19, column: 10
'+' at line: 19, column: 11
Integer: '1' at line: 19, column: 12
';' at line: 19, column: 13
'}' at line: 20, column: 1
Type: 'int' on line: 23, column: 1
Id: 'leq_10' at line: 23, column: 5
'(' at line: 23, column: 11
Type: 'float' on line: 23, column: 12
Id: 'x' at line: 23, column: 18
')' at line: 23, column: 19
'{' on line: 23, column: 21
Keyword [RETURN]: 'return' at line: 24, column: 3
Id: 'x' at line: 24, column: 10
OP [SMALLER THAN OR EQUAL]: '<=' at line: 24, column: 12
Integer: '10' at line: 24, column: 15
';' at line: 24, column: 17
'}' at line: 25, column: 1
Type: 'int' on line: 28, column: 1
Id: 'main' at line: 28, column: 5
'(' at line: 28, column: 9
')' at line: 28, column: 10
'{' on line: 28, column: 12
Keyword [WRITELN]: 'writeln' at line: 30, column: 3
'(' at line: 30, column: 10
String: "Digite os número de elementos da lista: " on line: 30, column: 11
')' at line: 30, column: 54
';' at line: 30, column: 55
Type: 'int' on line: 32, column: 3
Id: 'n' at line: 32, column: 7
';' at line: 32, column: 8
Type: 'float' on line: 33, column: 3
ListType: 'list' on line: 33, column: 9
Id: 'FL10' at line: 33, column: 14
';' at line: 33, column: 18
Keyword [READ]: 'read' at line: 34, column: 3
'(' at line: 34, column: 7
Id: 'n' at line: 34, column: 8
')' at line: 34, column: 9
';' at line: 34, column: 10
Id: 'IL' at line: 36, column: 3
'=' at line: 36, column: 7
Id: 'read_list' at line: 36, column: 9
'(' at line: 36, column: 18
Id: 'n' at line: 36, column: 19
')' at line: 36, column: 20
';' at line: 36, column: 21
Id: 'FL' at line: 37, column: 3
'=' at line: 37, column: 6
Id: 'succ' at line: 37, column: 8
Keyword [MAP]: '>>' at line: 37, column: 13
Id: 'IL' at line: 37, column: 16
';' at line: 37, column: 18
Id: 'FL10' at line: 39, column: 3
'=' at line: 39, column: 8
Id: 'leq_10' at line: 39, column: 10
Keyword [FILTER]: '<<' at line: 39, column: 17
Id: 'FL' at line: 39, column: 21
';' at line: 39, column: 23
Keyword [IF]: 'if' at line: 40, column: 3
'(' at line: 40, column: 6
Id: 'FL10' at line: 40, column: 7
OP [IS DIFFERENT]: '!=' at line: 40, column: 12
Constant: 'NIL' at line: 40, column: 15
')' at line: 40, column: 18
'{' on line: 40, column: 20
Type: 'float' on line: 41, column: 5
ListType: 'list' on line: 41, column: 11
Id: 'AUXL' at line: 41, column: 16
';' at line: 41, column: 20
Type: 'int' on line: 42, column: 5
Id: 'n' at line: 42, column: 9
';' at line: 42, column: 10
Id: 'n' at line: 42, column: 12
'=' at line: 42, column: 14
Integer: '0' at line: 42, column: 16
';' at line: 42, column: 17
Keyword [FOR]: 'for' at line: 43, column: 5
'(' at line: 43, column: 9
Id: 'AUXL' at line: 43, column: 10
'=' at line: 43, column: 14
Id: 'FL10' at line: 43, column: 15
';' at line: 43, column: 19
Id: 'AUXL' at line: 43, column: 21
OP [IS DIFFERENT]: '!=' at line: 43, column: 26
Constant: 'NIL' at line: 43, column: 29
';' at line: 43, column: 32
Id: 'AUXL' at line: 43, column: 34
'=' at line: 43, column: 39
Keyword [TAILLIST]: '!' at line: 43, column: 41
Id: 'AUXL' at line: 43, column: 42
')' at line: 43, column: 46
'{' on line: 43, column: 48
Id: 'n' at line: 44, column: 7
'=' at line: 44, column: 9
Id: 'n' at line: 44, column: 11
'+' at line: 44, column: 13
Integer: '1' at line: 44, column: 15
';' at line: 44, column: 16
Keyword [WRITE]: 'write' at line: 45, column: 7
'(' at line: 45, column: 12
Keyword [HEADLIST]: '?' at line: 45, column: 13
Id: 'AUXL' at line: 45, column: 14
')' at line: 45, column: 18
';' at line: 45, column: 19
Keyword [WRITE]: 'write' at line: 45, column: 21
'(' at line: 45, column: 26
String: " " on line: 45, column: 27
')' at line: 45, column: 30
';' at line: 45, column: 31
'}' at line: 46, column: 5
Keyword [WRITELN]: 'writeln' at line: 47, column: 5
'(' at line: 47, column: 12
String: " " on line: 47, column: 13
')' at line: 47, column: 16
';' at line: 47, column: 17
Keyword [WRITE]: 'write' at line: 48, column: 5
'(' at line: 48, column: 10
String: "A nova lista tem " on line: 48, column: 11
')' at line: 48, column: 30
';' at line: 48, column: 31
Keyword [WRITE]: 'write' at line: 48, column: 33
'(' at line: 48, column: 38
Id: 'n' at line: 48, column: 39
')' at line: 48, column: 40
';' at line: 48, column: 41
Keyword [WRITELN]: 'writeln' at line: 48, column: 43
'(' at line: 48, column: 50
String: " elementos." on line: 48, column: 51
')' at line: 48, column: 64
';' at line: 48, column: 65
'}' at line: 49, column: 3
Keyword [ELSE]: 'else' at line: 50, column: 3
Keyword [WRITELN]: 'writeln' at line: 50, column: 8
'(' at line: 50, column: 15
String: "A nova lista não possui elementos." on line: 50, column: 16
')' at line: 50, column: 53
';' at line: 50, column: 54
Keyword [RETURN]: 'return' at line: 52, column: 3
Integer: '0' at line: 52, column: 10
';' at line: 52, column: 11
'}' at line: 53, column: 1


#### EOF ####



--------------------------------symbols--------------------------------

|   read_list           |    func                         |      list                    |    1    |
|   succ                |    func                         |      float                   |    2    |
|   leq_10              |    func                         |      int                     |    3    |
|   main                |    func                         |      int                     |    3    |


--------------------------------tree--------------------------------


declarationsList declaration
-->   declarationsList declaration

--->   declarationsList declaration

---->   declarationsList declaration

----->   declarationsList declaration

------>   declaration

------->   varDeclaration

-------->   simpleVarDeclaration

--------->   TYPE ID

---------->   int

----------->   list

------------>   IL

------->   varDeclaration

-------->   simpleVarDeclaration

--------->   TYPE ID

---------->   float

----------->   list

------------>   FL

------>   funcDeclaration

------->   TYPE LISTTYPE ID PARENL params PARENR compoundStmt

-------->   int

--------->   list

---------->   read_list

----------->   param

------------>   simpleVarDeclaration

------------->   TYPE ID

-------------->   int

--------------->   n

------------>   stmtList primitiveStmt

------------->   stmtList primitiveStmt

-------------->   stmtList primitiveStmt

--------------->   stmtList primitiveStmt

---------------->   stmtList primitiveStmt

----------------->   primitiveStmt

------------------>   varDeclaration

------------------->   simpleVarDeclaration

-------------------->   TYPE ID

--------------------->   int

---------------------->   i

------------------>   exprStmt

------------------->   expression SEMIC

-------------------->   assignExp

--------------------->   ID ASSIGN expression

---------------------->   i

----------------------->   =

------------------------>   simpleExp

------------------------->   binLogicalExp

-------------------------->   relationalExp

--------------------------->   sumExp

---------------------------->   mulExp

----------------------------->   factor

------------------------------>   constOp

------------------------------->   -435.700012

----------------->   varDeclaration

------------------>   simpleVarDeclaration

------------------->   TYPE ID

-------------------->   int

--------------------->   list

---------------------->   new

---------------->   exprStmt

----------------->   expression SEMIC

------------------>   assignExp

------------------->   ID ASSIGN expression

-------------------->   new

--------------------->   =

---------------------->   simpleExp

----------------------->   binLogicalExp

------------------------>   relationalExp

------------------------->   sumExp

-------------------------->   mulExp

--------------------------->   factor

---------------------------->   constOp

----------------------------->   NIL

--------------->   iterStmt

---------------->   FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

----------------->   for

------------------>   ID ASSIGN expression

------------------->   i

-------------------->   =

--------------------->   simpleExp

---------------------->   binLogicalExp

----------------------->   relationalExp

------------------------>   sumExp

------------------------->   mulExp

-------------------------->   factor

--------------------------->   constOp

---------------------------->   0

------------------->   binLogicalExp

-------------------->   relationalExp

--------------------->   relationalExp relationalOp sumExp

---------------------->   sumExp

----------------------->   mulExp

------------------------>   factor

------------------------->   ID

-------------------------->   i

----------------------->   SMALLER

------------------------>   <

------------------------>   mulExp

------------------------->   factor

-------------------------->   ID

--------------------------->   n

-------------------->   ID ASSIGN expression

--------------------->   i

---------------------->   =

----------------------->   simpleExp

------------------------>   binLogicalExp

------------------------->   relationalExp

-------------------------->   sumExp

--------------------------->   sumExp sumOp mulExp

---------------------------->   mulExp

----------------------------->   factor

------------------------------>   ID

------------------------------->   i

----------------------------->   ADD

------------------------------>   +

------------------------------>   factor

------------------------------->   constOp

-------------------------------->   1

--------------------->   compoundStmt

---------------------->   compoundStmt

----------------------->   stmtList primitiveStmt

------------------------>   stmtList primitiveStmt

------------------------->   stmtList primitiveStmt

-------------------------->   primitiveStmt

--------------------------->   varDeclaration

---------------------------->   simpleVarDeclaration

----------------------------->   TYPE ID

------------------------------>   int

------------------------------->   elem

--------------------------->   outOp

---------------------------->   WRITELN PARENL outConst PARENR SEMIC

----------------------------->   writeln

------------------------------>   STRING

------------------------------->   "Digite o elemento da lista: "

-------------------------->   inOp

--------------------------->   READ PARENL ID PARENR SEMIC

---------------------------->   read

----------------------------->   elem

------------------------->   exprStmt

-------------------------->   expression SEMIC

--------------------------->   assignExp

---------------------------->   ID ASSIGN expression

----------------------------->   new

------------------------------>   =

------------------------------->   listExp

-------------------------------->   appendOps

--------------------------------->   ID APPEND ID SEMIC

---------------------------------->   elem

----------------------------------->   :

------------------------------------>   new

-------------->   returnStmt

--------------->   RETURN expression SEMIC

---------------->   return

----------------->   simpleExp

------------------>   binLogicalExp

------------------->   relationalExp

-------------------->   sumExp

--------------------->   mulExp

---------------------->   factor

----------------------->   ID

------------------------>   new

----->   funcDeclaration

------>   TYPE ID PARENL params PARENR STFUNC stmtList ENDFUNC

------->   float

-------->   succ

--------->   param

---------->   simpleVarDeclaration

----------->   TYPE ID

------------>   int

------------->   i

---------->   primitiveStmt

----------->   returnStmt

------------>   RETURN expression SEMIC

------------->   return

-------------->   simpleExp

--------------->   binLogicalExp

---------------->   relationalExp

----------------->   sumExp

------------------>   sumExp sumOp mulExp

------------------->   mulExp

-------------------->   factor

--------------------->   ID

---------------------->   i

-------------------->   ADD

--------------------->   +

--------------------->   factor

---------------------->   constOp

----------------------->   1

---->   funcDeclaration

----->   TYPE ID PARENL params PARENR STFUNC stmtList ENDFUNC

------>   int

------->   leq_10

-------->   param

--------->   simpleVarDeclaration

---------->   TYPE ID

----------->   float

------------>   x

--------->   primitiveStmt

---------->   returnStmt

----------->   RETURN expression SEMIC

------------>   return

------------->   simpleExp

-------------->   binLogicalExp

--------------->   relationalExp

---------------->   relationalExp relationalOp sumExp

----------------->   sumExp

------------------>   mulExp

------------------->   factor

-------------------->   ID

--------------------->   x

------------------>   SMALLEQ

------------------->   <=

------------------->   mulExp

-------------------->   factor

--------------------->   constOp

---------------------->   10

--->   funcDeclaration

---->   TYPE ID PARENL PARENR compoundStmt

----->   int

------>   main

------->   stmtList primitiveStmt

-------->   stmtList primitiveStmt

--------->   stmtList primitiveStmt

---------->   stmtList primitiveStmt

----------->   stmtList primitiveStmt

------------>   stmtList primitiveStmt

------------->   stmtList primitiveStmt

-------------->   stmtList primitiveStmt

--------------->   primitiveStmt

---------------->   outOp

----------------->   WRITELN PARENL outConst PARENR SEMIC

------------------>   writeln

------------------->   STRING

-------------------->   "Digite os número de elementos da lista: "

---------------->   varDeclaration

----------------->   simpleVarDeclaration

------------------>   TYPE ID

------------------->   int

-------------------->   n

--------------->   varDeclaration

---------------->   simpleVarDeclaration

----------------->   TYPE ID

------------------>   float

------------------->   list

-------------------->   FL10

-------------->   inOp

--------------->   READ PARENL ID PARENR SEMIC

---------------->   read

----------------->   n

------------->   exprStmt

-------------->   expression SEMIC

--------------->   assignExp

---------------->   ID ASSIGN expression

----------------->   IL

------------------>   =

------------------->   simpleExp

-------------------->   binLogicalExp

--------------------->   relationalExp

---------------------->   sumExp

----------------------->   mulExp

------------------------>   factor

------------------------->   fCall

-------------------------->   ID PARENL callParams PARENR

--------------------------->   read_list

---------------------------->   simpleExp

----------------------------->   binLogicalExp

------------------------------>   relationalExp

------------------------------->   sumExp

-------------------------------->   mulExp

--------------------------------->   factor

---------------------------------->   ID

----------------------------------->   n

------------>   exprStmt

------------->   expression SEMIC

-------------->   assignExp

--------------->   ID ASSIGN expression

---------------->   FL

----------------->   =

------------------>   listExp

------------------->   mapFilterOps

-------------------->   ID MAP ID SEMIC

--------------------->   succ

---------------------->   >>

----------------------->   IL

----------->   exprStmt

------------>   expression SEMIC

------------->   assignExp

-------------->   ID ASSIGN expression

--------------->   FL10

---------------->   =

----------------->   listExp

------------------>   mapFilterOps

------------------->   ID FILTER ID SEMIC

-------------------->   leq_10

--------------------->   <<

---------------------->   FL

---------->   condStmt

----------->   IF PARENL primitiveExp PARENR primitiveStmt ELSE primitiveStmt

------------>   if

------------->   binLogicalExp

-------------->   relationalExp

--------------->   relationalExp relationalOp sumExp

---------------->   sumExp

----------------->   mulExp

------------------>   factor

------------------->   ID

-------------------->   FL10

----------------->   DIFFERENT

------------------>   !=

------------------>   mulExp

------------------->   factor

-------------------->   constOp

--------------------->   NIL

-------------->   compoundStmt

--------------->   compoundStmt

---------------->   stmtList primitiveStmt

----------------->   stmtList primitiveStmt

------------------>   stmtList primitiveStmt

------------------->   stmtList primitiveStmt

-------------------->   stmtList primitiveStmt

--------------------->   stmtList primitiveStmt

---------------------->   stmtList primitiveStmt

----------------------->   primitiveStmt

------------------------>   varDeclaration

------------------------->   simpleVarDeclaration

-------------------------->   TYPE ID

--------------------------->   float

---------------------------->   list

----------------------------->   AUXL

------------------------>   varDeclaration

------------------------->   simpleVarDeclaration

-------------------------->   TYPE ID

--------------------------->   int

---------------------------->   n

----------------------->   exprStmt

------------------------>   expression SEMIC

------------------------->   assignExp

-------------------------->   ID ASSIGN expression

--------------------------->   n

---------------------------->   =

----------------------------->   simpleExp

------------------------------>   binLogicalExp

------------------------------->   relationalExp

-------------------------------->   sumExp

--------------------------------->   mulExp

---------------------------------->   factor

----------------------------------->   constOp

------------------------------------>   0

---------------------->   iterStmt

----------------------->   FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

------------------------>   for

------------------------->   ID ASSIGN expression

-------------------------->   AUXL

--------------------------->   =

---------------------------->   simpleExp

----------------------------->   binLogicalExp

------------------------------>   relationalExp

------------------------------->   sumExp

-------------------------------->   mulExp

--------------------------------->   factor

---------------------------------->   ID

----------------------------------->   FL10

-------------------------->   binLogicalExp

--------------------------->   relationalExp

---------------------------->   relationalExp relationalOp sumExp

----------------------------->   sumExp

------------------------------>   mulExp

------------------------------->   factor

-------------------------------->   ID

--------------------------------->   AUXL

------------------------------>   DIFFERENT

------------------------------->   !=

------------------------------->   mulExp

-------------------------------->   factor

--------------------------------->   constOp

---------------------------------->   NIL

--------------------------->   ID ASSIGN expression

---------------------------->   AUXL

----------------------------->   =

------------------------------>   listExp

------------------------------->   returnListOps

-------------------------------->   returnListOp ID

--------------------------------->   TAILLIST

---------------------------------->   !

---------------------------------->   AUXL

---------------------------->   compoundStmt

----------------------------->   compoundStmt

------------------------------>   stmtList primitiveStmt

------------------------------->   stmtList primitiveStmt

-------------------------------->   primitiveStmt

--------------------------------->   exprStmt

---------------------------------->   expression SEMIC

----------------------------------->   assignExp

------------------------------------>   ID ASSIGN expression

------------------------------------->   n

-------------------------------------->   =

--------------------------------------->   simpleExp

---------------------------------------->   binLogicalExp

----------------------------------------->   relationalExp

------------------------------------------>   sumExp

------------------------------------------->   sumExp sumOp mulExp

-------------------------------------------->   mulExp

--------------------------------------------->   factor

---------------------------------------------->   ID

----------------------------------------------->   n

--------------------------------------------->   ADD

---------------------------------------------->   +

---------------------------------------------->   factor

----------------------------------------------->   constOp

------------------------------------------------>   1

--------------------------------->   outOp

---------------------------------->   WRITE PARENL outConst PARENR SEMIC

----------------------------------->   write

------------------------------------>   listExp

------------------------------------->   returnListOps

-------------------------------------->   returnListOp ID

--------------------------------------->   HEADLIST

---------------------------------------->   ?

---------------------------------------->   AUXL

-------------------------------->   outOp

--------------------------------->   WRITE PARENL outConst PARENR SEMIC

---------------------------------->   write

----------------------------------->   STRING

------------------------------------>   " "

--------------------->   outOp

---------------------->   WRITELN PARENL outConst PARENR SEMIC

----------------------->   writeln

------------------------>   STRING

------------------------->   " "

-------------------->   outOp

--------------------->   WRITE PARENL outConst PARENR SEMIC

---------------------->   write

----------------------->   STRING

------------------------>   "A nova lista tem "

------------------->   outOp

-------------------->   WRITE PARENL outConst PARENR SEMIC

--------------------->   write

---------------------->   simpleExp

----------------------->   binLogicalExp

------------------------>   relationalExp

------------------------->   sumExp

-------------------------->   mulExp

--------------------------->   factor

---------------------------->   ID

----------------------------->   n

------------------>   outOp

------------------->   WRITELN PARENL outConst PARENR SEMIC

-------------------->   writeln

--------------------->   STRING

---------------------->   " elementos."

--------------->   else

---------------->   outOp

----------------->   WRITELN PARENL outConst PARENR SEMIC

------------------>   writeln

------------------->   STRING

-------------------->   "A nova lista não possui elementos."

--------->   returnStmt

---------->   RETURN expression SEMIC

----------->   return

------------>   simpleExp

------------->   binLogicalExp

-------------->   relationalExp

--------------->   sumExp

---------------->   mulExp

----------------->   factor

------------------>   constOp

------------------->   0
