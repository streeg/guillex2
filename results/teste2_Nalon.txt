

#### beginning ####

------------------------Semantic analysis---------------------
Type: 'int' on line: 1, column: 1
Id: 'main' at line: 1, column: 5
'(' at line: 1, column: 9
')' at line: 1, column: 10
'{' on line: 2, column: 1
Type: 'float' on line: 4, column: 3
Id: 'media1' at line: 4, column: 9
';' at line: 4, column: 15
Type: 'float' on line: 5, column: 3
Id: 'media2' at line: 5, column: 9
';' at line: 5, column: 15
Type: 'float' on line: 6, column: 3
Id: 'notas' at line: 6, column: 9
';' at line: 6, column: 14
Id: 'notas' at line: 7, column: 3
'=' at line: 7, column: 9
Constant: 'NIL' at line: 7, column: 11
';' at line: 7, column: 14
Type: 'int' on line: 8, column: 3
Id: 'n' at line: 8, column: 7
';' at line: 8, column: 8
Type: 'float' on line: 9, column: 3
Id: 'soma' at line: 9, column: 9
';' at line: 9, column: 13
Id: 'soma' at line: 10, column: 3
'=' at line: 10, column: 8
Integer: '0' at line: 10, column: 10
';' at line: 10, column: 11
Type: 'float' on line: 11, column: 3
Id: 'AUX' at line: 11, column: 9
';' at line: 11, column: 12
Keyword [WRITELN]: 'writeln' at line: 13, column: 3
'(' at line: 13, column: 10
String: "Qual o número de provas?" on line: 13, column: 11
')' at line: 13, column: 38
';' at line: 13, column: 39
Keyword [READ]: 'read' at line: 14, column: 3
'(' at line: 14, column: 7
Id: 'n' at line: 14, column: 8
')' at line: 14, column: 9
';' at line: 14, column: 10
Type: 'int' on line: 16, column: 3
Id: 'i' at line: 16, column: 7
';' at line: 16, column: 8
Keyword [FOR]: 'for' at line: 18, column: 3
'(' at line: 18, column: 7
Id: 'i' at line: 18, column: 8
'=' at line: 18, column: 10
Integer: '0' at line: 18, column: 12
';' at line: 18, column: 13
Id: 'i' at line: 18, column: 15
OP [SMALLER THAN]: '<' at line: 18, column: 17
Id: 'n' at line: 18, column: 19
';' at line: 18, column: 20
Id: 'i' at line: 18, column: 22
'=' at line: 18, column: 24
Id: 'i' at line: 18, column: 26
'+' at line: 18, column: 28
Integer: '1' at line: 18, column: 30
')' at line: 18, column: 31
'{' on line: 19, column: 3
Type: 'float' on line: 20, column: 5
Id: 'nota' at line: 20, column: 11
';' at line: 20, column: 15
Keyword [WRITE]: 'write' at line: 22, column: 5
'(' at line: 22, column: 10
String: "Digite a nota da prova " on line: 22, column: 11
')' at line: 22, column: 36
';' at line: 22, column: 37
Keyword [WRITE]: 'write' at line: 23, column: 5
'(' at line: 23, column: 10
Id: 'n' at line: 23, column: 11
')' at line: 23, column: 12
';' at line: 23, column: 13
Keyword [WRITELN]: 'writeln' at line: 24, column: 5
'(' at line: 24, column: 12
String: ":" on line: 24, column: 13
')' at line: 24, column: 16
';' at line: 24, column: 17
Keyword [READ]: 'read' at line: 25, column: 5
'(' at line: 25, column: 9
Id: 'nota' at line: 25, column: 10
')' at line: 25, column: 14
';' at line: 25, column: 15
Id: 'notas' at line: 26, column: 5
'=' at line: 26, column: 11
Id: 'nota' at line: 26, column: 13
Keyword [APPEND]: ':' at line: 26, column: 18
Id: 'notas' at line: 26, column: 20
';' at line: 26, column: 25
'}' at line: 27, column: 3
Keyword [FOR]: 'for' at line: 29, column: 3
'(' at line: 29, column: 7
Id: 'AUX' at line: 29, column: 8
'=' at line: 29, column: 12
Id: 'notas' at line: 29, column: 14
';' at line: 29, column: 19
Id: 'AUX' at line: 29, column: 21
OP [IS DIFFERENT]: '!=' at line: 29, column: 25
Constant: 'NIL' at line: 29, column: 28
';' at line: 29, column: 31
Id: 'AUX' at line: 29, column: 33
'=' at line: 29, column: 37
Keyword [TAILLIST]: '!' at line: 29, column: 39
Id: 'AUX' at line: 29, column: 40
')' at line: 29, column: 43
Id: 'soma' at line: 30, column: 5
'=' at line: 30, column: 10
Id: 'soma' at line: 30, column: 12
'+' at line: 30, column: 17
Id: 'AUX' at line: 30, column: 19
';' at line: 30, column: 22
Id: 'media1' at line: 32, column: 3
'=' at line: 32, column: 10
Id: 'soma' at line: 32, column: 12
'/' at line: 32, column: 17
Id: 'n' at line: 32, column: 19
'-' at line: 32, column: 21
Integer: '10' at line: 32, column: 23
'*' at line: 32, column: 26
'(' at line: 32, column: 28
Integer: '1' at line: 32, column: 29
'/' at line: 32, column: 31
Integer: '10' at line: 32, column: 33
')' at line: 32, column: 35
';' at line: 32, column: 36
Id: 'media2' at line: 33, column: 3
'=' at line: 33, column: 10
Id: 'soma' at line: 33, column: 12
'/' at line: 33, column: 17
Id: 'n' at line: 33, column: 19
';' at line: 33, column: 20
Keyword [IF]: 'if' at line: 35, column: 3
'(' at line: 35, column: 6
Id: 'media1' at line: 35, column: 7
OP [IS DIFFERENT]: '!=' at line: 35, column: 14
Id: 'media2' at line: 35, column: 17
')' at line: 35, column: 23
Keyword [WRITELN]: 'writeln' at line: 36, column: 5
'(' at line: 36, column: 12
String: "Há um problema no cálculo da média" on line: 36, column: 13
')' at line: 36, column: 52
';' at line: 36, column: 53
Keyword [ELSE]: 'else' at line: 37, column: 3
Keyword [IF]: 'if' at line: 37, column: 8
'(' at line: 37, column: 11
Id: 'media1' at line: 37, column: 12
OP [EQUALS]: '==' at line: 37, column: 19
Id: 'media2' at line: 37, column: 22
')' at line: 37, column: 28
Keyword [WRITELN]: 'writeln' at line: 38, column: 5
'(' at line: 38, column: 12
String: "Parabéns!" on line: 38, column: 13
')' at line: 38, column: 25
';' at line: 38, column: 26
'}' at line: 39, column: 1


#### EOF ####



------------------------------------------------------symbols------------------------------------------------



|         Value         |         Symbol type             |         Return type           |         Scope       |     Parameters      |

|   main                |    func                         |      int                     |         0            |         0          |
|   media1              |    var                          |      float                   |         0            |         0          |
|   media2              |    var                          |      float                   |         0            |         0          |
|   notas               |    var                          |      float                   |         0            |         0          |
|   n                   |    var                          |      int                     |         0            |         0          |
|   soma                |    var                          |      float                   |         0            |         0          |
|   AUX                 |    var                          |      float                   |         0            |         0          |
|   i                   |    var                          |      int                     |         0            |         0          |
|   nota                |    var                          |      float                   |         0            |         0          |


--------------------------------tree--------------------------------


declaration
-->   funcDeclaration

--->   TYPE ID PARENL PARENR compoundStmt

---->   int

----->   main

------>   stmtList primitiveStmt

------->   stmtList primitiveStmt

-------->   stmtList primitiveStmt

--------->   stmtList primitiveStmt

---------->   stmtList primitiveStmt

----------->   stmtList primitiveStmt

------------>   stmtList primitiveStmt

------------->   stmtList primitiveStmt

-------------->   stmtList primitiveStmt

--------------->   stmtList primitiveStmt

---------------->   stmtList primitiveStmt

----------------->   stmtList primitiveStmt

------------------>   stmtList primitiveStmt

------------------->   stmtList primitiveStmt

-------------------->   stmtList primitiveStmt

--------------------->   primitiveStmt

---------------------->   varDeclaration

----------------------->   simpleVarDeclaration

------------------------>   TYPE ID

------------------------->   float

-------------------------->   media1

---------------------->   varDeclaration

----------------------->   simpleVarDeclaration

------------------------>   TYPE ID

------------------------->   float

-------------------------->   media2

--------------------->   varDeclaration

---------------------->   simpleVarDeclaration

----------------------->   TYPE ID

------------------------>   float

------------------------->   notas

-------------------->   exprStmt

--------------------->   expression SEMIC

---------------------->   assignExp

----------------------->   ID ASSIGN expression

------------------------>   notas

------------------------->   =

-------------------------->   simpleExp

--------------------------->   binLogicalExp

---------------------------->   relationalExp

----------------------------->   sumExp

------------------------------>   mulExp

------------------------------->   factor

-------------------------------->   constOp

--------------------------------->   NIL

------------------->   varDeclaration

-------------------->   simpleVarDeclaration

--------------------->   TYPE ID

---------------------->   int

----------------------->   n

------------------>   varDeclaration

------------------->   simpleVarDeclaration

-------------------->   TYPE ID

--------------------->   float

---------------------->   soma

----------------->   exprStmt

------------------>   expression SEMIC

------------------->   assignExp

-------------------->   ID ASSIGN expression

--------------------->   soma

---------------------->   =

----------------------->   simpleExp

------------------------>   binLogicalExp

------------------------->   relationalExp

-------------------------->   sumExp

--------------------------->   mulExp

---------------------------->   factor

----------------------------->   constOp

------------------------------>   0

---------------->   varDeclaration

----------------->   simpleVarDeclaration

------------------>   TYPE ID

------------------->   float

-------------------->   AUX

--------------->   outOp

---------------->   WRITELN PARENL outConst PARENR SEMIC

----------------->   writeln

------------------>   STRING

------------------->   "Qual o número de provas?"

-------------->   inOp

--------------->   READ PARENL ID PARENR SEMIC

---------------->   read

----------------->   n

------------->   varDeclaration

-------------->   simpleVarDeclaration

--------------->   TYPE ID

---------------->   int

----------------->   i

------------>   iterStmt

------------->   FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

-------------->   for

--------------->   ID ASSIGN expression

---------------->   i

----------------->   =

------------------>   simpleExp

------------------->   binLogicalExp

-------------------->   relationalExp

--------------------->   sumExp

---------------------->   mulExp

----------------------->   factor

------------------------>   constOp

------------------------->   0

---------------->   binLogicalExp

----------------->   relationalExp

------------------>   relationalExp relationalOp sumExp

------------------->   sumExp

-------------------->   mulExp

--------------------->   factor

---------------------->   ID

----------------------->   i

-------------------->   SMALLER

--------------------->   <

--------------------->   mulExp

---------------------->   factor

----------------------->   ID

------------------------>   n

----------------->   ID ASSIGN expression

------------------>   i

------------------->   =

-------------------->   simpleExp

--------------------->   binLogicalExp

---------------------->   relationalExp

----------------------->   sumExp

------------------------>   sumExp add mulExp

------------------------->   mulExp

-------------------------->   factor

--------------------------->   ID

---------------------------->   i

-------------------------->   +

--------------------------->   factor

---------------------------->   constOp

----------------------------->   1

------------------>   compoundStmt

------------------->   compoundStmt

-------------------->   stmtList primitiveStmt

--------------------->   stmtList primitiveStmt

---------------------->   stmtList primitiveStmt

----------------------->   stmtList primitiveStmt

------------------------>   stmtList primitiveStmt

------------------------->   primitiveStmt

-------------------------->   varDeclaration

--------------------------->   simpleVarDeclaration

---------------------------->   TYPE ID

----------------------------->   float

------------------------------>   nota

-------------------------->   outOp

--------------------------->   WRITE PARENL outConst PARENR SEMIC

---------------------------->   write

----------------------------->   STRING

------------------------------>   "Digite a nota da prova "

------------------------->   outOp

-------------------------->   WRITE PARENL outConst PARENR SEMIC

--------------------------->   write

---------------------------->   simpleExp

----------------------------->   binLogicalExp

------------------------------>   relationalExp

------------------------------->   sumExp

-------------------------------->   mulExp

--------------------------------->   factor

---------------------------------->   ID

----------------------------------->   n

------------------------>   outOp

------------------------->   WRITELN PARENL outConst PARENR SEMIC

-------------------------->   writeln

--------------------------->   STRING

---------------------------->   ":"

----------------------->   inOp

------------------------>   READ PARENL ID PARENR SEMIC

------------------------->   read

-------------------------->   nota

---------------------->   exprStmt

----------------------->   expression SEMIC

------------------------>   assignExp

------------------------->   ID ASSIGN expression

-------------------------->   notas

--------------------------->   =

---------------------------->   listExp

----------------------------->   appendOps

------------------------------>   ID APPEND ID SEMIC

------------------------------->   nota

-------------------------------->   :

--------------------------------->   notas

----------->   iterStmt

------------>   FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

------------->   for

-------------->   ID ASSIGN expression

--------------->   AUX

---------------->   =

----------------->   simpleExp

------------------>   binLogicalExp

------------------->   relationalExp

-------------------->   sumExp

--------------------->   mulExp

---------------------->   factor

----------------------->   ID

------------------------>   notas

--------------->   binLogicalExp

---------------->   relationalExp

----------------->   relationalExp relationalOp sumExp

------------------>   sumExp

------------------->   mulExp

-------------------->   factor

--------------------->   ID

---------------------->   AUX

------------------->   DIFFERENT

-------------------->   !=

-------------------->   mulExp

--------------------->   factor

---------------------->   constOp

----------------------->   NIL

---------------->   ID ASSIGN expression

----------------->   AUX

------------------>   =

------------------->   listExp

-------------------->   returnListOps

--------------------->   returnListOp ID

---------------------->   TAILLIST

----------------------->   !

----------------------->   AUX

----------------->   exprStmt

------------------>   expression SEMIC

------------------->   assignExp

-------------------->   ID ASSIGN expression

--------------------->   soma

---------------------->   =

----------------------->   simpleExp

------------------------>   binLogicalExp

------------------------->   relationalExp

-------------------------->   sumExp

--------------------------->   sumExp add mulExp

---------------------------->   mulExp

----------------------------->   factor

------------------------------>   ID

------------------------------->   soma

----------------------------->   +

------------------------------>   factor

------------------------------->   ID

-------------------------------->   AUX

---------->   exprStmt

----------->   expression SEMIC

------------>   assignExp

------------->   ID ASSIGN expression

-------------->   media1

--------------->   =

---------------->   simpleExp

----------------->   binLogicalExp

------------------>   relationalExp

------------------->   sumExp

-------------------->   sumExp sub mulExp

--------------------->   mulExp

---------------------->   mulExp mulOp factor

----------------------->   factor

------------------------>   ID

------------------------->   soma

------------------------>   /

------------------------->   ID

-------------------------->   n

---------------------->   -

----------------------->   mulExp mulOp factor

------------------------>   factor

------------------------->   constOp

-------------------------->   10

------------------------->   *

-------------------------->   PARENL simpleExp PARENR

--------------------------->   binLogicalExp

---------------------------->   relationalExp

----------------------------->   sumExp

------------------------------>   mulExp

------------------------------->   mulExp mulOp factor

-------------------------------->   factor

--------------------------------->   constOp

---------------------------------->   1

--------------------------------->   /

---------------------------------->   constOp

----------------------------------->   10

--------->   exprStmt

---------->   expression SEMIC

----------->   assignExp

------------>   ID ASSIGN expression

------------->   media2

-------------->   =

--------------->   simpleExp

---------------->   binLogicalExp

----------------->   relationalExp

------------------>   sumExp

------------------->   mulExp

-------------------->   mulExp mulOp factor

--------------------->   factor

---------------------->   ID

----------------------->   soma

---------------------->   /

----------------------->   ID

------------------------>   n

-------->   condStmt

--------->   ifStmt primitiveStmt elseStmt

---------->   IF PARENL simpleExp PARENR

----------->   if

------------>   binLogicalExp

------------->   relationalExp

-------------->   relationalExp relationalOp sumExp

--------------->   sumExp

---------------->   mulExp

----------------->   factor

------------------>   ID

------------------->   media1

---------------->   DIFFERENT

----------------->   !=

----------------->   mulExp

------------------>   factor

------------------->   ID

-------------------->   media2

----------->   outOp

------------>   WRITELN PARENL outConst PARENR SEMIC

------------->   writeln

-------------->   STRING

--------------->   "Há um problema no cálculo da média"

------------>   ELSE primitiveStmt

------------->   else

-------------->   condStmt

--------------->   ifStmt primitiveStmt

---------------->   IF PARENL simpleExp PARENR

----------------->   if

------------------>   binLogicalExp

------------------->   relationalExp

-------------------->   relationalExp relationalOp sumExp

--------------------->   sumExp

---------------------->   mulExp

----------------------->   factor

------------------------>   ID

------------------------->   media1

---------------------->   EQUALS

----------------------->   ==

----------------------->   mulExp

------------------------>   factor

------------------------->   ID

-------------------------->   media2

----------------->   outOp

------------------>   WRITELN PARENL outConst PARENR SEMIC

------------------->   writeln

-------------------->   STRING

--------------------->   "Parabéns!"


 There is 0 errors and 0 warnings in the file

