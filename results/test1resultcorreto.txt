

#### beginning ####

------------------------Semantic analysis---------------------
Type: 'int' on line: 1, column: 1
Id: 'x' at line: 1, column: 5
';' at line: 1, column: 6
Type: 'int' on line: 3, column: 1
Id: 'main' at line: 3, column: 5
'(' at line: 3, column: 9
')' at line: 3, column: 10
'{' on line: 4, column: 1
Keyword [FOR]: 'for' at line: 5, column: 5
'(' at line: 5, column: 9
Id: 'x' at line: 5, column: 10
';' at line: 5, column: 11
Id: 'x' at line: 5, column: 13
OP [SMALLER THAN]: '<' at line: 5, column: 15
Integer: '5' at line: 5, column: 17
';' at line: 5, column: 18
Id: 'x' at line: 5, column: 20
'=' at line: 5, column: 22
Id: 'x' at line: 5, column: 24
'+' at line: 5, column: 26
Integer: '1' at line: 5, column: 28
')' at line: 5, column: 29
Semantic Error
Var x from type int receiving invalid type, line 5, column 30

'{' on line: 6, column: 5
Id: 'x' at line: 7, column: 9
'=' at line: 7, column: 11
Id: 'x' at line: 7, column: 13
'+' at line: 7, column: 15
Integer: '1' at line: 7, column: 17
';' at line: 7, column: 18
Semantic Error
Var x from type int receiving invalid type, line 7, column 19

Keyword [WRITELN]: 'writeln' at line: 8, column: 9
'(' at line: 8, column: 16
Id: 'x' at line: 8, column: 17
')' at line: 8, column: 18
';' at line: 8, column: 19
Integer: '2' at line: 9, column: 9
'+' at line: 9, column: 11
Integer: '-2' at line: 9, column: 13
'*' at line: 9, column: 16
Integer: '3' at line: 9, column: 18
';' at line: 9, column: 19
'}' at line: 10, column: 5
Keyword [IF]: 'if' at line: 11, column: 5
'(' at line: 11, column: 8
Integer: '1' at line: 11, column: 9
OP [SMALLER THAN]: '<' at line: 11, column: 11
Integer: '2' at line: 11, column: 13
')' at line: 11, column: 14
'{' on line: 12, column: 5
Keyword [WRITELN]: 'writeln' at line: 13, column: 9
'(' at line: 13, column: 16
Id: 'x' at line: 13, column: 17
')' at line: 13, column: 18
';' at line: 13, column: 19
'}' at line: 14, column: 5
Keyword [ELSE]: 'else' at line: 15, column: 5
'{' on line: 16, column: 5
Keyword [IF]: 'if' at line: 17, column: 9
'(' at line: 17, column: 12
Integer: '2' at line: 17, column: 13
OP [SMALLER THAN]: '<' at line: 17, column: 15
Integer: '1' at line: 17, column: 17
')' at line: 17, column: 18
Keyword [WRITELN]: 'writeln' at line: 18, column: 13
'(' at line: 18, column: 20
Id: 'x' at line: 18, column: 21
')' at line: 18, column: 22
';' at line: 18, column: 23
'}' at line: 19, column: 5
Keyword [RETURN]: 'return' at line: 20, column: 5
Integer: '0' at line: 20, column: 12
';' at line: 20, column: 13
'}' at line: 21, column: 1
Semantic Error
function main with wrong return, line 21, column 2



#### EOF ####



------------------------------------------------------symbols------------------------------------------------



|         Value         |         Symbol type             |         Return type           |         Scope       |     Parameters      |

|   x                   |    var                          |      int                     |         0            |         0          |
|   main                |    func                         |      int                     |         0            |         0          |


--------------------------------tree--------------------------------


declarationsList declaration
-->   declaration

--->   varDeclaration

---->   simpleVarDeclaration

----->   TYPE ID

------>   int

------->   x

--->   funcDeclaration

---->   TYPE ID PARENL PARENR compoundStmt

----->   int

------>   main

------->   stmtList primitiveStmt

-------->   stmtList primitiveStmt

--------->   primitiveStmt

---------->   iterStmt

----------->   FOR PARENL assignExp SEMIC simpleExp SEMIC assignExp PARENR primitiveStmt

------------>   for

------------->   binLogicalExp

-------------->   relationalExp
>   0

--------------->   sumExp
>   0

---------------->   mulExp
>   0

----------------->   factor
>   0

------------------>   ID
>   0

-------------------
-------------->   binLogicalExp

--------------->   relationalExp

---------------->   relationalExp relationalOp sumExp

----------------->   sumExp
>   0

------------------>   mulExp
>   0

------------------->   factor
>   0

-------------------->   ID
>   0

---------------------
------------------>   SMALLER

------------------->   <

------------------->   mulExp

-------------------->   factor

--------------------->   constOp

---------------------->   5

--------------->   ID ASSIGN expression
>   0

---------------->   x

----------------->   =

------------------>   simpleExp

------------------->   binLogicalExp

-------------------->   relationalExp
>   relationalExp

--------------------->   sumExp
>   sumExp

---------------------->   sumExp sumOp mulExp
>   sumExp sumOp mulExp

----------------------->   mulExp
>   0

------------------------>   factor
>   0

------------------------->   ID
>   0

--------------------------
------------------------>   ADD

------------------------->   +

------------------------->   factor

-------------------------->   constOp

--------------------------->   1

---------------->   compoundStmt

----------------->   compoundStmt

------------------>   stmtList primitiveStmt

------------------->   stmtList primitiveStmt

-------------------->   primitiveStmt

--------------------->   exprStmt

---------------------->   expression SEMIC

----------------------->   assignExp
>   0

------------------------>   ID ASSIGN expression
>   0

------------------------->   x

-------------------------->   =

--------------------------->   simpleExp

---------------------------->   binLogicalExp

----------------------------->   relationalExp
>   relationalExp

------------------------------>   sumExp
>   sumExp

------------------------------->   sumExp sumOp mulExp
>   sumExp sumOp mulExp

-------------------------------->   mulExp
>   0

--------------------------------->   factor
>   0

---------------------------------->   ID
>   0

-----------------------------------
--------------------------------->   ADD

---------------------------------->   +

---------------------------------->   factor

----------------------------------->   constOp

------------------------------------>   1

--------------------->   outOp

---------------------->   WRITELN PARENL outConst PARENR SEMIC

----------------------->   writeln

------------------------>   simpleExp

------------------------->   binLogicalExp

-------------------------->   relationalExp
>   0

--------------------------->   sumExp
>   0

---------------------------->   mulExp
>   0

----------------------------->   factor
>   0

------------------------------>   ID
>   0

-------------------------------
-------------------->   exprStmt

--------------------->   expression SEMIC

---------------------->   simpleExp

----------------------->   binLogicalExp

------------------------>   relationalExp

------------------------->   sumExp

-------------------------->   sumExp sumOp mulExp

--------------------------->   mulExp

---------------------------->   factor

----------------------------->   constOp

------------------------------>   2

---------------------------->   ADD

----------------------------->   +

----------------------------->   mulExp mulOp factor

------------------------------>   factor

------------------------------->   constOp

-------------------------------->   -2

------------------------------->   MULT

-------------------------------->   *

-------------------------------->   constOp

--------------------------------->   3

---------->   condStmt

----------->   ifStmt primitiveStmt elseStmt

------------>   IF PARENL simpleExp PARENR

------------->   if

-------------->   binLogicalExp

--------------->   relationalExp

---------------->   relationalExp relationalOp sumExp

----------------->   sumExp

------------------>   mulExp

------------------->   factor

-------------------->   constOp

--------------------->   1

------------------>   SMALLER

------------------->   <

------------------->   mulExp

-------------------->   factor

--------------------->   constOp

---------------------->   2

------------->   compoundStmt

-------------->   compoundStmt

--------------->   primitiveStmt

---------------->   outOp

----------------->   WRITELN PARENL outConst PARENR SEMIC

------------------>   writeln

------------------->   simpleExp

-------------------->   binLogicalExp

--------------------->   relationalExp
>   0

---------------------->   sumExp
>   0

----------------------->   mulExp
>   0

------------------------>   factor
>   0

------------------------->   ID
>   0

--------------------------
-------------->   ELSE primitiveStmt

--------------->   else

---------------->   compoundStmt

----------------->   compoundStmt

------------------>   primitiveStmt

------------------->   condStmt

-------------------->   ifStmt primitiveStmt

--------------------->   IF PARENL simpleExp PARENR

---------------------->   if

----------------------->   binLogicalExp

------------------------>   relationalExp

------------------------->   relationalExp relationalOp sumExp

-------------------------->   sumExp

--------------------------->   mulExp

---------------------------->   factor

----------------------------->   constOp

------------------------------>   2

--------------------------->   SMALLER

---------------------------->   <

---------------------------->   mulExp

----------------------------->   factor

------------------------------>   constOp

------------------------------->   1

---------------------->   outOp

----------------------->   WRITELN PARENL outConst PARENR SEMIC

------------------------>   writeln

------------------------->   simpleExp

-------------------------->   binLogicalExp

--------------------------->   relationalExp
>   0

---------------------------->   sumExp
>   0

----------------------------->   mulExp
>   0

------------------------------>   factor
>   0

------------------------------->   ID
>   0

--------------------------------
--------->   returnStmt

---------->   RETURN expression SEMIC

----------->   return

------------>   simpleExp

------------->   binLogicalExp

-------------->   relationalExp

--------------->   sumExp

---------------->   mulExp

----------------->   factor

------------------>   constOp

------------------->   0


 There is 3 warnings in the file

